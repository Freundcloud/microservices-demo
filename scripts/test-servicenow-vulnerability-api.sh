#!/bin/bash

# ServiceNow Vulnerability API Test Script
# Purpose: Test uploading security scan results (Trivy) to ServiceNow Vulnerability Response

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}ServiceNow Vulnerability API Test${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Load credentials from .envrc
if [ -f .envrc ]; then
  echo -e "${YELLOW}Loading credentials from .envrc...${NC}"
  source .envrc
else
  echo -e "${RED}Error: .envrc file not found${NC}"
  echo "Please create .envrc with ServiceNow credentials"
  exit 1
fi

# Validate credentials
if [ -z "$SERVICENOW_USERNAME" ] || [ -z "$SERVICENOW_PASSWORD" ] || [ -z "$SERVICENOW_INSTANCE_URL" ]; then
  echo -e "${RED}Error: ServiceNow credentials not set${NC}"
  echo "Required environment variables:"
  echo "  - SERVICENOW_USERNAME"
  echo "  - SERVICENOW_PASSWORD"
  echo "  - SERVICENOW_INSTANCE_URL"
  exit 1
fi

echo -e "${GREEN}✓ Credentials loaded${NC}"
echo "  Instance: $SERVICENOW_INSTANCE_URL"
echo "  User: $SERVICENOW_USERNAME"
echo ""

# Step 1: Test authentication
echo -e "${BLUE}Step 1: Testing authentication...${NC}"
AUTH_TEST=$(curl -s -w "\n%{http_code}" -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sys_user?sysparm_limit=1")
HTTP_CODE=$(echo "$AUTH_TEST" | tail -n1)

if [ "$HTTP_CODE" = "200" ]; then
  echo -e "${GREEN}✓ Authentication successful${NC}"
else
  echo -e "${RED}✗ Authentication failed (HTTP $HTTP_CODE)${NC}"
  exit 1
fi
echo ""

# Step 2: Check if Vulnerability Response tables exist
echo -e "${BLUE}Step 2: Checking Vulnerability Response tables...${NC}"

# Check sn_vul_vulnerable_item
echo "  Checking sn_vul_vulnerable_item table..."
VUL_ITEM_TEST=$(curl -s -w "\n%{http_code}" -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_vulnerable_item?sysparm_limit=1")
HTTP_CODE=$(echo "$VUL_ITEM_TEST" | tail -n1)

if [ "$HTTP_CODE" = "200" ]; then
  echo -e "  ${GREEN}✓ sn_vul_vulnerable_item table accessible${NC}"
else
  echo -e "  ${RED}✗ sn_vul_vulnerable_item not accessible (HTTP $HTTP_CODE)${NC}"
  echo "  Note: Vulnerability Response application may not be installed"
fi

# Check sn_vul_entry (vulnerability entries)
echo "  Checking sn_vul_entry table..."
VUL_ENTRY_TEST=$(curl -s -w "\n%{http_code}" -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_entry?sysparm_limit=1")
HTTP_CODE=$(echo "$VUL_ENTRY_TEST" | tail -n1)

if [ "$HTTP_CODE" = "200" ]; then
  echo -e "  ${GREEN}✓ sn_vul_entry table accessible${NC}"
else
  echo -e "  ${RED}✗ sn_vul_entry not accessible (HTTP $HTTP_CODE)${NC}"
fi

# Check cmdb_ci (Configuration Items for assets)
echo "  Checking cmdb_ci table..."
CMDB_TEST=$(curl -s -w "\n%{http_code}" -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/cmdb_ci?sysparm_limit=1")
HTTP_CODE=$(echo "$CMDB_TEST" | tail -n1)

if [ "$HTTP_CODE" = "200" ]; then
  echo -e "  ${GREEN}✓ cmdb_ci table accessible${NC}"
else
  echo -e "  ${RED}✗ cmdb_ci not accessible (HTTP $HTTP_CODE)${NC}"
fi
echo ""

# Step 3: Get schema of sn_vul_vulnerable_item
echo -e "${BLUE}Step 3: Getting sn_vul_vulnerable_item schema...${NC}"
VUL_ITEM_SCHEMA=$(curl -s -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_vulnerable_item?sysparm_limit=1")

if [ $? -eq 0 ]; then
  echo "Sample record structure:"
  echo "$VUL_ITEM_SCHEMA" | jq -r '.result[0] | keys[]' 2>/dev/null | head -20 || echo "  (No records found or jq not available)"
fi
echo ""

# Step 4: Create sample Trivy vulnerability data
echo -e "${BLUE}Step 4: Creating sample Trivy vulnerability data...${NC}"

# Sample Trivy scan result (simplified)
TRIVY_RESULT=$(cat <<'EOF'
{
  "SchemaVersion": 2,
  "ArtifactName": "533267307120.dkr.ecr.eu-west-2.amazonaws.com/frontend:dev-abc123",
  "ArtifactType": "container_image",
  "Metadata": {
    "OS": {
      "Family": "alpine",
      "Name": "3.18.5"
    }
  },
  "Results": [
    {
      "Target": "533267307120.dkr.ecr.eu-west-2.amazonaws.com/frontend:dev-abc123 (alpine 3.18.5)",
      "Class": "os-pkgs",
      "Type": "alpine",
      "Vulnerabilities": [
        {
          "VulnerabilityID": "CVE-2024-1234",
          "PkgName": "openssl",
          "InstalledVersion": "3.1.0-r1",
          "FixedVersion": "3.1.4-r0",
          "Severity": "HIGH",
          "Title": "OpenSSL vulnerability",
          "Description": "Sample vulnerability description",
          "References": [
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1234"
          ]
        }
      ]
    }
  ]
}
EOF
)

echo "$TRIVY_RESULT" | jq '.' > /tmp/trivy-test-result.json
echo -e "${GREEN}✓ Sample Trivy result created${NC}"
echo "  File: /tmp/trivy-test-result.json"
echo ""

# Step 5: Transform Trivy data to ServiceNow format
echo -e "${BLUE}Step 5: Transforming Trivy data to ServiceNow format...${NC}"

# Extract vulnerability details
CVE_ID=$(echo "$TRIVY_RESULT" | jq -r '.Results[0].Vulnerabilities[0].VulnerabilityID')
PKG_NAME=$(echo "$TRIVY_RESULT" | jq -r '.Results[0].Vulnerabilities[0].PkgName')
SEVERITY=$(echo "$TRIVY_RESULT" | jq -r '.Results[0].Vulnerabilities[0].Severity')
TITLE=$(echo "$TRIVY_RESULT" | jq -r '.Results[0].Vulnerabilities[0].Title')
DESCRIPTION=$(echo "$TRIVY_RESULT" | jq -r '.Results[0].Vulnerabilities[0].Description')
IMAGE_NAME=$(echo "$TRIVY_RESULT" | jq -r '.ArtifactName')

echo "  CVE: $CVE_ID"
echo "  Package: $PKG_NAME"
echo "  Severity: $SEVERITY"
echo "  Image: $IMAGE_NAME"
echo ""

# Step 6: Check if we need to create a CI (Configuration Item) first
echo -e "${BLUE}Step 6: Checking if Configuration Item exists...${NC}"

# Search for existing CI (Docker image as asset)
CI_SEARCH=$(curl -s -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/cmdb_ci?sysparm_query=name=$IMAGE_NAME&sysparm_limit=1")

CI_COUNT=$(echo "$CI_SEARCH" | jq -r '.result | length')

if [ "$CI_COUNT" -gt 0 ]; then
  CI_SYS_ID=$(echo "$CI_SEARCH" | jq -r '.result[0].sys_id')
  echo -e "${GREEN}✓ Configuration Item exists${NC}"
  echo "  CI sys_id: $CI_SYS_ID"
else
  echo -e "${YELLOW}! Configuration Item not found - would need to create one${NC}"
  echo "  Note: In production, we'd create a CI for the Docker image"
  CI_SYS_ID="placeholder-ci-sys-id"
fi
echo ""

# Step 7: Check if vulnerability entry exists
echo -e "${BLUE}Step 7: Checking if vulnerability entry exists...${NC}"

# Search for existing vulnerability entry
VUL_SEARCH=$(curl -s -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_entry?sysparm_query=vulnerability_id=$CVE_ID&sysparm_limit=1")

VUL_COUNT=$(echo "$VUL_SEARCH" | jq -r '.result | length')

if [ "$VUL_COUNT" -gt 0 ]; then
  VUL_SYS_ID=$(echo "$VUL_SEARCH" | jq -r '.result[0].sys_id')
  echo -e "${GREEN}✓ Vulnerability entry exists${NC}"
  echo "  Vulnerability sys_id: $VUL_SYS_ID"
else
  echo -e "${YELLOW}! Vulnerability entry not found - would need to create one${NC}"
  echo "  Note: In production, we'd create a vulnerability entry for $CVE_ID"
  VUL_SYS_ID="placeholder-vul-sys-id"
fi
echo ""

# Step 8: Prepare vulnerable item payload
echo -e "${BLUE}Step 8: Preparing vulnerable item payload...${NC}"

# Map Trivy severity to ServiceNow severity
# ServiceNow uses: 1=Critical, 2=High, 3=Medium, 4=Low, 5=Informational
case $SEVERITY in
  "CRITICAL") SN_SEVERITY="1" ;;
  "HIGH") SN_SEVERITY="2" ;;
  "MEDIUM") SN_SEVERITY="3" ;;
  "LOW") SN_SEVERITY="4" ;;
  *) SN_SEVERITY="5" ;;
esac

# Create vulnerable item payload
VUL_ITEM_PAYLOAD=$(jq -n \
  --arg ci "$CI_SYS_ID" \
  --arg vul "$VUL_SYS_ID" \
  --arg severity "$SN_SEVERITY" \
  --arg source "Trivy" \
  --arg state "open" \
  '{
    "cmdb_ci": $ci,
    "vulnerability": $vul,
    "severity": $severity,
    "source": $source,
    "state": $state
  }')

echo "Vulnerable item payload:"
echo "$VUL_ITEM_PAYLOAD" | jq '.'
echo ""

# Step 9: DRY RUN - Show what would be posted
echo -e "${BLUE}Step 9: DRY RUN - What would be posted to ServiceNow${NC}"
echo ""
echo -e "${YELLOW}POST $SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_vulnerable_item${NC}"
echo "Payload:"
echo "$VUL_ITEM_PAYLOAD" | jq '.'
echo ""

# Step 10: Ask user if they want to proceed
echo -e "${BLUE}========================================${NC}"
echo -e "${YELLOW}Ready to create vulnerable item in ServiceNow?${NC}"
echo ""
echo "This will create a test vulnerability record:"
echo "  - CVE: $CVE_ID"
echo "  - Severity: $SEVERITY (ServiceNow: $SN_SEVERITY)"
echo "  - Image: $IMAGE_NAME"
echo ""
read -p "Proceed with creation? (yes/no): " PROCEED

if [ "$PROCEED" != "yes" ]; then
  echo -e "${YELLOW}Aborted by user${NC}"
  exit 0
fi

# Step 11: Create vulnerable item (LIVE)
echo ""
echo -e "${BLUE}Step 11: Creating vulnerable item in ServiceNow...${NC}"

CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
  -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  -X POST \
  -d "$VUL_ITEM_PAYLOAD" \
  "$SERVICENOW_INSTANCE_URL/api/now/table/sn_vul_vulnerable_item")

HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')

if [ "$HTTP_CODE" = "201" ]; then
  echo -e "${GREEN}✓ Vulnerable item created successfully${NC}"
  SYS_ID=$(echo "$RESPONSE_BODY" | jq -r '.result.sys_id')
  echo "  sys_id: $SYS_ID"
  echo ""
  echo "View in ServiceNow:"
  echo "  $SERVICENOW_INSTANCE_URL/sn_vul_vulnerable_item.do?sys_id=$SYS_ID"
else
  echo -e "${RED}✗ Failed to create vulnerable item (HTTP $HTTP_CODE)${NC}"
  echo "Response:"
  echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
  exit 1
fi

# Summary
echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}Test completed successfully!${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo "Summary:"
echo "  - Authentication: ✓"
echo "  - Tables accessible: ✓"
echo "  - Vulnerable item created: ✓"
echo ""
echo "Next steps:"
echo "  1. Check ServiceNow UI for the created vulnerable item"
echo "  2. Review the data mapping and adjust if needed"
echo "  3. Implement in GitHub Actions workflow"
echo ""
