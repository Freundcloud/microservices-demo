#!/usr/bin/env bash
# Automated version promotion workflow
# Creates PR ‚Üí Merges ‚Üí Deploys dev ‚Üí qa ‚Üí prod
#
# Usage:
#   ./scripts/promote-version.sh 1.1.8 all
#   ./scripts/promote-version.sh 1.1.9 frontend,cartservice

set -euo pipefail

VERSION="${1:-}"
SERVICES="${2:-all}"  # "all" or specific service names

if [ -z "$VERSION" ]; then
    echo "Usage: $0 <version> [services]"
    echo ""
    echo "Examples:"
    echo "  $0 1.1.8 all                    # Promote all services"
    echo "  $0 1.1.9 frontend,cartservice   # Promote specific services"
    echo ""
    exit 1
fi

echo "üöÄ Starting Automated Version Promotion"
echo "========================================"
echo "Version: $VERSION"
echo "Services: $SERVICES"
echo ""

# Ensure we're on main and up to date
echo "üì• Ensuring main branch is up to date..."
git checkout main 2>/dev/null || true
git pull origin main

# 1. Create feature branch
BRANCH="release/v${VERSION}"
echo "üìù Creating feature branch: $BRANCH"

# Delete branch if it exists
git branch -D "$BRANCH" 2>/dev/null || true
git push origin --delete "$BRANCH" 2>/dev/null || true

git checkout -b "$BRANCH"

# 2. Update kustomization files for all environments with semantic version
echo "üìù Updating kustomization files..."
for ENV in dev qa prod; do
    FILE="kustomize/overlays/$ENV/kustomization.yaml"
    if [ -f "$FILE" ]; then
        echo "  - $FILE"
        # Update to semantic version tag (v1.2.0)
        # Images will be tagged with this version during build
        sed -i "s/newTag: .*/newTag: v${VERSION}/" "$FILE"
        git add "$FILE"
    fi
done

# 3. Commit changes
echo "‚úÖ Committing version update"
git commit -m "chore: Promote to version ${VERSION}

Automated version promotion via scripts/promote-version.sh

- Version: ${VERSION}
- Services: ${SERVICES}
- Environments: dev, qa, prod
- Tags: v${VERSION} (semantic versioning)

This PR will trigger:
1. Auto-deploy to DEV (ServiceNow CR auto-approved)
2. Manual deploy to QA (requires ServiceNow approval)
3. Manual deploy to PROD (requires ServiceNow approval)
"

# 4. Push branch
echo "‚¨ÜÔ∏è  Pushing branch to origin"
git push origin "$BRANCH"

# 5. Create Pull Request
echo "üìù Creating Pull Request"
PR_URL=$(gh pr create \
    --base main \
    --head "$BRANCH" \
    --title "Release v${VERSION}" \
    --body "## üöÄ Automated Version Promotion

**Version**: ${VERSION}
**Services**: ${SERVICES}

## üìã Changes

This PR updates kustomization files for all environments to use semantic version tag.

- ‚úÖ Dev environment: \`newTag: v${VERSION}\`
- ‚úÖ QA environment: \`newTag: v${VERSION}\`
- ‚úÖ Prod environment: \`newTag: v${VERSION}\`

## üîÑ Deployment Plan

1. **DEV** - Auto-deploy on merge (ServiceNow CR auto-approved)
2. **QA** - Manual trigger required (ServiceNow CR requires approval)
3. **PROD** - Manual trigger required (ServiceNow CR requires approval)

## ‚úÖ Verification Checklist

- [ ] All services built successfully
- [ ] DEV deployment healthy
- [ ] QA deployment healthy
- [ ] PROD deployment healthy
- [ ] ServiceNow change requests created
- [ ] GitHub release created

## üìù ServiceNow Integration

Each environment will automatically create a ServiceNow Change Request:
- **DEV**: Auto-approved (state = \"implement\")
- **QA**: Requires manual approval (state = \"assess\")
- **PROD**: Requires manual approval (state = \"assess\")

All test results, packages, and configs will be uploaded to ServiceNow.

---

ü§ñ Generated by scripts/promote-version.sh
" 2>&1) || {
    echo "‚ùå Failed to create PR"
    exit 1
}

echo "‚úÖ Pull Request created: $PR_URL"
echo ""

# 6. Wait for CI checks to pass
echo "‚è≥ Waiting for CI checks to pass..."
sleep 10  # Give GitHub time to register the PR and start CI

# Get PR number from URL
PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')

# Watch CI checks
gh pr checks "$PR_NUMBER" --watch || {
    echo "‚ùå CI checks failed. Please review the PR: $PR_URL"
    echo ""
    echo "You can continue manually:"
    echo "  1. Fix issues and push to $BRANCH"
    echo "  2. Wait for CI to pass"
    echo "  3. Approve and merge PR: gh pr merge $PR_NUMBER --squash --delete-branch"
    exit 1
}

echo ""
echo "‚úÖ CI checks passed!"
echo ""

# 7. Wait for manual approval before merging
echo "üìã Review PR: $PR_URL"
echo ""
read -p "‚úÖ Merge PR and proceed with deployment? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚è∏Ô∏è  Merge cancelled. You can merge manually later:"
    echo "   gh pr merge $PR_NUMBER --squash --delete-branch"
    exit 0
fi

# 8. Merge PR
echo "‚úÖ Merging PR..."
gh pr merge "$PR_NUMBER" --squash --delete-branch --body "‚úÖ Manual merge confirmation - CI checks passed

All validations complete:
- ‚úÖ Security scans passed
- ‚úÖ Code validation passed
- ‚úÖ Kustomize configurations valid

Merged via scripts/promote-version.sh" || {
    echo "‚ùå Failed to merge PR. Please merge manually: $PR_URL"
    echo ""
    echo "This might happen if:"
    echo "  - Branch protection rules require approval"
    echo "  - GitHub doesn't allow merging your own PR"
    echo ""
    echo "To merge manually:"
    echo "  gh pr merge $PR_NUMBER --squash --delete-branch"
    exit 1
}

echo "‚úÖ PR merged to main"
echo ""

# 8. Wait for main branch to be updated
echo "‚è≥ Waiting for main branch update..."
git checkout main
git pull origin main
sleep 5  # Give GitHub Actions time to start

echo ""

# 9. Wait for MASTER-PIPELINE to start for DEV
echo "üü¢ DEV deployment starting automatically (push to main)..."
echo "   ServiceNow CR: Auto-approved for dev"
echo ""

sleep 15  # Let workflow start

# Get the latest MASTER-PIPELINE run
DEV_RUN=$(gh run list --workflow=MASTER-PIPELINE.yaml --limit 1 --json databaseId --jq '.[0].databaseId' 2>/dev/null || echo "")

if [ -n "$DEV_RUN" ]; then
    echo "   üìä Workflow run: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$DEV_RUN"
    echo "   ‚è≥ Watching workflow progress..."
    echo ""

    gh run watch "$DEV_RUN" --exit-status || {
        echo "‚ùå DEV deployment failed. Check workflow: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$DEV_RUN"
        exit 1
    }

    echo ""
    echo "‚úÖ DEV deployment complete"
else
    echo "‚ö†Ô∏è  Could not find workflow run. Check manually:"
    echo "   https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions"
fi

echo ""

# 10. Prompt for QA deployment
read -p "üü° Deploy to QA? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üü° Triggering QA deployment..."
    echo "   ServiceNow CR: Requires manual approval in ServiceNow"
    echo ""

    gh workflow run MASTER-PIPELINE.yaml -f environment=qa

    sleep 10  # Let workflow start

    QA_RUN=$(gh run list --workflow=MASTER-PIPELINE.yaml --limit 1 --json databaseId --jq '.[0].databaseId' 2>/dev/null || echo "")

    if [ -n "$QA_RUN" ]; then
        echo "   üìä Workflow run: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$QA_RUN"
        echo "   ‚è∏Ô∏è  Waiting for ServiceNow CR approval..."
        echo "   üìù Approve at: https://calitiiltddemo3.service-now.com/now/nav/ui/classic/params/target/change_request_list.do"
        echo ""

        gh run watch "$QA_RUN" --exit-status || {
            echo "‚ùå QA deployment failed. Check workflow: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$QA_RUN"
            exit 1
        }

        echo ""
        echo "‚úÖ QA deployment complete"
    else
        echo "‚ö†Ô∏è  Could not find workflow run. Check manually:"
        echo "   https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions"
    fi

    echo ""
fi

# 11. Prompt for PROD deployment
read -p "üî¥ Deploy to PROD? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üî¥ Triggering PROD deployment..."
    echo "   ServiceNow CR: Requires manual approval in ServiceNow"
    echo ""

    gh workflow run MASTER-PIPELINE.yaml -f environment=prod

    sleep 10  # Let workflow start

    PROD_RUN=$(gh run list --workflow=MASTER-PIPELINE.yaml --limit 1 --json databaseId --jq '.[0].databaseId' 2>/dev/null || echo "")

    if [ -n "$PROD_RUN" ]; then
        echo "   üìä Workflow run: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$PROD_RUN"
        echo "   ‚è∏Ô∏è  Waiting for ServiceNow CR approval..."
        echo "   üìù Approve at: https://calitiiltddemo3.service-now.com/now/nav/ui/classic/params/target/change_request_list.do"
        echo ""

        gh run watch "$PROD_RUN" --exit-status || {
            echo "‚ùå PROD deployment failed. Check workflow: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions/runs/$PROD_RUN"
            exit 1
        }

        echo ""
        echo "‚úÖ PROD deployment complete"
    else
        echo "‚ö†Ô∏è  Could not find workflow run. Check manually:"
        echo "   https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/actions"
    fi

    echo ""
fi

echo "üéâ Version promotion complete!"
echo "================================"
echo ""
echo "## üìä Summary"
echo ""
echo "| Item | Value |"
echo "|------|-------|"
echo "| Version | **${VERSION}** |"
echo "| Services | ${SERVICES} |"
echo "| Branch | \`$BRANCH\` (merged and deleted) |"
echo "| PR | $PR_URL |"
echo ""
echo "### üåç Environments"
echo ""
echo "- ‚úÖ **DEV** - Deployed"
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "- ‚úÖ **QA** - Deployed"
    echo "- ‚úÖ **PROD** - Deployed"
else
    echo "- ‚è≠Ô∏è **QA** - Skipped"
    echo "- ‚è≠Ô∏è **PROD** - Skipped"
fi
echo ""
echo "### üìù Next Steps"
echo ""
echo "1. Verify deployments in Kubernetes:"
echo "   \`\`\`bash"
echo "   kubectl get pods -n microservices-dev"
echo "   kubectl get pods -n microservices-qa"
echo "   kubectl get pods -n microservices-prod"
echo "   \`\`\`"
echo ""
echo "2. Check ServiceNow Change Requests:"
echo "   https://calitiiltddemo3.service-now.com/now/nav/ui/classic/params/target/change_request_list.do"
echo ""
echo "3. View frontend applications:"
echo "   - DEV: \`just k8s-url\`"
echo "   - QA: Check Istio ingress gateway"
echo "   - PROD: Check Istio ingress gateway"
echo ""
echo "‚ú® Done!"
