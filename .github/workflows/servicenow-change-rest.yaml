---
name: "ServiceNow Change Request (REST API)"

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev/qa/prod)'
        required: true
        type: string
      change_type:
        description: 'Type of change (kubernetes/terraform/configuration)'
        required: false
        type: string
        default: 'kubernetes'
      short_description:
        description: 'Short description of the change'
        required: true
        type: string
      description:
        description: 'Detailed description of the change'
        required: false
        type: string
      implementation_plan:
        description: 'Implementation plan'
        required: false
        type: string
      backout_plan:
        description: 'Backout plan'
        required: false
        type: string
      test_plan:
        description: 'Test plan'
        required: false
        type: string
      assignment_group:
        description: 'Assignment group for the change'
        required: false
        type: string
        default: 'GitHubARC DevOps Admin'
      assigned_to:
        description: 'User assigned to the change'
        required: false
        type: string
        default: 'Olaf Krasicki-Freund'
      # Additional deployment context
      services_deployed:
        description: 'JSON array of services being deployed'
        required: false
        type: string
        default: '[]'
      infrastructure_changes:
        description: 'Whether infrastructure changes are included'
        required: false
        type: string
        default: 'false'
      security_scanners:
        description: 'List of security scanners that ran'
        required: false
        type: string
        default: ''
      pr_number:
        description: 'Pull request number if triggered by PR'
        required: false
        type: string
        default: ''
      previous_version:
        description: 'Previous version being replaced'
        required: false
        type: string
        default: ''
      # Security scan results
      security_scan_status:
        description: 'Overall security scan status (passed/failed/warning)'
        required: false
        type: string
        default: ''
      critical_vulnerabilities:
        description: 'Count of critical severity vulnerabilities'
        required: false
        type: string
        default: '0'
      high_vulnerabilities:
        description: 'Count of high severity vulnerabilities'
        required: false
        type: string
        default: '0'
      medium_vulnerabilities:
        description: 'Count of medium severity vulnerabilities'
        required: false
        type: string
        default: '0'
      # Unit test results
      unit_test_status:
        description: 'Overall unit test status (passed/failed/skipped)'
        required: false
        type: string
        default: ''
      unit_test_total:
        description: 'Total number of unit tests executed'
        required: false
        type: string
        default: '0'
      unit_test_passed:
        description: 'Number of unit tests that passed'
        required: false
        type: string
        default: '0'
      unit_test_failed:
        description: 'Number of unit tests that failed'
        required: false
        type: string
        default: '0'
      unit_test_coverage:
        description: 'Code coverage percentage from unit tests'
        required: false
        type: string
        default: ''
      unit_test_url:
        description: 'Link to detailed unit test results'
        required: false
        type: string
        default: ''
      # SonarCloud scan results
      sonarcloud_status:
        description: 'SonarCloud quality gate status (passed/failed/warning)'
        required: false
        type: string
        default: ''
      sonarcloud_bugs:
        description: 'Number of bugs detected by SonarCloud'
        required: false
        type: string
        default: '0'
      sonarcloud_vulnerabilities:
        description: 'Number of vulnerabilities detected by SonarCloud'
        required: false
        type: string
        default: '0'
      sonarcloud_code_smells:
        description: 'Number of code smells detected by SonarCloud'
        required: false
        type: string
        default: '0'
      sonarcloud_coverage:
        description: 'Code coverage percentage from SonarCloud'
        required: false
        type: string
        default: ''
      sonarcloud_duplications:
        description: 'Code duplication percentage from SonarCloud'
        required: false
        type: string
        default: ''
      sonarcloud_url:
        description: 'Link to SonarCloud project dashboard'
        required: false
        type: string
        default: ''
      # Deployment metadata
      deployment_method:
        description: 'Deployment method (e.g., Kustomize overlays, Helm, kubectl)'
        required: false
        type: string
        default: 'Kustomize overlays'
      application_url:
        description: 'Load balancer URL for the deployed application'
        required: false
        type: string
        default: ''
    outputs:
      change_number:
        description: "ServiceNow Change Request Number"
        value: ${{ jobs.create-change.outputs.change_number }}
      change_sys_id:
        description: "ServiceNow Change Request Sys ID"
        value: ${{ jobs.create-change.outputs.change_sys_id }}

permissions:
  contents: read

jobs:
  create-change:
    name: "Create Change Request (${{ inputs.environment }})"
    runs-on: ubuntu-latest
    outputs:
      change_number: ${{ steps.create-cr.outputs.change_number }}
      change_sys_id: ${{ steps.create-cr.outputs.change_sys_id }}

    steps:
      - name: Prepare Change Request Data
        id: prepare
        run: |
          # Determine state based on environment
          # ServiceNow state values: -5=New, -4=Assess, -3=Authorize, -2=Scheduled, -1=Implement, 0=Review, 3=Closed, 4=Canceled
          # State flow enforced by business rules: New → Assess → Authorize → Scheduled → Implement → Review → Closed
          # Dev: Auto-deploy (Scheduled state, no approval needed)
          # QA/Prod: Requires manual approval (Assess state)
          if [ "${{ inputs.environment }}" = "dev" ]; then
            STATE="-2"  # Scheduled (auto-approved, ready to deploy)
            PRIORITY="3"       # Low priority
          elif [ "${{ inputs.environment }}" = "qa" ]; then
            STATE="-4"  # Assess (requires manual approval for QA)
            PRIORITY="3"       # Medium priority
          else
            STATE="-4"  # Assess (requires manual approval for production)
            PRIORITY="2"       # High priority (production)
          fi

          echo "state=$STATE" >> $GITHUB_OUTPUT
          echo "priority=$PRIORITY" >> $GITHUB_OUTPUT

          # Debug logging
          echo "DEBUG: Environment=${{ inputs.environment }}, STATE=$STATE, PRIORITY=$PRIORITY"

      - name: Create Change Request via REST API
        id: create-cr
        continue-on-error: true
        env:
          SHORT_DESC: ${{ inputs.short_description }} [${{ inputs.environment }}]
          DESCRIPTION: ${{ inputs.description || format('Automated deployment to {0} environment via GitHub Actions', inputs.environment) }}
          STATE: ${{ steps.prepare.outputs.state }}
          PRIORITY: ${{ steps.prepare.outputs.priority }}
          ASSIGNMENT_GROUP: ${{ inputs.assignment_group }}
          ASSIGNED_TO: ${{ inputs.assigned_to }}
          IMPL_PLAN: ${{ inputs.implementation_plan || '1. Configure kubectl access to EKS cluster\n2. Apply Kustomize overlays\n3. Monitor rollout status\n4. Verify all pods healthy\n5. Test application endpoints' }}
          BACKOUT_PLAN: ${{ inputs.backout_plan || '1. Execute kubectl rollout undo\n2. Verify rollback completed\n3. Monitor pod status\n4. Test application functionality\n5. Notify stakeholders' }}
          TEST_PLAN: ${{ inputs.test_plan || '1. Verify deployments rolled out\n2. Check all pods Running\n3. Verify service endpoints\n4. Test frontend accessibility\n5. Monitor application metrics' }}
          ENVIRONMENT: ${{ inputs.environment }}
          CHANGE_TYPE: ${{ inputs.change_type }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # Determine risk/impact based on environment
          if [ "$ENVIRONMENT" = "prod" ]; then
            RISK="2"
            IMPACT="2"
            CAB_REQUIRED="true"
            PROD_SYSTEM="true"
          else
            RISK="3"
            IMPACT="3"
            CAB_REQUIRED="false"
            PROD_SYSTEM="false"
          fi

          # Extract branch name from ref
          BRANCH_NAME="${{ github.ref }}"
          BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          BRANCH_NAME="${BRANCH_NAME#refs/tags/}"

          # Determine PR number
          PR_NUM="${{ inputs.pr_number }}"

          # Try to get PR number from pull_request event
          if [ -z "$PR_NUM" ] && [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUM="${{ github.event.pull_request.number }}"
          fi

          # Try to extract PR number from merge commit message (e.g., "Merge pull request #123")
          if [ -z "$PR_NUM" ]; then
            # Extract from first line only to avoid parsing entire commit body
            COMMIT_FIRST_LINE="$(echo "$COMMIT_MESSAGE" | head -1)"
            if [[ "$COMMIT_FIRST_LINE" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
              PR_NUM="${BASH_REMATCH[1]}"
              echo "Extracted PR number from commit message: #$PR_NUM"
            elif [[ "$COMMIT_FIRST_LINE" =~ \(#([0-9]+)\) ]]; then
              # Also handle squash merge format: "feat: description (#123)"
              PR_NUM="${BASH_REMATCH[1]}"
              echo "Extracted PR number from squash commit: #$PR_NUM"
            fi
          fi

          # Build security scanners list
          SCANNERS="${{ inputs.security_scanners }}"
          if [ -z "$SCANNERS" ]; then
            SCANNERS="CodeQL, Trivy, Semgrep, OWASP Dependency Check, Gitleaks, Checkov, Kubesec"
          fi

          # Determine service name based on environment
          if [ "$ENVIRONMENT" = "dev" ]; then
            SERVICE_NAME="Online Boutique (DEV)"
          elif [ "$ENVIRONMENT" = "qa" ]; then
            SERVICE_NAME="Online Boutique (QA)"
          else
            SERVICE_NAME="Online Boutique (PROD)"
          fi

          # Determine security scan status
          SECURITY_STATUS="${{ inputs.security_scan_status }}"
          CRITICAL="${{ inputs.critical_vulnerabilities }}"
          HIGH="${{ inputs.high_vulnerabilities }}"
          MEDIUM="${{ inputs.medium_vulnerabilities }}"

          # Auto-determine status if not provided
          if [ -z "$SECURITY_STATUS" ]; then
            if [ "$CRITICAL" != "0" ] || [ "$HIGH" != "0" ]; then
              SECURITY_STATUS="warning"
            else
              SECURITY_STATUS="passed"
            fi
          fi

          # Build security scan URL
          SECURITY_URL="https://github.com/${{ github.repository }}/security/code-scanning"

          # Build cluster namespace (microservices-{environment})
          CLUSTER_NAMESPACE="microservices-$ENVIRONMENT"

          # Get deployment method
          DEPLOYMENT_METHOD="${{ inputs.deployment_method }}"

          # Get application URL (may be empty if not yet deployed)
          APPLICATION_URL="${{ inputs.application_url }}"

          # Build the JSON payload using jq
          # Note: Detailed metadata (repository, commit, environment, etc.) is now stored in dedicated custom fields
          # IMPORTANT: Use --argjson for numeric values (state, priority, risk, impact, urgency) to ensure they're sent as numbers not strings
          PAYLOAD=$(jq -n \
            --arg short_desc "$SHORT_DESC" \
            --arg description "$DESCRIPTION" \
            --arg type "standard" \
            --argjson state "$STATE" \
            --argjson priority "$PRIORITY" \
            --arg assignment_group "$ASSIGNMENT_GROUP" \
            --arg assigned_to "$ASSIGNED_TO" \
            --arg category "DevOps" \
            --arg subcategory "Deployment" \
            --argjson risk "$RISK" \
            --argjson impact "$IMPACT" \
            --argjson urgency "3" \
            --arg justification "Automated deployment via CI/CD pipeline. Changes have been tested in lower environments and approved via pull request workflow. Security scans: $SECURITY_STATUS" \
            --arg impl_plan "$IMPL_PLAN" \
            --arg backout_plan "$BACKOUT_PLAN" \
            --arg test_plan "$TEST_PLAN" \
            --argjson cab_required "$CAB_REQUIRED" \
            --argjson prod_system "$PROD_SYSTEM" \
            --arg outside_maint "false" \
            --arg business_service "$SERVICE_NAME" \
            --arg u_source "GitHub Actions" \
            --arg u_env "$ENVIRONMENT" \
            --arg u_type "$CHANGE_TYPE" \
            --arg u_repo "${{ github.repository }}" \
            --arg u_workflow "${{ github.workflow }}" \
            --arg u_run_id "${{ github.run_id }}" \
            --arg u_actor "${{ github.actor }}" \
            --arg u_ref "${{ github.ref }}" \
            --arg u_sha "${{ github.sha }}" \
            --arg u_branch "$BRANCH_NAME" \
            --arg u_pr_number "$PR_NUM" \
            --arg u_services_deployed "${{ inputs.services_deployed }}" \
            --arg u_infrastructure_changes "${{ inputs.infrastructure_changes }}" \
            --arg u_security_scanners "$SCANNERS" \
            --arg u_previous_version "${{ inputs.previous_version }}" \
            --arg u_commit_message "$COMMIT_MESSAGE" \
            --arg u_security_scan_status "$SECURITY_STATUS" \
            --arg u_critical_vulnerabilities "$CRITICAL" \
            --arg u_high_vulnerabilities "$HIGH" \
            --arg u_medium_vulnerabilities "$MEDIUM" \
            --arg u_security_scan_url "$SECURITY_URL" \
            --arg u_cluster_namespace "$CLUSTER_NAMESPACE" \
            --arg u_deployment_method "$DEPLOYMENT_METHOD" \
            --arg u_application_url "$APPLICATION_URL" \
            --arg u_unit_test_status "${{ inputs.unit_test_status }}" \
            --arg u_unit_test_total "${{ inputs.unit_test_total }}" \
            --arg u_unit_test_passed "${{ inputs.unit_test_passed }}" \
            --arg u_unit_test_failed "${{ inputs.unit_test_failed }}" \
            --arg u_unit_test_coverage "${{ inputs.unit_test_coverage }}" \
            --arg u_unit_test_url "${{ inputs.unit_test_url }}" \
            --arg u_sonarcloud_status "${{ inputs.sonarcloud_status }}" \
            --arg u_sonarcloud_bugs "${{ inputs.sonarcloud_bugs }}" \
            --arg u_sonarcloud_vulnerabilities "${{ inputs.sonarcloud_vulnerabilities }}" \
            --arg u_sonarcloud_code_smells "${{ inputs.sonarcloud_code_smells }}" \
            --arg u_sonarcloud_coverage "${{ inputs.sonarcloud_coverage }}" \
            --arg u_sonarcloud_duplications "${{ inputs.sonarcloud_duplications }}" \
            --arg u_sonarcloud_url "${{ inputs.sonarcloud_url }}" \
            '{
              short_description: $short_desc,
              description: $description,
              type: $type,
              state: $state,
              priority: $priority,
              assignment_group: $assignment_group,
              assigned_to: $assigned_to,
              category: $category,
              subcategory: $subcategory,
              risk: $risk,
              impact: $impact,
              urgency: $urgency,
              justification: $justification,
              implementation_plan: $impl_plan,
              backout_plan: $backout_plan,
              test_plan: $test_plan,
              cab_required: $cab_required,
              production_system: $prod_system,
              outside_maintenance_schedule: $outside_maint,
              business_service: $business_service,
              u_source: $u_source,
              u_environment: $u_env,
              u_change_type: $u_type,
              u_github_repo: $u_repo,
              u_github_workflow: $u_workflow,
              u_github_run_id: $u_run_id,
              u_github_actor: $u_actor,
              u_github_ref: $u_ref,
              u_github_sha: $u_sha,
              u_github_branch: $u_branch,
              u_github_pr_number: $u_pr_number,
              u_services_deployed: $u_services_deployed,
              u_infrastructure_changes: $u_infrastructure_changes,
              u_security_scanners: $u_security_scanners,
              u_previous_version: $u_previous_version,
              u_commit_message: $u_commit_message,
              u_security_scan_status: $u_security_scan_status,
              u_critical_vulnerabilities: $u_critical_vulnerabilities,
              u_high_vulnerabilities: $u_high_vulnerabilities,
              u_medium_vulnerabilities: $u_medium_vulnerabilities,
              u_security_scan_url: $u_security_scan_url,
              u_cluster_namespace: $u_cluster_namespace,
              u_deployment_method: $u_deployment_method,
              u_application_url: $u_application_url,
              u_unit_test_status: $u_unit_test_status,
              u_unit_test_total: $u_unit_test_total,
              u_unit_test_passed: $u_unit_test_passed,
              u_unit_test_failed: $u_unit_test_failed,
              u_unit_test_coverage: $u_unit_test_coverage,
              u_unit_test_url: $u_unit_test_url,
              u_sonarcloud_status: $u_sonarcloud_status,
              u_sonarcloud_bugs: $u_sonarcloud_bugs,
              u_sonarcloud_vulnerabilities: $u_sonarcloud_vulnerabilities,
              u_sonarcloud_code_smells: $u_sonarcloud_code_smells,
              u_sonarcloud_coverage: $u_sonarcloud_coverage,
              u_sonarcloud_duplications: $u_sonarcloud_duplications,
              u_sonarcloud_url: $u_sonarcloud_url
            }'
          )

          echo "Creating change request in ServiceNow..."
          echo "DEBUG: STATE value being sent: $STATE"
          echo "DEBUG: PAYLOAD state field:"
          echo "$PAYLOAD" | jq '.state'
          echo "DEBUG: Full payload (first 500 chars):"
          echo "$PAYLOAD" | head -c 500

          # Make the API call
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request")

          # Extract HTTP code and body
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          echo "HTTP Status: $HTTP_CODE"

          if [ "$HTTP_CODE" = "201" ]; then
            CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number')
            CHANGE_SYSID=$(echo "$BODY" | jq -r '.result.sys_id')

            echo "✅ Change Request Created: $CHANGE_NUMBER"
            echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
            echo "change_sys_id=$CHANGE_SYSID" >> $GITHUB_OUTPUT

            # CRITICAL: ServiceNow business rules force new CRs to state -5 (New)
            # We must UPDATE the state in a separate API call
            echo "Updating state to $STATE..."

            UPDATE_PAYLOAD=$(jq -n \
              --argjson state "$STATE" \
              '{state: $state}')

            UPDATE_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              -H "Content-Type: application/json" \
              -X PATCH \
              -d "$UPDATE_PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/${CHANGE_SYSID}")

            UPDATE_HTTP_CODE=$(echo "$UPDATE_RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
            UPDATE_BODY=$(echo "$UPDATE_RESPONSE" | sed '/HTTP_CODE:/d')

            if [ "$UPDATE_HTTP_CODE" = "200" ]; then
              ACTUAL_STATE=$(echo "$UPDATE_BODY" | jq -r '.result.state')
              echo "✅ State updated to: $ACTUAL_STATE"
            else
              echo "⚠️  State update failed (HTTP $UPDATE_HTTP_CODE) - CR will remain in default state"
              echo "$UPDATE_BODY" | jq '.' || echo "$UPDATE_BODY"
            fi

            # Add to job summary
            {
              echo "## 📝 ServiceNow Change Request Created"
              echo ""
              echo "**Change Number:** $CHANGE_NUMBER"
              echo "**Environment:** ${{ inputs.environment }}"
              echo "**Requested State:** $STATE"
              echo "**Actual State:** ${ACTUAL_STATE:-Unknown}"
              echo ""
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/change_request.do?sys_id=${CHANGE_SYSID})"
            } >> $GITHUB_STEP_SUMMARY

            exit 0
          else
            echo "❌ Change Request Creation Failed (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"

            # Add to job summary
            {
              echo "## ❌ ServiceNow Change Request Failed"
              echo ""
              echo "**Environment:** ${{ inputs.environment }}"
              echo "**HTTP Status:** $HTTP_CODE"
              echo ""
              echo "**Error:** See job logs for details"
            } >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow for dev environment
            if [ "${{ inputs.environment }}" = "dev" ]; then
              echo "⚠️  Continuing despite failure (dev environment)"
              exit 0
            else
              exit 1
            fi
          fi

      - name: Wait for Change Approval (QA/PROD)
        if: inputs.environment != 'dev' && steps.create-cr.outputs.change_number != ''
        run: |
          CHANGE_SYSID="${{ steps.create-cr.outputs.change_sys_id }}"
          CHANGE_NUMBER="${{ steps.create-cr.outputs.change_number }}"

          echo "⏳ Waiting for approval of Change Request: $CHANGE_NUMBER"
          echo "🔗 View: ${{ secrets.SERVICENOW_INSTANCE_URL }}/change_request.do?sys_id=${CHANGE_SYSID}"

          MAX_WAIT=3600  # 1 hour
          ELAPSED=0
          INTERVAL=60    # Check every 60 seconds

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # Get current state
            RESPONSE=$(curl -s \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/${CHANGE_SYSID}?sysparm_fields=state,approval")

            STATE=$(echo "$RESPONSE" | jq -r '.result.state')
            APPROVAL=$(echo "$RESPONSE" | jq -r '.result.approval')

            echo "Current state: $STATE, Approval: $APPROVAL"

            # State values: -5=New, -4=Assess, -3=Authorize, -2=Scheduled, -1=Implement, 0=Review, 3=Closed
            # Approval values: not_requested, requested, approved, rejected

            # Accept if:
            # 1. State is Scheduled (-2) or Implement (-1) - already authorized, ready to deploy
            # 2. Approval is approved (any state except Assess/New)
            # 3. State is Review (0) - post-deployment
            if [ "$STATE" = "-2" ] || [ "$STATE" = "-1" ]; then
              echo "✅ Change Request authorized (state: $STATE) - ready for deployment"
              exit 0
            elif [ "$APPROVAL" = "approved" ]; then
              echo "✅ Change Request approved (approval: $APPROVAL, state: $STATE) - ready for deployment"
              exit 0
            elif [ "$APPROVAL" = "rejected" ]; then
              echo "❌ Change Request was rejected"
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            echo "Waited ${ELAPSED}s / ${MAX_WAIT}s..."
          done

          echo "⏱️  Timeout waiting for approval after ${MAX_WAIT}s"
          exit 1
