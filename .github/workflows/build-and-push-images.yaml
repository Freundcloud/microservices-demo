name: "Build and Push Docker Images to ECR"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - '.github/workflows/build-and-push-images.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated, or "all")'
        required: false
        default: 'all'

permissions:
  contents: read
  security-events: write
  id-token: write

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

jobs:
  # Detect which services have changes
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            emailservice:
              - 'src/emailservice/**'
            productcatalogservice:
              - 'src/productcatalogservice/**'
            recommendationservice:
              - 'src/recommendationservice/**'
            shippingservice:
              - 'src/shippingservice/**'
            checkoutservice:
              - 'src/checkoutservice/**'
            paymentservice:
              - 'src/paymentservice/**'
            currencyservice:
              - 'src/currencyservice/**'
            cartservice:
              - 'src/cartservice/**'
            frontend:
              - 'src/frontend/**'
            adservice:
              - 'src/adservice/**'
            loadgenerator:
              - 'src/loadgenerator/**'
            shoppingassistantservice:
              - 'src/shoppingassistantservice/**'

      - name: Set Matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.services }}" == "all" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo 'matrix=["emailservice","productcatalogservice","recommendationservice","shippingservice","checkoutservice","paymentservice","currencyservice","cartservice","frontend","adservice","loadgenerator","shoppingassistantservice"]' >> $GITHUB_OUTPUT
          else
            # Get list of changed services
            CHANGED=$(echo '${{ steps.filter.outputs.changes }}' | jq -c 'split("\n") | map(select(length > 0))')
            echo "matrix=$CHANGED" >> $GITHUB_OUTPUT
          fi

  # Build, scan, and push Docker images
  build-and-push:
    name: Build & Push
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Docker Context Path
        id: context
        run: |
          if [ "${{ matrix.service }}" == "cartservice" ]; then
            echo "path=src/cartservice/src" >> $GITHUB_OUTPUT
          else
            echo "path=src/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: trivy-${{ matrix.service }}

      - name: Run Trivy Vulnerability Scanner (Table Output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Push to ECR (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        if: github.ref == 'refs/heads/main'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.service }}.json

      - name: Upload SBOM
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.json
          retention-days: 30

  # Create summary
  build-summary:
    name: Build Summary
    needs: build-and-push
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Create Summary
        run: |
          echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images" >> $GITHUB_STEP_SUMMARY
          echo "All images have been scanned for vulnerabilities and pushed to ECR." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy vulnerability scanning completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated for all images" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
