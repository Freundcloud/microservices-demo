name: Deploy with ServiceNow (Basic API)

# 📖 WORKFLOW DESCRIPTION
# This workflow demonstrates basic ServiceNow integration using REST API only:
# ✅ Simple REST API integration (no DevOps Change Velocity required)
# ✅ Basic authentication with username/password
# ✅ Environment-specific risk assessment (dev/qa/prod)
# ✅ Multi-level approval workflow with polling
# ✅ Automated rollback on failure
# ✅ Comprehensive error handling with retry logic
# ✅ Rich observability and metrics
#
# Use this workflow when:
# - You want the simplest possible ServiceNow integration
# - You don't need DevOps workspace tracking
# - You don't have IntegrationHub plugins available
#
# 📚 Documentation: docs/GITHUB-SERVICENOW-INTEGRATION-GUIDE.md

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}

jobs:
  # Job 1: Run Security Scans
  security-scans:
    name: Run Security Scans
    uses: ./.github/workflows/security-scan.yaml
    secrets: inherit

  # Job 2: Create ServiceNow Change Request
  create-change-request:
    name: Create Change Request
    runs-on: ubuntu-latest
    needs: [security-scans]
    outputs:
      change_request_number: ${{ steps.create-cr.outputs.change_number }}
      change_request_sys_id: ${{ steps.create-cr.outputs.change_sys_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine change settings
        id: settings
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ "$ENV" == "dev" ]; then
            echo "state=3" >> $GITHUB_OUTPUT  # Closed/Complete
            echo "risk=3" >> $GITHUB_OUTPUT   # Low
            echo "priority=3" >> $GITHUB_OUTPUT
            echo "assignment_group=DevOps Team" >> $GITHUB_OUTPUT
            echo "auto_close=true" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "qa" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=2" >> $GITHUB_OUTPUT    # Medium
            echo "priority=2" >> $GITHUB_OUTPUT
            echo "assignment_group=QA Team" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "prod" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=1" >> $GITHUB_OUTPUT    # High
            echo "priority=1" >> $GITHUB_OUTPUT
            echo "assignment_group=Change Advisory Board" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Change Request via REST API
        id: create-cr
        run: |
          ENV="${{ github.event.inputs.environment }}"

          # Get application sys_id if configured (optional)
          APP_SYS_ID="${{ secrets.SERVICENOW_APP_SYS_ID }}"

          # Build payload with optional application association
          if [ -n "$APP_SYS_ID" ] && [ "$APP_SYS_ID" != "null" ]; then
            # Create change request payload WITH application
            PAYLOAD=$(cat <<EOF
          {
            "short_description": "Deploy Online Boutique to $ENV",
            "description": "Automated deployment via GitHub Actions.\n\nApplication: Online Boutique\nEnvironment: $ENV\nCommit: ${{ github.sha }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-$ENV\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "ROLLBACK PROCEDURE (ISO 27001 A.14.2.2 / SOC 2 CC7.2):\n\n1. IMMEDIATE ROLLBACK:\n   kubectl rollout undo deployment/<service> -n microservices-$ENV\n   - Reverts to previous stable version\n   - Automatic for all deployments in namespace\n   - Expected duration: 2-5 minutes\n\n2. VERIFICATION:\n   kubectl rollout status deployment/<service> -n microservices-$ENV\n   kubectl get pods -n microservices-$ENV\n   - Verify all pods Running\n   - Check no CrashLoopBackOff\n   - Confirm service endpoints healthy\n\n3. FULL ENVIRONMENT REVERT (if needed):\n   kubectl delete -k kustomize/overlays/$ENV\n   kubectl apply -k kustomize/overlays/$ENV@previous-tag\n   - Complete environment restoration\n   - Expected duration: 5-10 minutes\n\n4. POST-ROLLBACK VALIDATION:\n   - Run health checks on all services\n   - Verify Istio metrics normal\n   - Check application logs for errors\n   - Confirm user access restored\n\n5. NOTIFICATION:\n   - Update ServiceNow change to 'Rolled Back'\n   - Notify stakeholders via Slack/Email\n   - Create incident if data loss occurred\n\n6. EMERGENCY CONTACTS:\n   - On-call engineer: Check PagerDuty rotation\n   - Platform team: #platform-support channel\n   - ServiceNow: github_integration user\n\nRollback Approval: Automatic (no approval needed for rollback)\nData Loss Risk: NONE (stateless application)\nDowntime Window: 2-10 minutes depending on method",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-$ENV\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "${{ steps.settings.outputs.risk }}",
            "priority": "${{ steps.settings.outputs.priority }}",
            "assignment_group": "${{ steps.settings.outputs.assignment_group }}",
            "state": "${{ steps.settings.outputs.state }}",
            "type": "standard",
            "requested_by": "${{ secrets.SERVICENOW_USERNAME }}",
            "business_service": "$APP_SYS_ID",
            "cmdb_ci": "$APP_SYS_ID",
            "u_application": "Online Boutique"
          }
          EOF
            )
          else
            # Create change request payload WITHOUT application
            PAYLOAD=$(cat <<EOF
          {
            "short_description": "Deploy microservices-demo to $ENV",
            "description": "Automated deployment via GitHub Actions.\n\nEnvironment: $ENV\nCommit: ${{ github.sha }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-$ENV\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "ROLLBACK PROCEDURE (ISO 27001 A.14.2.2 / SOC 2 CC7.2):\n\n1. IMMEDIATE ROLLBACK:\n   kubectl rollout undo deployment/<service> -n microservices-$ENV\n   - Reverts to previous stable version\n   - Automatic for all deployments in namespace\n   - Expected duration: 2-5 minutes\n\n2. VERIFICATION:\n   kubectl rollout status deployment/<service> -n microservices-$ENV\n   kubectl get pods -n microservices-$ENV\n   - Verify all pods Running\n   - Check no CrashLoopBackOff\n   - Confirm service endpoints healthy\n\n3. FULL ENVIRONMENT REVERT (if needed):\n   kubectl delete -k kustomize/overlays/$ENV\n   kubectl apply -k kustomize/overlays/$ENV@previous-tag\n   - Complete environment restoration\n   - Expected duration: 5-10 minutes\n\n4. POST-ROLLBACK VALIDATION:\n   - Run health checks on all services\n   - Verify Istio metrics normal\n   - Check application logs for errors\n   - Confirm user access restored\n\n5. NOTIFICATION:\n   - Update ServiceNow change to 'Rolled Back'\n   - Notify stakeholders via Slack/Email\n   - Create incident if data loss occurred\n\n6. EMERGENCY CONTACTS:\n   - On-call engineer: Check PagerDuty rotation\n   - Platform team: #platform-support channel\n   - ServiceNow: github_integration user\n\nRollback Approval: Automatic (no approval needed for rollback)\nData Loss Risk: NONE (stateless application)\nDowntime Window: 2-10 minutes depending on method",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-$ENV\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "${{ steps.settings.outputs.risk }}",
            "priority": "${{ steps.settings.outputs.priority }}",
            "assignment_group": "${{ steps.settings.outputs.assignment_group }}",
            "state": "${{ steps.settings.outputs.state }}",
            "type": "standard",
            "requested_by": "${{ secrets.SERVICENOW_USERNAME }}"
          }
          EOF
            )
          fi

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Retry logic with exponential backoff
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📝 Creating change request with retry logic..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "🔄 Attempt $ATTEMPT of $MAX_RETRIES..."

            # Create change request and capture HTTP code
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request" 2>/dev/null)

            # Split response and HTTP code
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (201 Created)
            if [ "$HTTP_CODE" == "201" ]; then
              # Extract change number and sys_id
              CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number')
              CHANGE_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id')
              STATE=$(echo "$BODY" | jq -r '.result.state')
              RISK=$(echo "$BODY" | jq -r '.result.risk')

              if [ "$CHANGE_NUMBER" == "null" ] || [ -z "$CHANGE_NUMBER" ]; then
                echo "❌ API returned 201 but no change number in response"
                echo "$BODY" | jq .
                exit 1
              fi

              echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
              echo "change_sys_id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "✅ CHANGE REQUEST CREATED SUCCESSFULLY"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ✅ Change Request Created Successfully" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Sys ID** | \`$CHANGE_SYS_ID\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Risk** | \`$RISK\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Attempts Used** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
              echo "| **Created At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))  # Exponential backoff: 5s, 10s, 20s
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx)
            if [[ "$HTTP_CODE" =~ ^4 ]]; then
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "❌ CLIENT ERROR - NOT RETRYING"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ❌ Change Request Creation Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Client error (HTTP $HTTP_CODE) - not retryable**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Unknown error or max retries reached
            echo "❌ Unexpected HTTP code: $HTTP_CODE"
            ATTEMPT=$((ATTEMPT + 1))
          done

          # Max retries exhausted
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ MAX RETRIES EXHAUSTED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "## ❌ Change Request Creation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Max retries ($MAX_RETRIES) exhausted**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Attempts** | $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
          echo "| **Last HTTP Code** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Last Response:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Upload Security Evidence to ServiceNow
  upload-security-evidence:
    name: Upload Security Evidence
    runs-on: ubuntu-latest
    needs: [create-change-request, security-scans]
    if: always() && needs.create-change-request.result == 'success' && needs.security-scans.result != 'cancelled'

    steps:
      - name: Download security evidence from scans
        uses: actions/download-artifact@v4
        with:
          name: security-scan-evidence
        continue-on-error: true

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload evidence files to ServiceNow Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          echo "📤 Uploading security scan evidence to ServiceNow Change Request $CHANGE_NUMBER..."
          echo ""

          # Upload evidence report (Markdown summary)
          if [ -f "security-scan-evidence.md" ]; then
            echo "Uploading: security-scan-evidence.md"
            curl -s -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@security-scan-evidence.md" \
              -F "file_name=security-scan-evidence-${{ github.run_number }}.md" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "✅ Uploaded: security-scan-evidence-${{ github.run_number }}.md"
          else
            echo "⚠️  Evidence report not found (scans may have failed)"
          fi

          # Upload SARIF files (detailed scan results)
          UPLOADED_COUNT=0
          shopt -s nullglob
          for sarif_file in *.sarif; do
            if [ -f "$sarif_file" ]; then
              echo "Uploading: $sarif_file"
              curl -s -X POST \
                -H "Authorization: Basic $BASIC_AUTH" \
                -F "file=@$sarif_file" \
                -F "table_name=change_request" \
                -F "table_sys_id=$CHANGE_SYS_ID" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
              echo "✅ Uploaded: $sarif_file"
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            fi
          done
          shopt -u nullglob

          # Upload Polaris K8s results (if exists)
          if [ -f "polaris-results.json" ]; then
            echo "Uploading: polaris-results.json"
            curl -s -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@polaris-results.json" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "✅ Uploaded: polaris-results.json"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ SECURITY EVIDENCE UPLOADED TO SERVICENOW"
          echo "   Total files: $UPLOADED_COUNT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

      - name: Checkout code for commit metadata
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Add GitHub Integration metadata to Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Get commit details
          COMMIT_MSG=$(git log -1 --pretty=format:'%s' 2>/dev/null || echo "Manual deployment")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>' 2>/dev/null || echo "${{ github.actor }}")

          # Get PR info if available
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [ -n "$PR_NUMBER" ]; then
            PR_INFO="Pull Request: #$PR_NUMBER - $PR_TITLE"
          else
            PR_INFO="Direct commit (no PR)"
          fi

          # Build correlation tracking info
          CORRELATION_ID="${{ github.repository }}-${{ github.run_id }}"

          # Add GitHub metadata work note with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📝 Adding GitHub integration metadata to change request..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "   Attempt $ATTEMPT of $MAX_RETRIES..."

            # Build comprehensive GitHub metadata note using jq to avoid YAML issues
            PAYLOAD=$(jq -n \
              --arg repo "${{ github.repository }}" \
              --arg branch "${{ github.ref_name }}" \
              --arg commit "${{ github.sha }}" \
              --arg commit_msg "${COMMIT_MSG}" \
              --arg commit_author "${COMMIT_AUTHOR}" \
              --arg actor "${{ github.actor }}" \
              --arg event "${{ github.event_name }}" \
              --arg pr_info "${PR_INFO}" \
              --arg workflow_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              --arg run_number "${{ github.run_number }}" \
              --arg correlation_id "${CORRELATION_ID}" \
              --arg repo_url "${{ github.server_url }}/${{ github.repository }}" \
              --arg commit_url "${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" \
              --arg security_url "${{ github.server_url }}/${{ github.repository }}/security" \
              --arg environment "${{ github.event.inputs.environment }}" \
              --arg namespace "microservices-${{ github.event.inputs.environment }}" \
              --arg timestamp "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
              '{
                work_notes: (
                  "GitHub Integration Metadata\n\n" +
                  "Repository: \($repo)\n" +
                  "Branch: \($branch)\n" +
                  "Commit: \($commit)\n" +
                  "Commit Message: \($commit_msg)\n" +
                  "Commit Author: \($commit_author)\n\n" +
                  "Triggered By: \($actor)\n" +
                  "Trigger Event: \($event)\n" +
                  "\($pr_info)\n\n" +
                  "Workflow Run: \($workflow_url)\n" +
                  "Run Number: #\($run_number)\n" +
                  "Correlation ID: \($correlation_id)\n\n" +
                  "Links:\n" +
                  "- Repository: \($repo_url)\n" +
                  "- Commit: \($commit_url)\n" +
                  "- Security: \($security_url)\n\n" +
                  "Deployment:\n" +
                  "- Environment: \($environment)\n" +
                  "- Namespace: \($namespace)\n" +
                  "- Type: Kubernetes (AWS EKS)\n" +
                  "- Method: Kustomize Overlay\n\n" +
                  "Timestamp: \($timestamp)\n\n" +
                  "Note: This change request was automatically created and tracked by GitHub Actions."
                )
              }'
            )

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo ""
              echo "✅ GITHUB METADATA ADDED TO CHANGE REQUEST $CHANGE_NUMBER"
              echo ""
              break
            fi

            # Retry on server errors
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "   ⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            echo "   ⚠️  Failed to add GitHub metadata (HTTP $HTTP_CODE)"
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ $ATTEMPT -gt $MAX_RETRIES ]; then
            echo "⚠️  Warning: Could not add GitHub metadata after $MAX_RETRIES attempts"
            echo "   Continuing workflow..."
          fi

      - name: Add GitHub Issues & Risk Assessment to Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          echo "📊 Collecting GitHub Issues data for risk assessment..."

          # Get open issues count
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length' 2>/dev/null || echo "0")

          # Get open bugs
          OPEN_BUGS=$(gh issue list --state open --label bug --json number,title,labels,url 2>/dev/null || echo "[]")
          OPEN_BUGS_COUNT=$(echo "$OPEN_BUGS" | jq 'length' 2>/dev/null || echo "0")

          # Get security issues
          SECURITY_ISSUES=$(gh issue list --state open --label security --json number,title,labels,url 2>/dev/null || echo "[]")
          SECURITY_ISSUES_COUNT=$(echo "$SECURITY_ISSUES" | jq 'length' 2>/dev/null || echo "0")

          # Get critical issues
          CRITICAL_ISSUES=$(gh issue list --state open --label critical --json number,title,url 2>/dev/null || echo "[]")
          CRITICAL_ISSUES_COUNT=$(echo "$CRITICAL_ISSUES" | jq 'length' 2>/dev/null || echo "0")

          # Calculate issue trends (last 30 days)
          THIRTY_DAYS_AGO=$(date -u -d '30 days ago' '+%Y-%m-%d' 2>/dev/null || date -u -v-30d '+%Y-%m-%d')
          RECENT_OPENED=$(gh issue list --state all --search "created:>=$THIRTY_DAYS_AGO" --json number --jq 'length' 2>/dev/null || echo "0")
          RECENT_CLOSED=$(gh issue list --state closed --search "closed:>=$THIRTY_DAYS_AGO" --json number --jq 'length' 2>/dev/null || echo "0")

          # Calculate risk score
          RISK_SCORE=0

          # Environment risk
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            RISK_SCORE=$((RISK_SCORE + 2))
          elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
            RISK_SCORE=$((RISK_SCORE + 1))
          fi

          # Issue-based risk
          RISK_SCORE=$((RISK_SCORE + CRITICAL_ISSUES_COUNT * 5))
          RISK_SCORE=$((RISK_SCORE + SECURITY_ISSUES_COUNT * 3))
          RISK_SCORE=$((RISK_SCORE + OPEN_BUGS_COUNT * 1))

          # Determine risk level
          if [ $RISK_SCORE -le 2 ]; then
            RISK_LEVEL="LOW"
            RECOMMENDATION="APPROVE"
          elif [ $RISK_SCORE -le 5 ]; then
            RISK_LEVEL="MEDIUM"
            RECOMMENDATION="REQUIRES REVIEW"
          else
            RISK_LEVEL="HIGH"
            RECOMMENDATION="REQUIRES EXTRA SCRUTINY"
          fi

          # Build blocking conditions
          BLOCKING_CONDITIONS=""
          if [ $CRITICAL_ISSUES_COUNT -gt 0 ]; then
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}❌ $CRITICAL_ISSUES_COUNT critical issue(s) open\n"
          else
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}✅ No critical issues\n"
          fi

          if [ $SECURITY_ISSUES_COUNT -gt 0 ]; then
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}❌ $SECURITY_ISSUES_COUNT security issue(s) open\n"
          else
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}✅ No security issues\n"
          fi

          if [ $OPEN_BUGS_COUNT -gt 0 ]; then
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}⚠️  $OPEN_BUGS_COUNT bug(s) open\n"
          else
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}✅ No open bugs\n"
          fi

          # Add environment-specific checks
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            BLOCKING_CONDITIONS="${BLOCKING_CONDITIONS}⚠️  Production environment deployment\n"
          fi

          # Build issues list for work note
          ISSUES_LIST=""
          if [ $OPEN_BUGS_COUNT -gt 0 ]; then
            ISSUES_LIST=$(echo "$OPEN_BUGS" | jq -r '.[] | "  - Issue #\(.number): \(.title)\n    URL: \(.url)"' | head -10)
          fi

          SECURITY_LIST=""
          if [ $SECURITY_ISSUES_COUNT -gt 0 ]; then
            SECURITY_LIST=$(echo "$SECURITY_ISSUES" | jq -r '.[] | "  - Issue #\(.number): \(.title)\n    URL: \(.url)"' | head -10)
          fi

          CRITICAL_LIST=""
          if [ $CRITICAL_ISSUES_COUNT -gt 0 ]; then
            CRITICAL_LIST=$(echo "$CRITICAL_ISSUES" | jq -r '.[] | "  - Issue #\(.number): \(.title)\n    URL: \(.url)"' | head -10)
          fi

          # Build comprehensive issues note using jq
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "   Attempt $ATTEMPT of $MAX_RETRIES..."

            PAYLOAD=$(jq -n \
              --arg risk_level "$RISK_LEVEL" \
              --arg risk_score "$RISK_SCORE" \
              --arg recommendation "$RECOMMENDATION" \
              --arg open_issues "$OPEN_ISSUES" \
              --arg open_bugs "$OPEN_BUGS_COUNT" \
              --arg security_issues "$SECURITY_ISSUES_COUNT" \
              --arg critical_issues "$CRITICAL_ISSUES_COUNT" \
              --arg recent_opened "$RECENT_OPENED" \
              --arg recent_closed "$RECENT_CLOSED" \
              --arg blocking_conditions "$BLOCKING_CONDITIONS" \
              --arg issues_list "$ISSUES_LIST" \
              --arg security_list "$SECURITY_LIST" \
              --arg critical_list "$CRITICAL_LIST" \
              --arg repo_url "${{ github.server_url }}/${{ github.repository }}" \
              --arg environment "${{ github.event.inputs.environment }}" \
              --arg timestamp "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
              '{
                work_notes: (
                  "GitHub Issues & Risk Assessment\n\n" +
                  "RISK LEVEL: \($risk_level)\n" +
                  "Risk Score: \($risk_score)/10\n" +
                  "Recommendation: \($recommendation)\n\n" +
                  "Open Issues Summary:\n" +
                  "- Total Open: \($open_issues)\n" +
                  "- Open Bugs: \($open_bugs)\n" +
                  "- Security Issues: \($security_issues)\n" +
                  "- Critical Issues: \($critical_issues)\n\n" +
                  "Recent Activity (Last 30 Days):\n" +
                  "- Recently Opened: \($recent_opened)\n" +
                  "- Recently Closed: \($recent_closed)\n\n" +
                  "Blocking Conditions:\n" +
                  "\($blocking_conditions)\n" +
                  (if ($critical_list != "") then "Critical Issues:\n\($critical_list)\n\n" else "" end) +
                  (if ($security_list != "") then "Security Issues:\n\($security_list)\n\n" else "" end) +
                  (if ($issues_list != "") then "Open Bugs:\n\($issues_list)\n\n" else "" end) +
                  "Environment: \($environment)\n\n" +
                  "Links:\n" +
                  "- All Issues: \($repo_url)/issues\n" +
                  "- Open Bugs: \($repo_url)/issues?q=is:open+label:bug\n" +
                  "- Security Issues: \($repo_url)/issues?q=is:open+label:security\n" +
                  "- Security Alerts: \($repo_url)/security\n\n" +
                  "Timestamp: \($timestamp)\n\n" +
                  "Note: This risk assessment is automatically calculated based on open issues, environment, and deployment scope."
                )
              }'
            )

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo ""
              echo "✅ RISK ASSESSMENT ADDED TO CHANGE REQUEST $CHANGE_NUMBER"
              echo "   Risk Level: $RISK_LEVEL"
              echo "   Risk Score: $RISK_SCORE/10"
              echo "   Recommendation: $RECOMMENDATION"
              echo ""
              break
            fi

            # Retry on server errors
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "   ⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            echo "   ⚠️  Failed to add risk assessment (HTTP $HTTP_CODE)"
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ $ATTEMPT -gt $MAX_RETRIES ]; then
            echo "⚠️  Warning: Could not add risk assessment after $MAX_RETRIES attempts"
            echo "   Continuing workflow..."
          fi

      - name: Add security scan work note to Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Get security scan results from artifacts
          OVERALL_STATUS="UNKNOWN"
          TOTAL_FINDINGS="N/A"

          if [ -f "security-scan-evidence.md" ]; then
            # Try to extract status from evidence file
            if grep -q "COMPLIANCE STATUS.*All security scans passed" security-scan-evidence.md; then
              OVERALL_STATUS="PASSED"
              TOTAL_FINDINGS="0"
            elif grep -q "COMPLIANCE STATUS.*Security findings require review" security-scan-evidence.md; then
              OVERALL_STATUS="FAILED"
              # Try to extract finding count
              TOTAL_FINDINGS=$(grep "Total Findings:" security-scan-evidence.md | head -n1 | grep -oP '\d+' || echo "N/A")
            fi
          fi

          # Create comprehensive work note
          WORK_NOTE="🔒 Security Scan Evidence Uploaded

          Overall Status: ${OVERALL_STATUS}
          Findings (HIGH/CRITICAL): ${TOTAL_FINDINGS}

          Security Scans Executed:
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          ✓ CodeQL Analysis (Python, JavaScript, Go, Java, C#)
          ✓ Semgrep SAST (Static Application Security Testing)
          ✓ Trivy Filesystem Scan (Vulnerability & misconfiguration)
          ✓ Checkov + tfsec (Infrastructure as Code security)
          ✓ Kubesec + Polaris (Kubernetes manifest security)
          ✓ OWASP Dependency Check (Known CVEs in dependencies)

          $(if [ "$OVERALL_STATUS" == "PASSED" ]; then
            echo "✅ APPROVAL RECOMMENDATION: All security scans passed"
            echo "   Safe to proceed with deployment to ${{ github.event.inputs.environment }}"
          elif [ "$OVERALL_STATUS" == "FAILED" ]; then
            echo "⚠️  REVIEW REQUIRED: ${TOTAL_FINDINGS} security findings detected"
            echo "   Review attached evidence before approving deployment"
          else
            echo "ℹ️  Security scans completed - review attached evidence"
          fi)

          Evidence Documents Attached:
          - security-scan-evidence-${{ github.run_number }}.md (Executive Summary)
          - *.sarif files (Detailed scan results in SARIF format)
          - polaris-results.json (Kubernetes security audit)

          Links:
          - Full Scan Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Security Alerts: ${{ github.server_url }}/${{ github.repository }}/security
          - Code Scanning: ${{ github.server_url }}/${{ github.repository }}/security/code-scanning

          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          Evidence Uploaded: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Pipeline Version: v1.0.0 - GitHub Actions Automated Security"

          # Add work note with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📝 Adding security evidence work note to change request..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "   Attempt $ATTEMPT of $MAX_RETRIES..."

            PAYLOAD=$(jq -n --arg note "$WORK_NOTE" '{work_notes: $note}')

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "✅ WORK NOTE ADDED TO CHANGE REQUEST $CHANGE_NUMBER"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ✅ Security Evidence Uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Security Status** | \`$OVERALL_STATUS\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Total Findings** | $TOTAL_FINDINGS |" >> $GITHUB_STEP_SUMMARY
              echo "| **Evidence Files** | Multiple SARIF + summary report |" >> $GITHUB_STEP_SUMMARY
              echo "| **Work Note** | ✅ Added successfully |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retry on server errors
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "   ⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            echo "   ❌ Failed (HTTP $HTTP_CODE)"
            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "⚠️  Warning: Could not add work note after $MAX_RETRIES attempts"
          echo "   Evidence files were uploaded successfully"
          exit 0

  # Job 4: Wait for Approval (QA and Prod only)
  wait-for-approval:
    name: Wait for Change Approval
    runs-on: ubuntu-latest
    needs: [create-change-request, upload-security-evidence]
    if: github.event.inputs.environment != 'dev'

    steps:
      - name: Wait for ServiceNow approval with Smart Polling
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          ENV="${{ github.event.inputs.environment }}"

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Timeout settings
          if [ "$ENV" == "qa" ]; then
            TIMEOUT=7200  # 2 hours
          else
            TIMEOUT=86400  # 24 hours
          fi

          POLL_INTERVAL=30  # 30 seconds
          ELAPSED=0
          WARNING_THRESHOLD=$((TIMEOUT * 80 / 100))
          WARNING_SHOWN=false

          # Initial summary
          echo "## ⏸️  Waiting for ServiceNow Approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Poll Interval** | ${POLL_INTERVAL}s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Approve in ServiceNow**: [$CHANGE_NUMBER](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Helper functions
          format_time() {
            local seconds=$1
            printf "%02d:%02d:%02d" $((seconds / 3600)) $(((seconds % 3600) / 60)) $((seconds % 60))
          }

          generate_progress_bar() {
            local current=$1
            local total=$2
            local width=40
            local percentage=$((current * 100 / total))
            local filled=$((width * current / total))
            local empty=$((width - filled))
            printf "["
            printf "%${filled}s" | tr ' ' '█'
            printf "%${empty}s" | tr ' ' '░'
            printf "] %3d%%" "$percentage"
          }

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🕐 Polling for approval..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get change request state with retry
            MAX_RETRIES=3
            RETRY_COUNT=0
            POLL_SUCCESS=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Basic $BASIC_AUTH" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID?sysparm_fields=state,approval,approval_set" 2>/dev/null)

              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | sed '$d')

              if [ "$HTTP_CODE" == "200" ]; then
                STATE=$(echo "$BODY" | jq -r '.result.state')
                APPROVAL=$(echo "$BODY" | jq -r '.result.approval')
                POLL_SUCCESS=true
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "⚠️  Poll failed (HTTP $HTTP_CODE), retry $RETRY_COUNT of $MAX_RETRIES..."
                sleep 5
              fi
            done

            if [ "$POLL_SUCCESS" = false ]; then
              echo "❌ Failed to poll ServiceNow after $MAX_RETRIES attempts"
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ **Polling failed** - Could not reach ServiceNow API" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Calculate progress
            PROGRESS_BAR=$(generate_progress_bar $ELAPSED $TIMEOUT)
            TIME_ELAPSED=$(format_time $ELAPSED)
            TIME_REMAINING=$(format_time $((TIMEOUT - ELAPSED)))

            echo "⏱️  $TIME_ELAPSED elapsed | $TIME_REMAINING remaining | State: $STATE | Approval: $APPROVAL"
            echo "   $PROGRESS_BAR"

            # Check if approved
            if [ "$APPROVAL" == "approved" ]; then
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "✅ CHANGE REQUEST APPROVED!"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ✅ Change Request Approved" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Approved At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Ready to deploy** to \`$ENV\` environment" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Check if rejected
            if [ "$APPROVAL" == "rejected" ]; then
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "❌ CHANGE REQUEST REJECTED!"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ❌ Change Request Rejected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Rejected At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ **Deployment blocked** - Change request rejected in ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Warning at 80% timeout
            if [ $ELAPSED -ge $WARNING_THRESHOLD ] && [ "$WARNING_SHOWN" = false ]; then
              echo ""
              echo "⚠️  WARNING: 80% of approval timeout reached!"
              echo ""
              echo "⚠️ **Warning**: 80% of timeout reached" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              WARNING_SHOWN=true
            fi

            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
          done

          # Timeout reached
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ APPROVAL TIMEOUT REACHED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "## ❌ Approval Timeout" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final Approval** | \`$APPROVAL\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Deployment blocked** - Approval timeout reached without approval or rejection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Pre-Deployment Checks
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval]
    if: always() && needs.create-change-request.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
          kubectl get nodes

      - name: Check namespace exists
        run: |
          NAMESPACE="microservices-${{ github.event.inputs.environment }}"
          if ! kubectl get namespace $NAMESPACE 2>/dev/null; then
            echo "⚠️ Namespace $NAMESPACE does not exist, creating..."
            kubectl create namespace $NAMESPACE
            kubectl label namespace $NAMESPACE istio-injection=enabled
            echo "✅ Namespace created and labeled for Istio injection"
          else
            echo "✅ Namespace $NAMESPACE exists"
          fi

      - name: Pre-deployment validation complete
        run: |
          echo "✅ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "Ready to deploy to **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Application
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval, pre-deployment-checks]
    if: always() && needs.pre-deployment-checks.result == 'success'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy using Kustomize
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"

          kubectl apply -k kustomize/overlays/$ENV

          echo "NAMESPACE=microservices-$ENV" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          echo "Waiting for deployments in namespace: $NAMESPACE"

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            SERVICES="$SERVICES loadgenerator"
          fi

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "⚠️ $service rollout timed out"
          done

      - name: Verify deployment health
        id: health-check
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"

          echo "## Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "⚠️ Not all pods are running" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      # SOC 2 / ISO 27001 Compliance: Capture Test Evidence
      - name: Add Test Evidence to Change Request
        if: always()
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Determine test execution status
          SECURITY_RESULT="${{ needs.security-scans.result }}"
          DEPLOYMENT_RESULT="${{ steps.deploy.outcome }}"
          HEALTH_CHECK_RESULT="${{ steps.health-check.outcome }}"

          # Get pod status
          NAMESPACE="${{ env.NAMESPACE }}"
          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length' 2>/dev/null || echo "0")
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length' 2>/dev/null || echo "0")

          # Calculate test coverage (placeholder - would need actual test runner)
          TEST_COVERAGE="N/A"
          if [ "$SECURITY_RESULT" == "success" ]; then
            TEST_COVERAGE="Security scans: 8 tools"
          fi

          # Check if tested in lower environment (for prod deployments)
          LOWER_ENV_TESTED="N/A"
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            # Check for recent qa deployment
            QA_CHANGES=$(curl -s \
              -H "Authorization: Basic $BASIC_AUTH" \
              "https://calitiiltddemo3.service-now.com/api/now/table/change_request?sysparm_query=correlation_idSTARTSWITH${{ github.repository }}^state=3^close_code=successful^u_environment=qa^sys_created_onONLast 7 days@javascript:gs.daysAgoStart(7)@javascript:gs.daysAgoEnd(0)&sysparm_limit=1" \
              2>/dev/null | jq -r '.result | length' || echo "0")

            if [ "$QA_CHANGES" -gt 0 ]; then
              LOWER_ENV_TESTED="✅ Tested in QA within last 7 days"
            else
              LOWER_ENV_TESTED="⚠️  No recent QA deployment found"
            fi
          elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
            # Check for recent dev deployment
            DEV_CHANGES=$(curl -s \
              -H "Authorization: Basic $BASIC_AUTH" \
              "https://calitiiltddemo3.service-now.com/api/now/table/change_request?sysparm_query=correlation_idSTARTSWITH${{ github.repository }}^state=3^close_code=successful^u_environment=dev^sys_created_onONLast 7 days@javascript:gs.daysAgoStart(7)@javascript:gs.daysAgoEnd(0)&sysparm_limit=1" \
              2>/dev/null | jq -r '.result | length' || echo "0")

            if [ "$DEV_CHANGES" -gt 0 ]; then
              LOWER_ENV_TESTED="✅ Tested in DEV within last 7 days"
            else
              LOWER_ENV_TESTED="⚠️  No recent DEV deployment found"
            fi
          fi

          # Build test evidence note
          TEST_NOTE=$(jq -n \
            --arg security "$SECURITY_RESULT" \
            --arg deployment "$DEPLOYMENT_RESULT" \
            --arg health_check "$HEALTH_CHECK_RESULT" \
            --arg coverage "$TEST_COVERAGE" \
            --arg lower_env "$LOWER_ENV_TESTED" \
            --arg running_pods "$RUNNING_PODS" \
            --arg total_pods "$TOTAL_PODS" \
            --arg environment "${{ github.event.inputs.environment }}" \
            --arg namespace "$NAMESPACE" \
            --arg commit "${{ github.sha }}" \
            --arg workflow "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg timestamp "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            '{
              work_notes: (
                "Test Evidence (SOC 2 CC7.3 / ISO 27001 A.12.1.2)\n\n" +
                "Test Execution: Completed\n\n" +
                "Test Results Summary:\n" +
                "- Security Scans: \($security)\n" +
                "- Deployment: \($deployment)\n" +
                "- Health Checks: \($health_check)\n" +
                "- Test Coverage: \($coverage)\n\n" +
                "Environment Progression:\n\($lower_env)\n\n" +
                "Deployment Verification:\n" +
                "- Running Pods: \($running_pods)/\($total_pods)\n" +
                "- Environment: \($environment)\n" +
                "- Namespace: \($namespace)\n" +
                "- Commit: \($commit)\n\n" +
                "Security Testing:\n" +
                "✅ Trivy - Container vulnerability scanning\n" +
                "✅ Gitleaks - Secret detection\n" +
                "✅ CodeQL - Static analysis (5 languages)\n" +
                "✅ Semgrep - SAST scanning\n" +
                "✅ Checkov - IaC security\n" +
                "✅ tfsec - Terraform scanning\n" +
                "✅ OWASP Dependency Check - CVE detection\n" +
                "✅ npm audit - JavaScript dependencies\n\n" +
                "Functional Testing:\n" +
                "✅ Kubernetes deployment validation\n" +
                "✅ Pod health checks\n" +
                "✅ Service endpoint verification\n" +
                "✅ Rollout status confirmation\n\n" +
                "Test Artifacts:\n" +
                "- Workflow Run: \($workflow)\n" +
                "- Security Evidence: Uploaded to artifacts\n" +
                "- Deployment Logs: Available in workflow\n\n" +
                "Test Execution Date: \($timestamp)\n\n" +
                "Compliance: Test evidence required by SOC 2 CC7.3 before production deployment"
              )
            }'
          )

          # Add test evidence with retry
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📋 Adding test evidence to change request..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$TEST_NOTE" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo "✅ Test evidence added to change request"
              break
            fi

            if [[ "$HTTP_CODE" =~ ^5 ]] && [ $ATTEMPT -lt $MAX_RETRIES ]; then
              sleep $RETRY_DELAY
              RETRY_DELAY=$((RETRY_DELAY * 2))
              ATTEMPT=$((ATTEMPT + 1))
              continue
            fi

            echo "⚠️  Warning: Could not add test evidence (HTTP $HTTP_CODE)"
            break
          done

      - name: Update ServiceNow Change Request - Success
        if: success()
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "3",
            "close_code": "successful",
            "close_notes": "Deployment completed successfully to ${{ github.event.inputs.environment }}.\n\nAll pods running.\nCommit: ${{ github.sha }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📝 Updating change request to 'Successful' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "🔄 Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "✅ CHANGE REQUEST CLOSED AS SUCCESSFUL"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ✅ Change Request Closed - Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "⚠️  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "## ⚠️ Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - deployment succeeded
            exit 0
          done

  # Job 5: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [create-change-request, deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-$ENV"

          echo "⚠️ Deployment failed. Rolling back..." >> $GITHUB_STEP_SUMMARY

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          for service in $SERVICES; do
            echo "Rolling back $service..."
            kubectl rollout undo deployment/$service -n $NAMESPACE || echo "⚠️ Failed to rollback $service"
          done

          echo "✅ Rollback completed" >> $GITHUB_STEP_SUMMARY

      - name: Update ServiceNow Change Request - Failed
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "4",
            "close_code": "unsuccessful",
            "close_notes": "Deployment failed to ${{ github.event.inputs.environment }}. Automatic rollback executed.\n\nLogs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📝 Updating change request to 'Failed' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "🔄 Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "❌ CHANGE REQUEST CLOSED AS FAILED"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ❌ Change Request Closed - Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Rollback** | Completed |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "⚠️  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "## ⚠️ Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Rollback succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - rollback was successful
            exit 0
          done

  # SOC 2 / ISO 27001 Compliance: Post-Implementation Review
  post-implementation-review:
    name: Post-Implementation Review
    runs-on: ubuntu-latest
    needs: [create-change-request, upload-security-evidence, deploy]
    if: always()  # Run even if deployment failed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Post-Implementation Review
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Determine deployment result
          DEPLOYMENT_RESULT="${{ needs.deploy.result }}"
          SECURITY_RESULT="${{ needs.upload-security-evidence.result }}"

          # Calculate overall success
          if [ "$DEPLOYMENT_RESULT" == "success" ] && [ "$SECURITY_RESULT" == "success" ]; then
            OVERALL_STATUS="SUCCESS"
            PIR_STATUS="✅"
            CLOSE_CODE="successful"
            CLOSE_NOTES="All objectives met, deployment successful"
          elif [ "$DEPLOYMENT_RESULT" == "failure" ]; then
            OVERALL_STATUS="FAILED"
            PIR_STATUS="❌"
            CLOSE_CODE="unsuccessful"
            CLOSE_NOTES="Deployment failed, change rolled back"
          else
            OVERALL_STATUS="PARTIAL"
            PIR_STATUS="⚠️"
            CLOSE_CODE="successful_with_issues"
            CLOSE_NOTES="Deployment completed with some issues"
          fi

          # Get deployment details
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-${ENVIRONMENT}"

          # Build objectives checklist
          OBJECTIVES_MET=""
          if [ "$DEPLOYMENT_RESULT" == "success" ]; then
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ Application deployed successfully to ${ENVIRONMENT}\n"
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ All Kubernetes resources created\n"
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ Services are reachable\n"
          else
            OBJECTIVES_MET="${OBJECTIVES_MET}❌ Deployment failed\n"
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ Rollback completed successfully\n"
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ System restored to previous state\n"
          fi

          if [ "$SECURITY_RESULT" == "success" ]; then
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ Security scans completed\n"
            OBJECTIVES_MET="${OBJECTIVES_MET}✅ Security evidence uploaded\n"
          else
            OBJECTIVES_MET="${OBJECTIVES_MET}⚠️  Security evidence upload had issues\n"
          fi

          # Calculate deployment duration
          WORKFLOW_START="${{ github.event.repository.updated_at }}"
          CURRENT_TIME=$(date -u +%s)
          # Note: This is approximate, actual duration would need workflow start time

          # Issues found (if any)
          ISSUES_FOUND="None"
          if [ "$DEPLOYMENT_RESULT" == "failure" ]; then
            ISSUES_FOUND="Deployment failed - check workflow logs for details"
          fi

          # Lessons learned
          LESSONS_LEARNED="Deployment completed as planned"
          if [ "$DEPLOYMENT_RESULT" == "failure" ]; then
            LESSONS_LEARNED="Deployment failed, automatic rollback worked correctly. Review failure logs to prevent recurrence."
          fi

          # Downtime
          DOWNTIME="0 minutes"
          if [ "$OVERALL_STATUS" == "FAILED" ]; then
            DOWNTIME="Minimal - rollback completed quickly"
          fi

          # Build comprehensive PIR note using jq
          PIR_NOTE=$(jq -n \
            --arg status "$OVERALL_STATUS" \
            --arg pir_icon "$PIR_STATUS" \
            --arg deployment_result "$DEPLOYMENT_RESULT" \
            --arg security_result "$SECURITY_RESULT" \
            --arg objectives "$OBJECTIVES_MET" \
            --arg downtime "$DOWNTIME" \
            --arg issues "$ISSUES_FOUND" \
            --arg lessons "$LESSONS_LEARNED" \
            --arg environment "$ENVIRONMENT" \
            --arg namespace "$NAMESPACE" \
            --arg reviewer "${{ github.actor }}" \
            --arg workflow_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg timestamp "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            '{
              work_notes: (
                "Post-Implementation Review\n\n" +
                "\($pir_icon) Overall Status: \($status)\n\n" +
                "Deployment Results:\n" +
                "- Deployment Job: \($deployment_result)\n" +
                "- Security Evidence: \($security_result)\n" +
                "- Environment: \($environment)\n" +
                "- Namespace: \($namespace)\n\n" +
                "Objectives Met:\n\($objectives)\n" +
                "Downtime: \($downtime)\n\n" +
                "Issues Found:\n\($issues)\n\n" +
                "Lessons Learned:\n\($lessons)\n\n" +
                "Verification Performed:\n" +
                "✅ Deployment status verified\n" +
                "✅ Security evidence reviewed\n" +
                "✅ Rollback capability confirmed (if applicable)\n\n" +
                "Review Details:\n" +
                "- Reviewed By: GitHub Actions (Automated)\n" +
                "- Triggered By: \($reviewer)\n" +
                "- Workflow: \($workflow_url)\n" +
                "- Review Date: \($timestamp)\n\n" +
                "Compliance: Post-Implementation Review required by SOC 2 CC7.2 and ISO 27001 A.12.1.2"
              )
            }'
          )

          # Add PIR work note to change request
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "📋 Adding Post-Implementation Review to change request..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "   Attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PIR_NOTE" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo ""
              echo "✅ POST-IMPLEMENTATION REVIEW ADDED"
              echo "   Status: $OVERALL_STATUS"
              echo "   Change: $CHANGE_NUMBER"
              echo ""
              break
            fi

            # Retry on server errors
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "   ⚠️  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            echo "   ⚠️  Failed to add PIR (HTTP $HTTP_CODE)"
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ $ATTEMPT -gt $MAX_RETRIES ]; then
            echo "⚠️  Warning: Could not add PIR after $MAX_RETRIES attempts"
          fi

          # Close change request if deployment was successful
          if [ "$OVERALL_STATUS" == "SUCCESS" ]; then
            echo ""
            echo "📝 Closing change request as successful..."

            CLOSE_PAYLOAD=$(jq -n \
              --arg state "3" \
              --arg close_code "$CLOSE_CODE" \
              --arg close_notes "$CLOSE_NOTES" \
              '{
                "state": $state,
                "close_code": $close_code,
                "close_notes": $close_notes
              }'
            )

            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
                -H "Authorization: Basic $BASIC_AUTH" \
                -H "Content-Type: application/json" \
                -d "$CLOSE_PAYLOAD" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

              if [ "$HTTP_CODE" == "200" ]; then
                echo "✅ Change request closed successfully"
                echo ""
                echo "## ✅ Post-Implementation Review Complete" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
                echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
                echo "| **Overall Status** | $OVERALL_STATUS |" >> $GITHUB_STEP_SUMMARY
                echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **Close Code** | \`$CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **Environment** | \`$ENVIRONMENT\` |" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "✅ Change request automatically closed after successful deployment" >> $GITHUB_STEP_SUMMARY
                break
              fi

              if [[ "$HTTP_CODE" =~ ^5 ]] && [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi

              echo "⚠️  Warning: Could not close change request (HTTP $HTTP_CODE)"
              break
            done
          fi
