name: Deploy with ServiceNow (Hybrid - REST API + Correlation)

# üìñ WORKFLOW DESCRIPTION
# This workflow demonstrates best practices for GitHub + ServiceNow integration:
# ‚úÖ REST API (works without IntegrationHub plugins)
# ‚úÖ Correlation IDs for DevOps workspace tracking
# ‚úÖ Environment-specific risk assessment (dev/qa/prod)
# ‚úÖ Multi-level approval workflow with smart polling
# ‚úÖ Automated rollback on failure
# ‚úÖ Comprehensive error handling with retry logic
# ‚úÖ Rich observability and metrics
#
# üéØ Use this workflow when:
# - IntegrationHub plugins are not available
# - You need reliable, well-tested integration
# - You want full control over the integration
#
# üìö For more information, see:
# - docs/GITHUB-SERVICENOW-INTEGRATION-GUIDE.md
# - docs/GITHUB-SERVICENOW-BEST-PRACTICES.md
# - docs/GITHUB-SERVICENOW-DEVELOPER-ONBOARDING.md

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}

jobs:
  # Job 1: Create ServiceNow Change Request via REST API with DevOps correlation fields
  create-change-request:
    name: Create Change Request
    runs-on: ubuntu-latest
    outputs:
      change_request_number: ${{ steps.create-cr.outputs.change_number }}
      change_request_sys_id: ${{ steps.create-cr.outputs.change_sys_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine change settings
        id: settings
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ "$ENV" == "dev" ]; then
            echo "state=3" >> $GITHUB_OUTPUT  # Closed/Complete
            echo "risk=3" >> $GITHUB_OUTPUT   # Low
            echo "priority=3" >> $GITHUB_OUTPUT
            echo "assignment_group=DevOps Team" >> $GITHUB_OUTPUT
            echo "auto_close=true" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "qa" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=2" >> $GITHUB_OUTPUT    # Medium
            echo "priority=2" >> $GITHUB_OUTPUT
            echo "assignment_group=QA Team" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "prod" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=1" >> $GITHUB_OUTPUT    # High
            echo "priority=1" >> $GITHUB_OUTPUT
            echo "assignment_group=Change Advisory Board" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Change Request via REST API with Retry
        id: create-cr
        run: |
          ENV="${{ github.event.inputs.environment }}"
          APP_SYS_ID="${{ secrets.SERVICENOW_APP_SYS_ID }}"
          TOOL_ID="${{ secrets.SERVICENOW_TOOL_ID }}"

          # Create correlation_id for DevOps tracking
          CORRELATION_ID="github-${{ github.repository }}-${{ github.run_id }}-${{ github.run_number }}"

          # Create change request payload with DevOps correlation fields
          PAYLOAD=$(cat <<'EOF'
          {
            "short_description": "Deploy Online Boutique to ENV_PLACEHOLDER",
            "description": "Automated deployment via GitHub Actions.\n\nApplication: Online Boutique\nEnvironment: ENV_PLACEHOLDER\nCommit: COMMIT_PLACEHOLDER\nRepository: REPO_PLACEHOLDER\nTriggered by: ACTOR_PLACEHOLDER\nRun: RUN_URL_PLACEHOLDER",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-ENV_PLACEHOLDER\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "kubectl rollout undo deployment -n microservices-ENV_PLACEHOLDER\nOR\nkubectl delete -k kustomize/overlays/ENV_PLACEHOLDER",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-ENV_PLACEHOLDER\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "RISK_PLACEHOLDER",
            "priority": "PRIORITY_PLACEHOLDER",
            "assignment_group": "GROUP_PLACEHOLDER",
            "state": "STATE_PLACEHOLDER",
            "type": "standard",
            "requested_by": "USER_PLACEHOLDER",
            "business_service": "APP_SYS_ID_PLACEHOLDER",
            "cmdb_ci": "APP_SYS_ID_PLACEHOLDER",
            "u_application": "Online Boutique",
            "u_environment": "ENV_PLACEHOLDER",
            "correlation_id": "CORRELATION_ID_PLACEHOLDER",
            "correlation_display": "GitHub Actions Run #RUN_NUM_PLACEHOLDER",
            "u_source": "GitHub Actions",
            "work_notes": "Created by GitHub Actions workflow: WORKFLOW_PLACEHOLDER\nRun ID: RUN_ID_PLACEHOLDER\nCommit: COMMIT_PLACEHOLDER\nActor: ACTOR_PLACEHOLDER"
          }
          EOF
          )

          # Replace placeholders
          PAYLOAD=$(echo "$PAYLOAD" | sed "s/ENV_PLACEHOLDER/$ENV/g" | \
            sed "s|COMMIT_PLACEHOLDER|${{ github.sha }}|g" | \
            sed "s|REPO_PLACEHOLDER|${{ github.repository }}|g" | \
            sed "s|ACTOR_PLACEHOLDER|${{ github.actor }}|g" | \
            sed "s|RUN_URL_PLACEHOLDER|${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|g" | \
            sed "s/RISK_PLACEHOLDER/${{ steps.settings.outputs.risk }}/g" | \
            sed "s/PRIORITY_PLACEHOLDER/${{ steps.settings.outputs.priority }}/g" | \
            sed "s/GROUP_PLACEHOLDER/${{ steps.settings.outputs.assignment_group }}/g" | \
            sed "s/STATE_PLACEHOLDER/${{ steps.settings.outputs.state }}/g" | \
            sed "s/USER_PLACEHOLDER/${{ secrets.SERVICENOW_USERNAME }}/g" | \
            sed "s/APP_SYS_ID_PLACEHOLDER/$APP_SYS_ID/g" | \
            sed "s/CORRELATION_ID_PLACEHOLDER/$CORRELATION_ID/g" | \
            sed "s/RUN_NUM_PLACEHOLDER/${{ github.run_number }}/g" | \
            sed "s|WORKFLOW_PLACEHOLDER|${{ github.workflow }}|g" | \
            sed "s|RUN_ID_PLACEHOLDER|${{ github.run_id }}|g")

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Retry logic with exponential backoff
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üîÑ Creating change request with retry logic..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Attempt $ATTEMPT of $MAX_RETRIES..."

            # Make API call and capture HTTP code
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request")

            # Split response and HTTP code
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (201 Created)
            if [ "$HTTP_CODE" == "201" ]; then
              CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number')
              CHANGE_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id')

              if [ "$CHANGE_NUMBER" != "null" ] && [ -n "$CHANGE_NUMBER" ]; then
                echo "‚úÖ Success on attempt $ATTEMPT: $CHANGE_NUMBER"

                # Set outputs
                echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
                echo "change_sys_id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

                # Create enhanced summary
                echo "## ‚úÖ Change Request Created Successfully" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
                echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
                echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **System ID** | \`$CHANGE_SYS_ID\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **Correlation ID** | \`$CORRELATION_ID\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
                echo "| **Risk Level** | $([ \"$ENV\" == \"dev\" ] && echo \"üü¢ Low (3)\" || [ \"$ENV\" == \"qa\" ] && echo \"üü° Medium (2)\" || echo \"üî¥ High (1)\") |" >> $GITHUB_STEP_SUMMARY
                echo "| **Attempts** | $ATTEMPT / $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "üîó **Quick Links**:" >> $GITHUB_STEP_SUMMARY
                echo "- [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
                echo "- [DevOps Workspace](${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/home)" >> $GITHUB_STEP_SUMMARY

                exit 0
              fi
            fi

            # Retryable errors (5xx server errors)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è Server error (HTTP $HTTP_CODE) on attempt $ATTEMPT"
              echo "Response: $BODY" | jq . || echo "$BODY"

              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "‚è≥ Retrying in ${RETRY_DELAY} seconds..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))  # Exponential backoff: 5s, 10s, 20s
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx client errors)
            if [[ "$HTTP_CODE" =~ ^4 ]]; then
              echo "‚ùå Client error (HTTP $HTTP_CODE) - not retrying"
              echo "Response: $BODY" | jq . || echo "$BODY"

              echo "## ‚ùå Failed to Create Change Request" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Error**: HTTP $HTTP_CODE (Client Error)" >> $GITHUB_STEP_SUMMARY
              echo "**Attempts**: $ATTEMPT / $MAX_RETRIES" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Response**:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              echo "$BODY" | jq . || echo "$BODY" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Unexpected response
            echo "‚ùå Unexpected response (HTTP $HTTP_CODE)"
            echo "Response: $BODY"
            ATTEMPT=$((ATTEMPT + 1))
          done

          # All retries exhausted
          echo "## ‚ùå Failed After $MAX_RETRIES Attempts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Last HTTP Code**: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
          echo "**Total Attempts**: $MAX_RETRIES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è ServiceNow API did not respond successfully after $MAX_RETRIES attempts with exponential backoff" >> $GITHUB_STEP_SUMMARY

          exit 1

  # Job 2: Wait for Approval (QA and Prod only)
  wait-for-approval:
    name: Wait for Change Approval
    runs-on: ubuntu-latest
    needs: create-change-request
    if: github.event.inputs.environment != 'dev'

    steps:
      - name: Wait for ServiceNow approval with Smart Polling
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          ENV="${{ github.event.inputs.environment }}"

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Timeout settings
          if [ "$ENV" == "qa" ]; then
            TIMEOUT=7200  # 2 hours
          else
            TIMEOUT=86400  # 24 hours
          fi

          POLL_INTERVAL=30  # 30 seconds
          ELAPSED=0
          WARNING_THRESHOLD=$((TIMEOUT * 80 / 100))  # 80% of timeout
          WARNING_SHOWN=false

          # Initial summary
          echo "## ‚è∏Ô∏è  Waiting for ServiceNow Approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Poll Interval** | ${POLL_INTERVAL}s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Approve in ServiceNow**: [$CHANGE_NUMBER](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Helper function: Format seconds to HH:MM:SS
          format_time() {
            local seconds=$1
            printf "%02d:%02d:%02d" $((seconds / 3600)) $(((seconds % 3600) / 60)) $((seconds % 60))
          }

          # Helper function: Generate progress bar
          generate_progress_bar() {
            local current=$1
            local total=$2
            local width=40
            local percentage=$((current * 100 / total))
            local filled=$((width * current / total))
            local empty=$((width - filled))

            printf "["
            printf "%${filled}s" | tr ' ' '‚ñà'
            printf "%${empty}s" | tr ' ' '‚ñë'
            printf "] %3d%%" "$percentage"
          }

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üïê Polling for approval... (Press Ctrl+C to cancel)"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get change request state with retry
            MAX_RETRIES=3
            RETRY_COUNT=0
            POLL_SUCCESS=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Basic $BASIC_AUTH" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID?sysparm_fields=state,approval,approval_set" 2>/dev/null)

              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | sed '$d')

              if [ "$HTTP_CODE" == "200" ]; then
                STATE=$(echo "$BODY" | jq -r '.result.state')
                APPROVAL=$(echo "$BODY" | jq -r '.result.approval')
                POLL_SUCCESS=true
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è  Poll failed (HTTP $HTTP_CODE), retry $RETRY_COUNT of $MAX_RETRIES..."
                sleep 5
              fi
            done

            if [ "$POLL_SUCCESS" = false ]; then
              echo "‚ùå Failed to poll ServiceNow after $MAX_RETRIES attempts"
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **Polling failed** - Could not reach ServiceNow API" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Calculate progress
            PERCENTAGE=$((ELAPSED * 100 / TIMEOUT))
            PROGRESS_BAR=$(generate_progress_bar $ELAPSED $TIMEOUT)
            TIME_ELAPSED=$(format_time $ELAPSED)
            TIME_REMAINING=$(format_time $((TIMEOUT - ELAPSED)))

            # Display progress
            echo "‚è±Ô∏è  $TIME_ELAPSED elapsed | $TIME_REMAINING remaining | State: $STATE | Approval: $APPROVAL"
            echo "   $PROGRESS_BAR"

            # Check if approved
            if [ "$APPROVAL" == "approved" ]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ CHANGE REQUEST APPROVED!"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Change Request Approved" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Approved At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üöÄ **Ready to deploy** to \`$ENV\` environment" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Check if rejected
            if [ "$APPROVAL" == "rejected" ]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚ùå CHANGE REQUEST REJECTED!"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚ùå Change Request Rejected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Rejected At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ö†Ô∏è **Deployment blocked** - Change request rejected in ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Warning at 80% timeout
            if [ $ELAPSED -ge $WARNING_THRESHOLD ] && [ "$WARNING_SHOWN" = false ]; then
              echo ""
              echo "‚ö†Ô∏è  WARNING: 80% of approval timeout reached!"
              echo ""
              echo "‚ö†Ô∏è **Warning**: 80% of timeout reached" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              WARNING_SHOWN=true
            fi

            # Wait before next poll
            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
          done

          # Timeout reached
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå APPROVAL TIMEOUT REACHED"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "## ‚ùå Approval Timeout" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final Approval** | \`$APPROVAL\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Deployment blocked** - Approval timeout reached without approval or rejection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Pre-Deployment Checks
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval]
    if: always() && needs.create-change-request.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
          kubectl get nodes

      - name: Check namespace exists
        run: |
          NAMESPACE="microservices-${{ github.event.inputs.environment }}"
          if ! kubectl get namespace $NAMESPACE 2>/dev/null; then
            echo "‚ö†Ô∏è Namespace $NAMESPACE does not exist, creating..."
            kubectl create namespace $NAMESPACE
            kubectl label namespace $NAMESPACE istio-injection=enabled
            echo "‚úÖ Namespace created and labeled for Istio injection"
          else
            echo "‚úÖ Namespace $NAMESPACE exists"
          fi

      - name: Pre-deployment validation complete
        run: |
          echo "‚úÖ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "Ready to deploy to **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Application
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval, pre-deployment-checks]
    if: always() && needs.pre-deployment-checks.result == 'success'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy using Kustomize
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"

          kubectl apply -k kustomize/overlays/$ENV

          echo "NAMESPACE=microservices-$ENV" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          echo "Waiting for deployments in namespace: $NAMESPACE"

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            SERVICES="$SERVICES loadgenerator"
          fi

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "‚ö†Ô∏è $service rollout timed out"
          done

      - name: Verify deployment health
        id: health-check
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"

          echo "## Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "‚ö†Ô∏è Not all pods are running" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update ServiceNow Change Request - Success
        if: success()
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "3",
            "close_code": "successful",
            "close_notes": "Deployment completed successfully to ${{ github.event.inputs.environment }}.\n\nAll pods running.\nCommit: ${{ github.sha }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "work_notes": "Deployment successful at $(date)\nNamespace: microservices-${{ github.event.inputs.environment }}\nAll pods verified running"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Updating change request to 'Successful' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ CHANGE REQUEST CLOSED AS SUCCESSFUL"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Change Request Closed - Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚ö†Ô∏è  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo ""
            echo "## ‚ö†Ô∏è Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - deployment succeeded
            exit 0
          done

  # Job 5: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [create-change-request, deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-$ENV"

          echo "‚ö†Ô∏è Deployment failed. Rolling back..." >> $GITHUB_STEP_SUMMARY

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          for service in $SERVICES; do
            echo "Rolling back $service..."
            kubectl rollout undo deployment/$service -n $NAMESPACE || echo "‚ö†Ô∏è Failed to rollback $service"
          done

          echo "‚úÖ Rollback completed" >> $GITHUB_STEP_SUMMARY

      - name: Update ServiceNow Change Request - Failed
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "4",
            "close_code": "unsuccessful",
            "close_notes": "Deployment failed to ${{ github.event.inputs.environment }}. Automatic rollback executed.\n\nLogs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "work_notes": "Deployment failed at $(date)\nAutomatic rollback completed\nCheck run logs for details"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Updating change request to 'Failed' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚ùå CHANGE REQUEST CLOSED AS FAILED"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚ùå Change Request Closed - Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Rollback** | Completed |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚ö†Ô∏è  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo ""
            echo "## ‚ö†Ô∏è Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Rollback succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - rollback was successful
            exit 0
          done
