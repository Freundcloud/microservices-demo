# yamllint disable
# yamllint disable rule:line-length
name: "Security Scanning with ServiceNow Integration"

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
  SERVICENOW_ORCHESTRATION_TOOL_ID: ${{ secrets.SERVICENOW_ORCHESTRATION_TOOL_ID }}

jobs:
  # CodeQL Analysis for multiple languages
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript', 'go', 'java', 'csharp']

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        if: matrix.language != 'java'

      - name: Setup Java 21
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Java services
        if: matrix.language == 'java'
        run: |
          # Build adservice (Java with Gradle)
          cd src/adservice
          ./gradlew build -x test
        continue-on-error: true

      - name: Perform CodeQL Analysis
        id: codeql
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: codeql-results-${{ matrix.language }}.sarif

      # NOTE: ServiceNow security result upload disabled
      # ServiceNow Zurich v6.1.0 does not have sn_devops_security_result table
      # Your instance uses Vulnerability Response tables instead
      # See: docs/SERVICENOW-SECURITY-INTEGRATION-FIX.md
      # Results are still uploaded to GitHub Security tab via CodeQL action above

  # Dependency scanning with Dependabot
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-2.0, GPL-3.0

  # SAST with Semgrep
  semgrep-scan:
    name: Semgrep SAST
    runs-on: ubuntu-latest

    container:
      image: returntocorp/semgrep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep scan --config=auto --sarif --output=semgrep-results.sarif

      - name: Upload Semgrep Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      # NOTE: ServiceNow security result upload disabled (Zurich v6.1.0 incompatibility)
      # Results still available in GitHub Security tab

  # Container scanning with Trivy
  trivy-fs-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: trivy-filesystem

      # NOTE: ServiceNow security result upload disabled (Zurich v6.1.0 incompatibility)
      # Results still available in GitHub Security tab

  # Infrastructure as Code scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform-aws/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov-terraform

      # NOTE: ServiceNow security result upload disabled (Zurich v6.1.0 incompatibility)
      # Results still available in GitHub Security tab

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform-aws/
          format: sarif
          soft_fail: true
        continue-on-error: true

      - name: Save tfsec Results
        run: |
          if [ -f terraform-aws/results.sarif ]; then
            mv terraform-aws/results.sarif tfsec-results.sarif
          else
            echo "No tfsec results file found, creating empty SARIF"
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[]}' > tfsec-results.sarif
          fi
        continue-on-error: true

      - name: Upload tfsec Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('tfsec-results.sarif') != ''
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec-terraform
        continue-on-error: true

  # Kubernetes manifest scanning
  k8s-manifest-scan:
    name: Kubernetes Manifest Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Kubesec
        run: |
          docker run --rm -v $(pwd):/project kubesec/kubesec:v2 scan /project/kubernetes-manifests/*.yaml > kubesec-results.json
        continue-on-error: true

      - name: Install Polaris CLI
        run: |
          wget -O polaris https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64
          chmod +x polaris
          sudo mv polaris /usr/local/bin/
        continue-on-error: true

      - name: Run Polaris Audit
        run: |
          polaris audit --audit-path kubernetes-manifests/ --format json > polaris-results.json || true
        continue-on-error: true

      - name: Upload Polaris Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: polaris-results
          path: polaris-results.json

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'online-boutique'
          path: 'src/'
          format: 'SARIF'
          out: 'dependency-check-report'

      - name: Upload Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: dependency-check-report/dependency-check-report.sarif
          category: owasp-dependency-check

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Licenses (Python)
        run: |
          find src -name "requirements.txt" -exec pip-licenses --from={} \;
        continue-on-error: true

      - name: Check Licenses (Node.js)
        run: |
          for dir in src/*/; do
            if [ -f "$dir/package.json" ]; then
              cd "$dir"
              npx license-checker --summary
              cd -
            fi
          done
        continue-on-error: true

  # Security summary and ServiceNow aggregation
  security-summary:
    name: Security Summary
    needs: [codeql-analysis, semgrep-scan, trivy-fs-scan, iac-scan, k8s-manifest-scan]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Create Security Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep SAST | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy Filesystem | ${{ needs.trivy-fs-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Scanning | ${{ needs.iac-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| K8s Manifest Scan | ${{ needs.k8s-manifest-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **CodeQL**: Multi-language semantic code analysis" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ **Semgrep**: Static application security testing" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Trivy**: Vulnerability and misconfig scanner" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **Checkov & tfsec**: Infrastructure as Code scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ☸️ **Kubesec & Polaris**: Kubernetes security analysis" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **OWASP Dependency Check**: Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### View Results" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Security Tab**: ${{ github.server_url }}/${{ github.repository }}/security/code-scanning" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ServiceNow Integration Status" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Security result uploads disabled** (ServiceNow Zurich v6.1.0 compatibility)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your ServiceNow instance uses **Vulnerability Response** tables, not \`sn_devops_security_result\`." >> $GITHUB_STEP_SUMMARY
          echo "- **Change Management**: ✅ Working (uses \`change_request\` table)" >> $GITHUB_STEP_SUMMARY
          echo "- **CMDB Updates**: ✅ Working (uses \`u_eks_cluster\`, \`u_microservice\` tables)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Results**: ⏸️ GitHub Security tab only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 **See**: [docs/SERVICENOW-SECURITY-INTEGRATION-FIX.md](../docs/SERVICENOW-SECURITY-INTEGRATION-FIX.md)" >> $GITHUB_STEP_SUMMARY

      - name: Check for critical vulnerabilities
        run: |
          echo "✅ Security scans completed"
          echo "Review results in GitHub Security tab before deploying"
          echo ""
          echo "All security findings are available at:"
          echo "${{ github.server_url }}/${{ github.repository }}/security/code-scanning"

  # Upload security results to ServiceNow CMDB
  upload-to-servicenow:
    name: Upload to ServiceNow
    needs: [codeql-analysis, semgrep-scan, trivy-fs-scan, iac-scan, k8s-manifest-scan, owasp-dependency-check]
    if: always()
    runs-on: ubuntu-latest
    # Job will skip upload step if SERVICENOW_PASSWORD is not set

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Download CodeQL SARIF files
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: codeql-results-*
          path: sarif-results/codeql

      - name: Download Semgrep SARIF
        continue-on-error: true
        run: |
          # Semgrep results are uploaded to GitHub, download if available
          echo "Semgrep results in GitHub Security tab"

      - name: Download Trivy SARIF
        continue-on-error: true
        run: |
          # Trivy results are uploaded to GitHub, download if available
          echo "Trivy results in GitHub Security tab"

      - name: Download Checkov SARIF
        continue-on-error: true
        run: |
          # Checkov results are uploaded to GitHub, download if available
          echo "Checkov results in GitHub Security tab"

      - name: Note about SARIF file locations
        run: |
          echo "## SARIF File Discovery" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan tools upload SARIF files to different locations:" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL: Embedded in workflow steps (requires API extraction)" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep: Uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy: Uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Checkov: Uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This job will aggregate findings from GitHub Security API." >> $GITHUB_STEP_SUMMARY

      - name: Fetch security findings from GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Fetching security findings from GitHub Security API..."

          # Use GitHub API to get code scanning alerts
          gh api repos/$GITHUB_REPOSITORY/code-scanning/alerts \
            --paginate \
            --jq '.[] | {tool: .tool.name, rule_id: .rule.id, severity: .rule.security_severity_level, state: .state, created_at, dismissed_at, url, location: .most_recent_instance.location}' \
            > github-security-findings.json || echo '[]' > github-security-findings.json

          echo "Fetched $(jq '. | length' github-security-findings.json) findings from GitHub Security"

      - name: Aggregate Security Results
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          bash scripts/aggregate-security-results.sh

      - name: Upload to ServiceNow
        env:
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          RESULTS_FILE: aggregated-security-results.json
          SUMMARY_FILE: security-scan-summary.json
        run: |
          if [ -z "${SERVICENOW_PASSWORD}" ]; then
            echo "⚠️  ServiceNow credentials not configured - skipping upload"
            echo ""
            echo "To enable ServiceNow integration, configure these GitHub secrets:"
            echo "  - SERVICENOW_INSTANCE_URL"
            echo "  - SERVICENOW_USERNAME"
            echo "  - SERVICENOW_PASSWORD"
            echo ""
            echo "See docs/SERVICENOW-SECURITY-VERIFICATION.md for setup instructions"
            exit 0
          fi

          echo "📤 Uploading security results to ServiceNow..."
          bash scripts/upload-security-to-servicenow.sh

      - name: Create ServiceNow Summary
        env:
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
        run: |
          echo "## ServiceNow Security Upload" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -z "${SERVICENOW_PASSWORD}" ]; then
            echo "⚠️  **ServiceNow integration not configured**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Security scan results were not uploaded to ServiceNow." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To enable ServiceNow integration:" >> $GITHUB_STEP_SUMMARY
            echo "1. Configure GitHub secrets (SERVICENOW_INSTANCE_URL, SERVICENOW_USERNAME, SERVICENOW_PASSWORD)" >> $GITHUB_STEP_SUMMARY
            echo "2. Create ServiceNow tables (see [docs/SERVICENOW-SECURITY-VERIFICATION.md](docs/SERVICENOW-SECURITY-VERIFICATION.md))" >> $GITHUB_STEP_SUMMARY
            echo "3. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
          elif [ -f "security-scan-summary.json" ]; then
            TOTAL=$(jq '.total_findings' security-scan-summary.json)
            CRITICAL=$(jq '.critical_count' security-scan-summary.json)
            HIGH=$(jq '.high_count' security-scan-summary.json)
            MEDIUM=$(jq '.medium_count' security-scan-summary.json)
            LOW=$(jq '.low_count' security-scan-summary.json)

            echo "✅ Security findings uploaded to ServiceNow CMDB" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Findings Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### View in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "- [Security Scan Results](${SERVICENOW_INSTANCE_URL}/nav_to.do?uri=u_security_scan_result_list.do?sysparm_query=u_scan_id=${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
            echo "- [All Security Findings](${SERVICENOW_INSTANCE_URL}/nav_to.do?uri=u_security_scan_result_list.do)" >> $GITHUB_STEP_SUMMARY
            echo "- [Scan Summaries](${SERVICENOW_INSTANCE_URL}/nav_to.do?uri=u_security_scan_summary_list.do)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload aggregated results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results-servicenow
          path: |
            aggregated-security-results.json
            security-scan-summary.json
            github-security-findings.json
          retention-days: 90
