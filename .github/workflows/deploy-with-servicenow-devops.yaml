name: Deploy with ServiceNow DevOps Change

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}

jobs:
  # Job 1: Run Security Scans
  security-scans:
    name: Security Scans
    uses: ./.github/workflows/security-scan.yaml
    secrets: inherit

  # Job 2: Register Build Artifacts in ServiceNow DevOps
  register-artifacts:
    name: Register Artifacts
    runs-on: ubuntu-latest
    needs: security-scans
    if: always()  # Run even if security scans have warnings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Register Docker Images as Artifacts
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          # Authentication (token-based)
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}

          # GitHub context (required for pipeline tracking)
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Artifacts'

          # Artifacts to register (all 12 microservices)
          # Format: [{"name":"service-name","version":"build-number","semanticVersion":"major.minor.patch","repositoryName":"owner/repo"}]
          artifacts: |
            [
              {
                "name": "online-boutique-frontend",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-cartservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-productcatalogservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-currencyservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-paymentservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-shippingservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-emailservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-checkoutservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-recommendationservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-adservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-loadgenerator",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              },
              {
                "name": "online-boutique-shoppingassistantservice",
                "version": "1.0.${{ github.run_number }}",
                "semanticVersion": "1.0.${{ github.run_number }}",
                "repositoryName": "${{ github.repository }}"
              }
            ]

      - name: Artifact Registration Summary
        if: always()
        run: |
          echo "## 📦 Artifacts Registered in ServiceNow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| online-boutique (all services) | 1.0.${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services Registered**: 12 microservices" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow DevOps Insights](${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/insights-home)" >> $GITHUB_STEP_SUMMARY

  # Job 3: Create ServiceNow Change Request using DevOps Change Action
  create-change-request:
    name: Create Change Request
    runs-on: ubuntu-latest
    needs: [security-scans, register-artifacts]
    outputs:
      change_request_number: ${{ steps.create-change.outputs.change-request-number }}
      change_request_sys_id: ${{ steps.create-change.outputs.change-request-sys-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Change Request via ServiceNow DevOps Action
        id: create-change
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          # Authentication (token-based - recommended)
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}  # GitHub Demo tool sys_id: 2fe9c38bc36c72d0e1bbf0cb050131cc

          # GitHub context (required for pipeline tracking)
          context-github: ${{ toJSON(github) }}
          job-name: 'Create Change Request'

          # Change request details (JSON format) - based on ServiceNow official examples
          # CRITICAL: Using "Standard" changeModel inside JSON to bypass type_compatibility property requirement
          change-request: '{"changeModel":"Standard","setCloseCode":"true","autoCloseChange":true,"attributes":{"short_description":"Deploy Online Boutique microservices to ${{ github.event.inputs.environment }}","description":"Automated deployment via GitHub Actions. Repository: ${{ github.repository }}, Commit: ${{ github.sha }}, Triggered by: ${{ github.actor }}","implementation_plan":"1. Deploy using Kustomize overlay for ${{ github.event.inputs.environment }}\n2. Apply to namespace: microservices-${{ github.event.inputs.environment }}\n3. Wait for all deployments to become ready\n4. Verify pod health checks","backout_plan":"When deployment fails, rollback using: kubectl rollout undo deployment -n microservices-${{ github.event.inputs.environment }} OR kubectl delete -k kustomize/overlays/${{ github.event.inputs.environment }}","test_plan":"Testing if microservices were successfully deployed: kubectl get pods -n microservices-${{ github.event.inputs.environment }}, verify all pods Running, check health endpoints"}}'

          # Polling settings (check approval status)
          interval: '30'      # Check every 30 seconds
          timeout: '3600'     # 1 hour timeout (can increase for prod)

      - name: Change Request Created
        run: |
          CHANGE_NUMBER="${{ steps.create-change.outputs.change-request-number }}"
          CHANGE_SYS_ID="${{ steps.create-change.outputs.change-request-sys-id }}"

          if [ -z "$CHANGE_NUMBER" ] || [ "$CHANGE_NUMBER" == "" ]; then
            echo "❌ ERROR: Change request number not returned from create-change action" >> $GITHUB_STEP_SUMMARY
            echo "This means the ServiceNow DevOps Change API call failed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Possible causes**:" >> $GITHUB_STEP_SUMMARY
            echo "1. Token authentication failed" >> $GITHUB_STEP_SUMMARY
            echo "2. Tool ID incorrect" >> $GITHUB_STEP_SUMMARY
            echo "3. ServiceNow API error" >> $GITHUB_STEP_SUMMARY
            echo "4. Change Control API not configured" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "✅ Change Request Created via DevOps Change API" >> $GITHUB_STEP_SUMMARY
          echo "**Number**: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Sys ID**: $CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
          echo "**View in ServiceNow**: ${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DevOps Workspace**: ${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/home" >> $GITHUB_STEP_SUMMARY

  # Job 4: Upload Security Evidence to ServiceNow
  upload-security-evidence:
    name: Upload Security Evidence
    runs-on: ubuntu-latest
    needs: [security-scans, create-change-request]
    if: always() && needs.create-change-request.outputs.change_request_sys_id != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security scan artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload evidence files to ServiceNow Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          echo "📤 Uploading security scan evidence to ServiceNow Change Request $CHANGE_NUMBER..."
          echo ""

          # Upload evidence report (Markdown summary)
          UPLOADED_COUNT=0
          if [ -f "security-scan-evidence/security-scan-evidence.md" ]; then
            curl -s -w "\n%{http_code}" \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@security-scan-evidence/security-scan-evidence.md" \
              -F "file_name=security-scan-evidence-${{ github.run_number }}.md" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "✅ Uploaded: security-scan-evidence-${{ github.run_number }}.md"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          else
            echo "⚠️  Evidence report not found (scans may have failed)"
          fi

          # Upload SARIF files
          for sarif_file in security-scan-evidence/*.sarif; do
            if [ -f "$sarif_file" ]; then
              curl -s -w "\n%{http_code}" \
                -H "Authorization: Basic $BASIC_AUTH" \
                -F "file=@$sarif_file" \
                -F "table_name=change_request" \
                -F "table_sys_id=$CHANGE_SYS_ID" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
              echo "✅ Uploaded: $sarif_file"
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            fi
          done

          # Upload Polaris results
          if [ -f "polaris-results/polaris-results.json" ]; then
            curl -s -w "\n%{http_code}" \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@polaris-results/polaris-results.json" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "✅ Uploaded: polaris-results.json"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ SECURITY EVIDENCE UPLOADED TO SERVICENOW"
          echo "   Total files: $UPLOADED_COUNT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

      - name: Add work note with security scan summary
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Get security scan results from artifacts
          OVERALL_STATUS="UNKNOWN"
          TOTAL_FINDINGS=0

          if [ -f "security-scan-evidence/security-scan-evidence.md" ]; then
            # Extract status and findings from evidence file
            if grep -q "Overall Status.*PASSED" security-scan-evidence/security-scan-evidence.md; then
              OVERALL_STATUS="PASSED"
            elif grep -q "Overall Status.*FAILED" security-scan-evidence/security-scan-evidence.md; then
              OVERALL_STATUS="FAILED"
              TOTAL_FINDINGS=$(grep "Total Findings" security-scan-evidence/security-scan-evidence.md | grep -oE '[0-9]+' | head -1 || echo "0")
            fi
          fi

          # Create work note with security evidence
          PAYLOAD=$(jq -n \
            --arg status "$OVERALL_STATUS" \
            --arg findings "$TOTAL_FINDINGS" \
            --arg workflow "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              work_notes: "🔒 SECURITY SCAN EVIDENCE UPLOADED\n\n" +
                "Security Scan Status: \($status)\n" +
                (if $status == "PASSED" then "✅ All security scans passed - No high/critical vulnerabilities detected\n   Safe to proceed with deployment to ${{ github.event.inputs.environment }}"
                 elif $status == "FAILED" then "⚠️  REVIEW REQUIRED: \($findings) security findings detected\n   Review attached evidence before approving deployment"
                 else "ℹ️  Security scans completed - review attached evidence" end) +
                "\n\nEvidence Documents Attached:\n" +
                "- Security Scan Summary (Markdown)\n" +
                "- SARIF scan results (CodeQL, Semgrep, Trivy, Checkov, tfsec, OWASP)\n" +
                "- Polaris Kubernetes security audit\n\n" +
                "All results are also available in GitHub Security tab.\n\n" +
                "Workflow Run: \($workflow)\n\n" +
                "Compliance: Evidence required for SOC 2 CC7.1 security controls"
            }')

          # Add work note to change request
          for i in {1..3}; do
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "✅ WORK NOTE ADDED TO CHANGE REQUEST $CHANGE_NUMBER"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              echo "## ✅ Security Evidence Uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Overall Status** | $OVERALL_STATUS |" >> $GITHUB_STEP_SUMMARY
              echo "| **Total Findings** | $TOTAL_FINDINGS |" >> $GITHUB_STEP_SUMMARY
              echo "| **Evidence Files** | Multiple SARIF + summary report |" >> $GITHUB_STEP_SUMMARY
              echo "| **Work Note** | ✅ Added successfully |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            echo "⚠️  Attempt $i failed (HTTP $HTTP_CODE), retrying in 2 seconds..."
            sleep 2
          done

          echo "❌ Failed to add work note after 3 attempts"
          echo "⚠️ Evidence files uploaded but work note update failed" >> $GITHUB_STEP_SUMMARY
          exit 0  # Don't fail the job - evidence was uploaded

  # Job 5: Pre-Deployment Checks (runs after change is approved)
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: [create-change-request, upload-security-evidence]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
          kubectl get nodes

      - name: Check namespace exists
        run: |
          NAMESPACE="microservices-${{ github.event.inputs.environment }}"
          if ! kubectl get namespace $NAMESPACE 2>/dev/null; then
            echo "⚠️ Namespace $NAMESPACE does not exist, creating..."
            kubectl create namespace $NAMESPACE
            kubectl label namespace $NAMESPACE istio-injection=enabled
            echo "✅ Namespace created and labeled for Istio injection"
          else
            echo "✅ Namespace $NAMESPACE exists"
          fi

      - name: Pre-deployment validation complete
        run: |
          echo "✅ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "Ready to deploy to **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  # Job 6: Deploy Application
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [create-change-request, pre-deployment-checks]
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy using Kustomize
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"

          kubectl apply -k kustomize/overlays/$ENV

          echo "NAMESPACE=microservices-$ENV" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          echo "Waiting for deployments in namespace: $NAMESPACE"

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            SERVICES="$SERVICES loadgenerator"
          fi

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "⚠️ $service rollout timed out"
          done

      - name: Verify deployment health
        id: health-check
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"

          echo "## Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "⚠️ Not all pods are running" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update ServiceNow Change Request - Success
        if: success() && needs.create-change-request.outputs.change_request_number != ''
        uses: ServiceNow/servicenow-devops-update-change@v5.1.0
        with:
          # Authentication (token-based)
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          change-request-number: ${{ needs.create-change-request.outputs.change_request_number }}
          change-request-details: |
            {
              "close_code": "successful",
              "close_notes": "Deployment completed successfully to ${{ github.event.inputs.environment }}.\n\nAll pods running.\nCommit: ${{ github.sha }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "state": "3"
            }

      - name: Update ServiceNow via REST API - Success (Fallback)
        if: success() && needs.create-change-request.outputs.change_request_number == ''
        run: |
          echo "⚠️ Change number not available from DevOps API, skipping update" >> $GITHUB_STEP_SUMMARY
          echo "Deployment succeeded but change request update failed" >> $GITHUB_STEP_SUMMARY

  # Job 7: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [create-change-request, deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-$ENV"

          echo "⚠️ Deployment failed. Rolling back..." >> $GITHUB_STEP_SUMMARY

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          for service in $SERVICES; do
            echo "Rolling back $service..."
            kubectl rollout undo deployment/$service -n $NAMESPACE || echo "⚠️ Failed to rollback $service"
          done

          echo "✅ Rollback completed" >> $GITHUB_STEP_SUMMARY

      - name: Update ServiceNow Change Request - Failed
        uses: ServiceNow/servicenow-devops-update-change@v5.1.0
        with:
          # Authentication (token-based)
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          change-request-number: ${{ needs.create-change-request.outputs.change_request_number }}
          change-request-details: |
            {
              "close_code": "unsuccessful",
              "close_notes": "Deployment failed to ${{ github.event.inputs.environment }}. Automatic rollback executed.\n\nLogs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "state": "4"
            }
