---
name: "🚀 Master CI/CD Pipeline"

"on":
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod
        default: 'dev'
      version:
        description: 'Semantic version for images (e.g., 1.2.3 - without v prefix)'
        required: false
        type: string
        default: ''
      skip_terraform:
        description: 'Skip infrastructure deployment'
        type: boolean
        default: false
      skip_security:
        description: 'Skip security scans (NOT recommended for prod)'
        type: boolean
        default: false
      skip_deploy:
        description: 'Skip application deployment (infrastructure only)'
        type: boolean
        default: false
      force_build_all:
        description: 'Force build all services (ignore change detection)'
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  pull-requests: write
  id-token: write
  actions: read

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices

jobs:
  # ============================================================================
  # STAGE 0: Pipeline Initialization
  # ============================================================================

  pipeline-init:
    name: "🎯 Pipeline Initialization"
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should_deploy: ${{ steps.set-env.outputs.should_deploy }}
      is_production: ${{ steps.set-env.outputs.is_production }}
      policy_ok: ${{ steps.branch-policy.outputs.policy_ok }}
      policy_reason: ${{ steps.branch-policy.outputs.policy_reason }}

    steps:
      - name: Determine Environment
        id: set-env
        run: |
          # Determine environment based on trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="dev"  # Auto-deploy to dev on main
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENV="dev"
          else
            ENV="dev"  # Default for PRs
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT

          # Determine if we should deploy (not on PRs unless explicitly requested)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

          # Flag production deployments
          if [ "$ENV" == "prod" ]; then
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

          echo "## 🎯 Pipeline Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | **$ENV** |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Actor | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY

      - name: Enforce Branch Policy
        id: branch-policy
        run: |
          ENV="${{ steps.set-env.outputs.environment }}"
          BRANCH="${{ github.ref_name }}"
          POLICY_OK="true"
          REASON=""

          if [ "$ENV" = "qa" ] || [ "$ENV" = "prod" ]; then
            if [[ ! "$BRANCH" =~ ^release\/ ]]; then
              POLICY_OK="false"
              REASON="Deployments to $ENV must run from a release/* branch. Current: $BRANCH"
            fi
          fi

          echo "policy_ok=$POLICY_OK" >> $GITHUB_OUTPUT
          echo "policy_reason=$REASON" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Branch Policy" >> $GITHUB_STEP_SUMMARY
          if [ "$POLICY_OK" = "true" ]; then
            echo "Policy: ✅ Allowed" >> $GITHUB_STEP_SUMMARY
          else
            echo "Policy: ❌ Blocked" >> $GITHUB_STEP_SUMMARY
            echo "$REASON" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # STAGE 1: Code Quality & Security (Parallel Execution)
  # ============================================================================

  validate-code:
    name: "📋 Code Validation"
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_security }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Kustomize Configurations
        run: |
          echo "### 📋 Kustomize Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for env in dev qa prod; do
            echo "Validating kustomize/overlays/$env..."
            if kubectl kustomize kustomize/overlays/$env > /dev/null 2>&1; then
              echo "✅ $env overlay valid" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $env overlay INVALID" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done

      - name: YAML Lint
        run: |
          # Install yamllint if not present
          if ! command -v yamllint &> /dev/null; then
            pip install yamllint
          fi
          yamllint -d "{extends: default, rules: {line-length: {max: 400}, comments: disable}}" .github/workflows/ || true

  security-scans:
    name: "🔒 Security Scanning"
    needs: pipeline-init
    if: ${{ !inputs.skip_security }}
    uses: ./.github/workflows/security-scan.yaml
    secrets: inherit

  # ============================================================================
  # STAGE 2: Infrastructure Management (Conditional)
  # ============================================================================

  detect-terraform-changes:
    name: "🔍 Detect Infrastructure Changes"
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.filter.outputs.terraform }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Terraform Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            terraform:
              - 'terraform-aws/**'
              - '.github/workflows/MASTER-PIPELINE.yaml'
              - '.github/workflows/terraform-*.yaml'

  terraform-plan:
    name: "📊 Terraform Plan"
    needs: [pipeline-init, detect-terraform-changes]
    if: |
      needs.detect-terraform-changes.outputs.terraform_changed == 'true' &&
      !inputs.skip_terraform
    uses: ./.github/workflows/terraform-plan.yaml
    secrets: inherit
    with:
      environment: ${{ needs.pipeline-init.outputs.environment }}

  terraform-apply:
    name: "🏗️ Deploy Infrastructure"
    needs: [pipeline-init, terraform-plan, security-scans]
    if: |
      needs.detect-terraform-changes.outputs.terraform_changed == 'true' &&
      !inputs.skip_terraform &&
      github.ref == 'refs/heads/main' &&
      github.event_name != 'pull_request'
    uses: ./.github/workflows/terraform-apply.yaml
    secrets: inherit
    with:
      environment: ${{ needs.pipeline-init.outputs.environment }}
      action: 'apply'


  # ============================================================================
  # STAGE 3: Build Docker Images (Smart Change Detection)
  # ============================================================================

  detect-service-changes:
    name: "🔍 Detect Service Changes"
    runs-on: ubuntu-latest
    outputs:
      services_changed: ${{ steps.filter.outputs.changes }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changed Services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend: 'src/frontend/**'
            cartservice: 'src/cartservice/**'
            productcatalogservice: 'src/productcatalogservice/**'
            currencyservice: 'src/currencyservice/**'
            paymentservice: 'src/paymentservice/**'
            shippingservice: 'src/shippingservice/**'
            emailservice: 'src/emailservice/**'
            checkoutservice: 'src/checkoutservice/**'
            recommendationservice: 'src/recommendationservice/**'
            adservice: 'src/adservice/**'
            loadgenerator: 'src/loadgenerator/**'
            shoppingassistantservice: 'src/shoppingassistantservice/**'

      - name: Check if Any Services Changed
        id: check
        run: |
          CHANGES='${{ steps.filter.outputs.changes }}'
          if [ "${{ inputs.force_build_all }}" == "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "🔨 Force build enabled - will build all services"
          elif [ "$CHANGES" != "" ] && [ "$CHANGES" != "[]" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📦 Detected changes in: $CHANGES"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No service changes detected"
          fi

  build-and-push:
    name: "🐳 Build Docker Images"
    needs: [pipeline-init, detect-service-changes, security-scans, get-deployed-version]
    if: |
      needs.detect-service-changes.outputs.has_changes == 'true' ||
      inputs.force_build_all
    permissions:
      contents: read
      security-events: write
      id-token: write
      checks: write
    uses: ./.github/workflows/build-images.yaml
    secrets: inherit
    with:
      environment: ${{ needs.pipeline-init.outputs.environment }}
      version: ${{ needs.get-deployed-version.outputs.previous_version }}
      # Always pass 'all' when force_build_all is true or when services_changed is empty
      services: ${{ (inputs.force_build_all || needs.detect-service-changes.outputs.services_changed == '' || needs.detect-service-changes.outputs.services_changed == '[]') && 'all' || needs.detect-service-changes.outputs.services_changed }}
      push_images: ${{ github.event_name != 'pull_request' }}

  # ============================================================================
  # STAGE 3.5: ServiceNow Integration (Test Results & Packages)
  # ============================================================================

  upload-test-results:
    name: "📊 Upload Test Results to ServiceNow"
    needs: [pipeline-init, build-and-push]
    if: |
      needs.build-and-push.result == 'success' &&
      github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Test Result Artifacts
        id: download-tests
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test-results
          merge-multiple: true
        continue-on-error: true

      - name: Check for Test Results
        id: check-tests
        run: |
          if [ -d "test-results" ] && [ "$(find test-results -name '*.xml' | wc -l)" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "Found $(find test-results -name '*.xml' | wc -l) test result files"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "No test result files found"
          fi

      - name: Upload Test Results
        if: steps.check-tests.outputs.found == 'true'
        uses: ServiceNow/servicenow-devops-test-report@v2.0.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build and Test - ${{ needs.pipeline-init.outputs.environment }}'
          xml-report-filename: 'test-results/**/*.xml'
        continue-on-error: true

      - name: Test Upload Summary
        if: always()
        run: |
          echo "## 📊 Test Results Upload" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-tests.outputs.found }}" == "true" ]; then
            echo "✅ Test results uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No test results to upload (tests run during build jobs)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Environment: **${{ needs.pipeline-init.outputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  register-packages:
    name: "📦 Register Packages in ServiceNow"
    needs: [pipeline-init, build-and-push]
    if: |
      needs.build-and-push.result == 'success' &&
      github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Package Metadata
        id: package-metadata
        run: |
          # Extract services that were built
          SERVICES="${{ needs.build-and-push.outputs.services_built }}"

          # Build artifacts JSON for ServiceNow
          ARTIFACTS='[]'
          if [ -n "$SERVICES" ] && [ "$SERVICES" != "null" ]; then
            for service in $(echo "$SERVICES" | jq -r '.[]' 2>/dev/null || echo ""); do
              ARTIFACT=$(jq -n \
                --arg name "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/${service}" \
                --arg version "${{ needs.pipeline-init.outputs.environment }}-${{ github.sha }}" \
                --arg semantic "${{ needs.pipeline-init.outputs.environment }}-${{ github.run_number }}" \
                --arg repo "${{ github.repository }}" \
                '{
                  "name": $name,
                  "version": $version,
                  "semanticVersion": $semantic,
                  "repositoryName": $repo
                }')
              ARTIFACTS=$(echo "$ARTIFACTS" | jq ". += [$ARTIFACT]")
            done
          fi

          echo "artifacts=$ARTIFACTS" >> $GITHUB_OUTPUT

      - name: Register Docker Images
        if: steps.package-metadata.outputs.artifacts != '[]'
        uses: ServiceNow/servicenow-devops-register-package@v2.0.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Packages - ${{ needs.pipeline-init.outputs.environment }}'
          artifacts: ${{ steps.package-metadata.outputs.artifacts }}
          package-name: 'microservices-${{ needs.pipeline-init.outputs.environment }}-${{ github.run_number }}.package'

      - name: Package Registration Summary
        if: always()
        run: |
          echo "## 📦 Packages Registered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker images registered in ServiceNow" >> $GITHUB_STEP_SUMMARY
          echo "Environment: **${{ needs.pipeline-init.outputs.environment }}**" >> $GITHUB_STEP_SUMMARY
          echo "Package: \`microservices-${{ needs.pipeline-init.outputs.environment }}-${{ github.run_number }}.package\`" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # STAGE 4: Deployment with ServiceNow Integration
  # ============================================================================

  get-deployed-version:
    name: "📋 Get Currently Deployed Version"
    needs: [pipeline-init]
    runs-on: ubuntu-latest
    outputs:
      previous_version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name microservices --region ${{ env.AWS_REGION }}

      - name: Get Current Deployed Version
        id: get-version
        run: |
          # Use input version if provided, otherwise read from cluster
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "✅ Using provided version: $VERSION"
          else
            NAMESPACE="microservices-${{ needs.pipeline-init.outputs.environment }}"

            # Try to get image tag from frontend deployment (most likely to exist)
            VERSION=$(kubectl get deployment frontend -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null | grep -oP '(?<=:)[^:]+$' || echo "")

            # Fallback to environment name if deployment doesn't exist yet
            if [ -z "$VERSION" ]; then
              VERSION="${{ needs.pipeline-init.outputs.environment }}"
              echo "⚠️ No deployment found, using environment name as version"
            else
              echo "✅ Current deployed version: $VERSION"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

  servicenow-change:
    name: "📝 ServiceNow Change Request"
    needs: [pipeline-init, register-packages, detect-service-changes, detect-terraform-changes, security-scans, get-deployed-version]
    if: |
      always() &&
      needs.pipeline-init.outputs.should_deploy == 'true' &&
      needs.pipeline-init.outputs.policy_ok == 'true' &&
      !inputs.skip_deploy
    uses: ./.github/workflows/servicenow-change-rest.yaml
    secrets: inherit
    with:
      environment: ${{ needs.pipeline-init.outputs.environment }}
      change_type: 'kubernetes'
      short_description: 'Deploy microservices to ${{ needs.pipeline-init.outputs.environment }} (Kubernetes)'
      description: |
        Kubernetes deployment of microservices application to ${{ needs.pipeline-init.outputs.environment }} environment.

        Environment: ${{ needs.pipeline-init.outputs.environment }}
        Namespace: microservices-${{ needs.pipeline-init.outputs.environment }}
        Deployment Method: Kustomize overlays
        Triggered by: ${{ github.actor }}
        Commit: ${{ github.sha }}
        Workflow: ${{ github.workflow }}
      implementation_plan: |
        1. Configure kubectl access to EKS cluster
        2. Ensure namespace microservices-${{ needs.pipeline-init.outputs.environment }} exists
        3. Apply Kustomize overlays for ${{ needs.pipeline-init.outputs.environment }}
        4. Monitor rollout status for all deployments
        5. Verify all pods healthy and running
        6. Test frontend application endpoint
      backout_plan: |
        1. kubectl rollout undo -n microservices-${{ needs.pipeline-init.outputs.environment }} --all
        2. Verify all services rolled back to previous version
        3. Monitor pod status and logs
        4. Test application functionality
      test_plan: |
        1. Verify all deployments rolled out successfully
        2. Check all pods are in Running state
        3. Verify service endpoints responding
        4. Test frontend URL accessibility
        5. Monitor application metrics and logs
      # Additional context fields for ServiceNow traceability
      services_deployed: ${{ needs.detect-service-changes.outputs.services_changed }}
      infrastructure_changes: ${{ needs.detect-terraform-changes.outputs.terraform_changed }}
      security_scanners: 'CodeQL, Trivy, Semgrep, OWASP Dependency Check, Gitleaks, Checkov, Kubesec'
      pr_number: ${{ github.event.pull_request.number || '' }}
      previous_version: '${{ needs.get-deployed-version.outputs.previous_version }}'

  deploy-to-environment:
    name: "🚀 Deploy Application"
    needs: [pipeline-init, servicenow-change]
    if: needs.servicenow-change.result == 'success'
    uses: ./.github/workflows/deploy-environment.yaml
    secrets: inherit
    with:
      environment: ${{ needs.pipeline-init.outputs.environment }}
      wait_for_ready: true
      timeout_minutes: ${{ needs.pipeline-init.outputs.is_production == 'true' && 15 || 10 }}

  # Config validation removed - beta feature was unreliable
  # Configuration tracking now handled via:
  # 1. SBOM uploads (dependency tracking in build-images.yaml)
  # 2. Package registration (artifact tracking in build-images.yaml)
  # 3. Git commit history (change tracking via GitHub)

  # ============================================================================
  # STAGE 5: Post-Deployment Validation
  # ============================================================================

  smoke-tests:
    name: "✅ Smoke Tests"
    needs: [pipeline-init, deploy-to-environment]
    if: needs.deploy-to-environment.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Wait for All Pods Ready
        run: |
          NAMESPACE="microservices-${{ needs.pipeline-init.outputs.environment }}"
          echo "⏳ Waiting for all pods to be ready in $NAMESPACE..."

          kubectl wait --for=condition=ready pods --all \
            -n $NAMESPACE \
            --timeout=300s || echo "⚠️ Some pods not ready within timeout"

      - name: Test Frontend Endpoint
        id: test-frontend
        run: |
          # Get frontend URL from Istio ingress
          FRONTEND_URL=$(kubectl get svc -n istio-system istio-ingressgateway \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")

          if [ -z "$FRONTEND_URL" ]; then
            echo "⚠️ Frontend URL not yet available (LoadBalancer provisioning)"
            echo "status=pending" >> $GITHUB_OUTPUT
          else
            echo "Testing frontend at: http://$FRONTEND_URL/"
            if curl -f -s -o /dev/null -w "%{http_code}" "http://$FRONTEND_URL/" | grep -q "200"; then
              echo "✅ Frontend is accessible"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "url=http://$FRONTEND_URL" >> $GITHUB_OUTPUT
            else
              echo "❌ Frontend returned non-200 status"
              echo "status=failure" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Smoke Test Summary
        run: |
          echo "## ✅ Smoke Tests Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pod Readiness | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Endpoint | ${{ steps.test-frontend.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.test-frontend.outputs.status }}" == "success" ]; then
            echo "| URL | ${{ steps.test-frontend.outputs.url }} |" >> $GITHUB_STEP_SUMMARY
          fi

    # ============================================================================
    # STAGE 7: Release Tagging (Production Only)
    # ============================================================================

  create-github-release:
    name: "🏷️ Create Git Tag and Release"
    needs: [pipeline-init, deploy-to-environment, smoke-tests]
    if: |
      needs.pipeline-init.outputs.is_production == 'true' &&
      needs.deploy-to-environment.result == 'success' &&
      needs.smoke-tests.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Release Version
        id: version
        run: |
          FILE="kustomize/overlays/prod/kustomization.yaml"
          if [ ! -f "$FILE" ]; then
            echo "❌ $FILE not found" >&2; exit 1; fi
          TAG=$(grep -m1 -E '^\s*newTag:' "$FILE" | awk '{print $2}')
          if [ -z "$TAG" ]; then
            echo "❌ Could not determine release tag from $FILE" >&2; exit 1; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release tag resolved: $TAG"

      - name: Create and Push Git Tag
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: |
          if git rev-parse "v$TAG" >/dev/null 2>&1; then
            echo "ℹ️ Tag v$TAG already exists"
          else
            git tag -a "v$TAG" -m "Release v$TAG"
            git push origin "v$TAG"
            echo "✅ Pushed tag v$TAG"
          fi

      - name: Create GitHub Release
        env:
          TAG: ${{ steps.version.outputs.tag }}
          GH_TOKEN: ${{ github.token }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if gh release view "v$TAG" >/dev/null 2>&1; then
            echo "ℹ️ Release v$TAG already exists"
          else
            gh release create "v$TAG" --title "Release v$TAG" --notes "Automated release from CI run: $RUN_URL"
            echo "✅ Created GitHub Release v$TAG"
          fi

  # ============================================================================
  # STAGE 7: Back-merge Release Branch to Main (Production Only)
  # ============================================================================

  backmerge-release-to-main:
    name: "🔁 Back-merge release/* to main"
    needs: [pipeline-init, deploy-to-environment, smoke-tests, create-github-release]
    if: |
      needs.pipeline-init.outputs.is_production == 'true' &&
      needs.deploy-to-environment.result == 'success' &&
      needs.smoke-tests.result == 'success' &&
      startsWith(github.ref_name, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Open Back-merge PR into main
        env:
          GH_TOKEN: ${{ github.token }}
          BRANCH: ${{ github.ref_name }}
        run: |
          TITLE="Back-merge $BRANCH into main after production release"
          BODY="Automated back-merge to update main with release changes deployed to production."
          # Check if branch has commits ahead of main
          git fetch origin main "$BRANCH" --quiet || true
          AHEAD=$(git rev-list --left-right --count origin/main..."$BRANCH" | awk '{print $2}')
          if [ "${AHEAD:-0}" -eq 0 ]; then
            echo "ℹ️ $BRANCH has no commits ahead of main; skipping back-merge PR"
            exit 0
          fi
          # If PR already exists, skip creating
          if gh pr list --base main --head "$BRANCH" --state open --json number | jq -e 'length>0' >/dev/null; then
            echo "ℹ️ Back-merge PR already open"
          else
            gh pr create --base main --head "$BRANCH" -t "$TITLE" -b "$BODY" || true
            echo "✅ Opened back-merge PR"
          fi

  # ============================================================================
  # STAGE 8: Pipeline Summary
  # ============================================================================

  pipeline-summary:
    name: "📊 Pipeline Summary"
    needs:
      - pipeline-init
      - security-scans
      - detect-terraform-changes
      - detect-service-changes
      - build-and-push
      - upload-test-results
      - register-packages
      - servicenow-change
      - deploy-to-environment
      - smoke-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate Summary
        run: |
          echo "# 🚀 Master CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | **${{ needs.pipeline-init.outputs.environment }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Actor | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Stage Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scans | ${{ needs.security-scans.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Changes | ${{ needs.detect-terraform-changes.outputs.terraform_changed == 'true' && '✅ Detected' || '⏭️ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Service Changes | ${{ needs.detect-service-changes.outputs.has_changes == 'true' && '✅ Detected' || '⏭️ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Images | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Upload Test Results | ${{ needs.upload-test-results.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Register Packages | ${{ needs.register-packages.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ServiceNow Change | ${{ needs.servicenow-change.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy-to-environment.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📝 ServiceNow Integration" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Request | ${{ needs.servicenow-change.outputs.change_request_number || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pipeline-init.outputs.environment }}" == "dev" ]; then
            echo "| Approval Status | ✅ Auto-Approved (DEV) |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.servicenow-change.result }}" == "success" ]; then
            echo "| Approval Status | ✅ Approved in ServiceNow |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Approval Status | ⏭️ Skipped or Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🎯 Final Result" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-to-environment.result }}" == "success" ] && [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "### ✅ **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "Application successfully deployed to **${{ needs.pipeline-init.outputs.environment }}**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**ServiceNow Evidence:**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Test results uploaded" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Packages registered" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Change Request created" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Configuration uploaded" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-to-environment.result }}" == "skipped" ]; then
            echo "### ℹ️ **BUILD ONLY**" >> $GITHUB_STEP_SUMMARY
            echo "No deployment occurred (PR or manual skip)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Check individual stage logs for details" >> $GITHUB_STEP_SUMMARY
          fi
