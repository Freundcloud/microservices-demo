---
name: "Promote Environments (Dev → QA → Prod)"

'on':
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment to promote to'
        required: true
        type: choice
        options:
          - qa
          - prod
        default: 'qa'
      source_version:
        description: 'Version to promote (must be deployed in previous env)'
        required: true
        type: string
  workflow_call:
    inputs:
      target_environment:
        description: 'Target environment to promote to'
        required: true
        type: string
      source_version:
        description: 'Version to promote'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices

jobs:
  validate-promotion:
    name: "Validate Promotion"
    runs-on: ubuntu-latest
    outputs:
      can_promote: ${{ steps.validation.outputs.can_promote }}
      source_env: ${{ steps.validation.outputs.source_env }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Promotion Path
        id: validation
        run: |
          TARGET_ENV="${{ inputs.target_environment }}"
          VERSION="${{ inputs.source_version }}"

          # Determine source environment
          case "$TARGET_ENV" in
            qa)
              SOURCE_ENV="dev"
              ;;
            prod)
              SOURCE_ENV="qa"
              ;;
            *)
              echo "❌ Invalid target environment: $TARGET_ENV"
              exit 1
              ;;
          esac

          echo "source_env=$SOURCE_ENV" >> $GITHUB_OUTPUT

          # Check if version is deployed in source environment
          SOURCE_FILE="kustomize/overlays/${SOURCE_ENV}/kustomization.yaml"
          if ! grep -q "newTag: ${VERSION}" "$SOURCE_FILE"; then
            echo "❌ Version $VERSION not found in $SOURCE_ENV environment"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Version $VERSION is deployed in $SOURCE_ENV"
          echo "✅ Ready to promote to $TARGET_ENV"
          echo "can_promote=true" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## 🚀 Environment Promotion" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Source Environment | \`${{ steps.validation.outputs.source_env }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Target Environment | \`${{ inputs.target_environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`${{ inputs.source_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ✅ Ready to promote |" >> $GITHUB_STEP_SUMMARY

  deploy-target:
    name: "Deploy to ${{ inputs.target_environment }}"
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    uses: ./.github/workflows/deploy-environment.yaml
    with:
      environment: ${{ inputs.target_environment }}
      wait_for_ready: true
      timeout_minutes: 15
    secrets: inherit

  create-release:
    name: "Create Release Tag"
    needs: deploy-target
    if: inputs.target_environment == 'prod'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          VERSION="${{ inputs.source_version }}"
          TAG="v${VERSION}"

          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "⚠️  Tag $TAG already exists"
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release $TAG - Promoted to production"
            git push origin "$TAG"
            echo "✅ Created tag: $TAG"
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ inputs.source_version }}"
          TAG="v${VERSION}"

          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️  Release $TAG already exists"
          else
            # Create release notes without heredoc to avoid YAML parsing issues
            NOTES="## 🚀 Production Release ${TAG}\n\n"
            NOTES="${NOTES}Promoted from QA to Production.\n\n"
            NOTES="${NOTES}### Deployment Details\n"
            NOTES="${NOTES}All 12 microservices deployed with version ${VERSION}.\n\n"
            NOTES="${NOTES}### ServiceNow Integration\n"
            NOTES="${NOTES}ServiceNow Change Request created and approved for production deployment.\n\n"
            NOTES="${NOTES}---\n\n"
            NOTES="${NOTES}🤖 Generated by automated promotion pipeline"

            gh release create "$TAG" \
              --title "Release $TAG" \
              --notes "$(echo -e "$NOTES")" \
              --latest

            echo "✅ Created GitHub Release: $TAG"
          fi

      - name: Summary
        run: |
          echo "## 🎉 Production Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ inputs.source_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.source_version }}" >> $GITHUB_STEP_SUMMARY
