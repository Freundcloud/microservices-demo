---
name: "☁️ SonarCloud Code Quality"

"on":
  workflow_call:  # Reusable workflow
    outputs:
      quality_gate:
        description: "Quality gate status (passed/failed/warning)"
        value: ${{ jobs.sonarcloud-scan.outputs.status }}
      bugs:
        description: "Number of bugs detected"
        value: ${{ jobs.sonarcloud-scan.outputs.bugs }}
      vulnerabilities:
        description: "Number of vulnerabilities detected"
        value: ${{ jobs.sonarcloud-scan.outputs.vulnerabilities }}
      code_smells:
        description: "Number of code smells detected"
        value: ${{ jobs.sonarcloud-scan.outputs.code_smells }}
      coverage:
        description: "Code coverage percentage"
        value: ${{ jobs.sonarcloud-scan.outputs.coverage }}
      duplications:
        description: "Duplication percentage"
        value: ${{ jobs.sonarcloud-scan.outputs.duplications }}
    secrets:
      SONAR_TOKEN:
        description: 'SonarCloud authentication token'
        required: true
      SN_DEVOPS_USER:
        description: 'ServiceNow DevOps username (basic auth)'
        required: false
      SN_DEVOPS_PASSWORD:
        description: 'ServiceNow DevOps password (basic auth)'
        required: false
      SN_INSTANCE_URL:
        description: 'ServiceNow instance URL'
        required: false
      SN_ORCHESTRATION_TOOL_ID:
        description: 'ServiceNow orchestration tool ID'
        required: false
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      skip_servicenow:
        description: 'Skip ServiceNow integration'
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: read

jobs:
  sonarcloud-scan:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.get-results.outputs.status }}
      bugs: ${{ steps.get-results.outputs.bugs }}
      vulnerabilities: ${{ steps.get-results.outputs.vulnerabilities }}
      code_smells: ${{ steps.get-results.outputs.code_smells }}
      coverage: ${{ steps.get-results.outputs.coverage }}
      duplications: ${{ steps.get-results.outputs.duplications }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone for better relevancy of analysis
          fetch-depth: 0

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Use LTS for better compatibility with native modules

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build Java service
        run: |
          echo "📦 Building Java service for analysis..."

          # Build adservice (Java with Gradle)
          # Note: adservice is the only Java service in this project
          echo "Building adservice..."
          (cd src/adservice && chmod +x gradlew && ./gradlew build -x test -x verifyGoogleJavaFormat --no-daemon)
        continue-on-error: true

      - name: Build .NET service
        run: |
          echo "📦 Building .NET service for analysis..."
          cd src/cartservice
          dotnet build src/cartservice.csproj -c Release
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=freundcloud
            -Dsonar.projectKey=Freundcloud_microservices-demo

      - name: Get SonarCloud Results
        id: get-results
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Waiting for SonarCloud analysis to complete..."
          sleep 30

          PROJECT_KEY="Freundcloud_microservices-demo"

          # Get quality gate status
          echo "Fetching quality gate status..."
          QUALITY_GATE=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status // "NONE"')

          echo "Quality Gate: $QUALITY_GATE"

          # Get metrics
          echo "Fetching project metrics..."
          METRICS=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density" \
            | jq '.component.measures // []')

          # Extract individual metrics
          BUGS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="bugs") | .value // "0"')
          VULNS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="vulnerabilities") | .value // "0"')
          SMELLS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="code_smells") | .value // "0"')
          COVERAGE=$(echo "$METRICS" | jq -r '.[] | select(.metric=="coverage") | .value // "0"')
          DUPS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="duplicated_lines_density") | .value // "0"')

          # Map quality gate status to simple values
          if [ "$QUALITY_GATE" = "OK" ]; then
            STATUS="passed"
          elif [ "$QUALITY_GATE" = "ERROR" ]; then
            STATUS="failed"
          elif [ "$QUALITY_GATE" = "WARN" ]; then
            STATUS="warning"
          else
            STATUS="unknown"
          fi

          # Output results
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "bugs=${BUGS}" >> $GITHUB_OUTPUT
          echo "vulnerabilities=${VULNS}" >> $GITHUB_OUTPUT
          echo "code_smells=${SMELLS}" >> $GITHUB_OUTPUT
          echo "coverage=${COVERAGE}%" >> $GITHUB_OUTPUT
          echo "duplications=${DUPS}%" >> $GITHUB_OUTPUT

          # Display summary
          echo "✓ SonarCloud Results Retrieved:"
          echo "  Quality Gate: $QUALITY_GATE ($STATUS)"
          echo "  Bugs: ${BUGS}"
          echo "  Vulnerabilities: ${VULNS}"
          echo "  Code Smells: ${SMELLS}"
          echo "  Coverage: ${COVERAGE}%"
          echo "  Duplications: ${DUPS}%"

      - name: Upload SonarCloud Results to ServiceNow
        if: ${{ !inputs.skip_servicenow && !github.event.pull_request }}
        uses: ServiceNow/servicenow-devops-sonar@v3.1.0
        with:
          # Basic Authentication (Option 2)
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'SonarCloud Analysis'
          sonar-host-url: 'https://sonarcloud.io'
          sonar-project-key: 'Freundcloud_microservices-demo'
          sonar-org-key: 'freundcloud'
        continue-on-error: true

      - name: Generate SonarCloud Badge
        run: |
          echo "### ☁️ SonarCloud Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View Results**: [SonarCloud Dashboard](https://sonarcloud.io/dashboard?id=Freundcloud_microservices-demo)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Quality Metrics**:" >> $GITHUB_STEP_SUMMARY
          echo "- Organization: \`freundcloud\`" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`Freundcloud_microservices-demo\`" >> $GITHUB_STEP_SUMMARY
          echo "- Languages: Go, Python, Java, JavaScript, C#" >> $GITHUB_STEP_SUMMARY

          if [ "${{ secrets.SN_INSTANCE_URL }}" != "" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Results uploaded to ServiceNow DevOps" >> $GITHUB_STEP_SUMMARY
          fi
