---
name: "🚀 Full Promotion Pipeline (Dev → QA → Prod)"

'on':
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.1.6)'
        required: true
        type: string
      auto_promote_qa:
        description: 'Automatically promote to QA after dev success'
        required: false
        type: boolean
        default: true
      auto_promote_prod:
        description: 'Auto promote to Prod after QA (requires ServiceNow)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  id-token: write
  actions: read
  checks: write

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices

jobs:
  # ============================================================================
  # STAGE 0: Update Dev Kustomization with Version
  # ============================================================================

  update-dev-version:
    name: "📝 Update Dev Kustomization"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update Kustomization Version
        run: |
          VERSION="${{ inputs.version }}"
          KUSTOMIZE_FILE="kustomize/overlays/dev/kustomization.yaml"

          echo "📝 Updating all images to version: $VERSION"

          # Update all newTag values to the specified version
          sed -i "s/newTag: .*/newTag: $VERSION/" "$KUSTOMIZE_FILE"

          echo "✅ Updated $KUSTOMIZE_FILE with version $VERSION"
          cat "$KUSTOMIZE_FILE"

      - name: Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "⚠️  No changes to commit"
          else
            git add kustomize/overlays/dev/kustomization.yaml
            git commit -m "chore: Update dev to version ${{ inputs.version }} - Automated promotion pipeline"
            git push
            echo "✅ Committed version update"
          fi

  # ============================================================================
  # STAGE 1: Deploy to DEV
  # ============================================================================

  deploy-dev:
    name: "🔵 Deploy to DEV"
    needs: update-dev-version
    uses: ./.github/workflows/deploy-environment.yaml
    with:
      environment: dev
      wait_for_ready: true
      timeout_minutes: 10
    secrets: inherit

  # ============================================================================
  # STAGE 2: Promote to QA (optional auto-promotion)
  # ============================================================================

  promote-to-qa:
    name: "🟡 Promote to QA"
    needs: deploy-dev
    if: |
      always() &&
      needs.deploy-dev.result == 'success' &&
      inputs.auto_promote_qa == true
    uses: ./.github/workflows/promote-environments.yaml
    with:
      target_environment: qa
      source_version: ${{ inputs.version }}
    secrets: inherit

  # Manual QA approval step (if auto-promotion disabled)
  manual-qa-approval:
    name: "⏸️  Manual QA Approval Required"
    needs: deploy-dev
    if: |
      always() &&
      needs.deploy-dev.result == 'success' &&
      inputs.auto_promote_qa == false
    runs-on: ubuntu-latest

    steps:
      - name: Wait for Manual Approval
        run: |
          echo "## ⏸️  Manual Approval Required for QA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Dev deployment completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "Manual approval required to promote to QA." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Environment**: QA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Re-run this workflow with auto_promote_qa=true to proceed." >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # STAGE 3: Promote to PROD (requires ServiceNow approval)
  # ============================================================================

  promote-to-prod:
    name: "🔴 Promote to PROD"
    needs: [deploy-dev, promote-to-qa]
    if: |
      always() &&
      (needs.promote-to-qa.result == 'success' ||
       needs.promote-to-qa.result == 'skipped') &&
      inputs.auto_promote_prod == true
    uses: ./.github/workflows/promote-environments.yaml
    with:
      target_environment: prod
      source_version: ${{ inputs.version }}
    secrets: inherit

  # Manual PROD approval step (if auto-promotion disabled)
  manual-prod-approval:
    name: "⏸️  Manual PROD Approval Required"
    needs: [deploy-dev, promote-to-qa]
    if: |
      always() &&
      (needs.promote-to-qa.result == 'success' ||
       needs.promote-to-qa.result == 'skipped') &&
      inputs.auto_promote_prod == false
    runs-on: ubuntu-latest

    steps:
      - name: Wait for Manual Approval
        run: |
          echo "## ⏸️  Manual Approval Required for PROD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "QA deployment completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "Manual approval required to promote to Production." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Re-run with auto_promote_prod=true to proceed." >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # FINAL: Summary
  # ============================================================================

  pipeline-summary:
    name: "📊 Pipeline Summary"
    needs: [deploy-dev, promote-to-qa, promote-to-prod]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Full Promotion Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          DEV_RESULT="${{ needs.deploy-dev.result }}"
          QA_STATUS="${{ inputs.auto_promote_qa && 'Auto' || 'Manual' }}"
          QA_RESULT="${{ needs.promote-to-qa.result }}"
          PROD_STATUS="${{ inputs.auto_promote_prod && 'Auto' || 'Manual' }}"
          PROD_RESULT="${{ needs.promote-to-prod.result }}"

          echo "| 🔵 DEV | Deployed | \`$DEV_RESULT\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 QA | $QA_STATUS | \`$QA_RESULT\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 PROD | $PROD_STATUS | \`$PROD_RESULT\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "$DEV_RESULT" == "success" ]]; then
            echo "✅ **Overall**: Pipeline completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall**: Pipeline encountered issues" >> $GITHUB_STEP_SUMMARY
          fi
