name: ServiceNow - Update Change Request

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev/qa/prod)'
        required: true
        type: string
      change_request_number:
        description: 'ServiceNow change request number (e.g., CHG0030001)'
        required: true
        type: string
      deployment_status:
        description: 'Deployment result (success/failure)'
        required: true
        type: string
      running_pods:
        description: 'Number of running pods'
        required: false
        type: string
        default: '0'
      total_pods:
        description: 'Total number of pods expected'
        required: false
        type: string
        default: '0'
      frontend_url:
        description: 'Frontend application URL'
        required: false
        type: string
        default: ''

jobs:
  update-change-request:
    name: Update Change Request
    runs-on: ubuntu-latest

    steps:
      - name: Get Current Change Request State
        id: get-current-state
        run: |
          # Query ServiceNow to get the current state and sys_id of the change request
          RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Accept: application/json" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request?sysparm_query=number=${{ inputs.change_request_number }}&sysparm_fields=state,sys_id")

          CURRENT_STATE=$(echo "$RESPONSE" | jq -r '.result[0].state')
          SYS_ID=$(echo "$RESPONSE" | jq -r '.result[0].sys_id')

          echo "Current state of ${{ inputs.change_request_number }}: $CURRENT_STATE"
          echo "System ID: $SYS_ID"
          echo "current_state=$CURRENT_STATE" >> $GITHUB_OUTPUT
          echo "sys_id=$SYS_ID" >> $GITHUB_OUTPUT

      - name: Determine Change Request State
        id: determine-state
        run: |
          # Map deployment status to ServiceNow change request states
          # State 3 = Closed (both successful and unsuccessful use this state)
          # close_code determines success vs failure: "successful" or "unsuccessful"
          # State 4 = Canceled (requires 'reason' field, not used for deployment outcomes)

          if [ "${{ inputs.deployment_status }}" == "success" ]; then
            # Deployment successful - Close with successful code
            echo "state=3" >> $GITHUB_OUTPUT
            echo "close_code=successful" >> $GITHUB_OUTPUT
            echo "close_notes=Deployment completed successfully. All services running." >> $GITHUB_OUTPUT
            echo "status_label=‚úÖ Successful" >> $GITHUB_OUTPUT
          else
            # Deployment failed - Close with unsuccessful code (still state 3, not 4)
            echo "state=3" >> $GITHUB_OUTPUT
            echo "close_code=unsuccessful" >> $GITHUB_OUTPUT
            echo "close_notes=Deployment failed. Review logs for details." >> $GITHUB_OUTPUT
            echo "status_label=‚ùå Failed" >> $GITHUB_OUTPUT
          fi

          echo "Environment: ${{ inputs.environment }}"
          echo "Change Request: ${{ inputs.change_request_number }}"
          echo "Deployment Status: ${{ inputs.deployment_status }}"

      - name: Build Work Notes
        id: work-notes
        run: |
          WORK_NOTES="Deployment to ${{ inputs.environment }} environment completed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          **Deployment Result:** ${{ steps.determine-state.outputs.status_label }}

          **Services Status:**
          - Running Pods: ${{ inputs.running_pods }}
          - Total Pods: ${{ inputs.total_pods }}
          - Pod Health: $([ "${{ inputs.running_pods }}" == "${{ inputs.total_pods }}" ] && echo "‚úÖ All healthy" || echo "‚ö†Ô∏è Some pods not ready")

          **Application Access:**
          - Frontend URL: ${{ inputs.frontend_url || 'Not available yet' }}

          **GitHub Workflow:**
          - Run ID: ${{ github.run_id }}
          - Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Actor: ${{ github.actor }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}

          **Next Steps:**
          $(if [ "${{ inputs.deployment_status }}" == "success" ]; then
            echo "- Verify application functionality"
            echo "- Monitor application metrics"
            echo "- Close change request if validation passes"
          else
            echo "- Review deployment logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "- Investigate failure cause"
            echo "- Plan remediation or rollback"
          fi)"

          # Save as multiline output (escape for JSON)
          echo "work_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$WORK_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Change Request in ServiceNow (Add Work Notes)
        run: |
          # Update the change request with work notes and deployment details
          # NOTE: We cannot change state via API due to ServiceNow business rule
          # "Change Model: Check State Transition" blocks all state changes from New state
          # State must be updated manually in ServiceNow or via ServiceNow workflows

          echo "Updating change request ${{ inputs.change_request_number }} with deployment results..."

          PAYLOAD=$(jq -n \
            --arg work_notes "${{ steps.work-notes.outputs.work_notes }}" \
            --arg close_code "${{ steps.determine-state.outputs.close_code }}" \
            --arg close_notes "${{ steps.determine-state.outputs.close_notes }}" \
            --arg application_url "${{ inputs.frontend_url || '' }}" \
            '{
              "work_notes": $work_notes,
              "close_code": $close_code,
              "close_notes": $close_notes,
              "u_application_url": $application_url
            }')

          echo "Payload (without state field):"
          echo "$PAYLOAD" | jq '.'

          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X PUT \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/${{ steps.get-current-state.outputs.sys_id }}")

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Change request updated successfully"
            echo ""
            echo "‚ö†Ô∏è  NOTE: State was NOT changed due to ServiceNow business rule restrictions"
            echo "    The change request remains in state: ${{ steps.get-current-state.outputs.current_state }}"
            echo "    close_code and close_notes have been set for when state is manually changed to Closed"
            echo ""
            echo "    To close this change request:"
            echo "    1. Open: ${{ secrets.SERVICENOW_INSTANCE_URL }}/change_request.do?sys_id=${{ steps.get-current-state.outputs.sys_id }}"
            echo "    2. Manually change State to 'Closed'"
            echo "    3. The close_code and close_notes are already populated"
          else
            echo "‚ùå Failed to update change request (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"
            exit 1
          fi

      - name: Update Summary
        if: always()
        run: |
          echo "## üìù ServiceNow Change Request Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Request | **${{ inputs.change_request_number }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Status | ${{ steps.determine-state.outputs.status_label }} |" >> $GITHUB_STEP_SUMMARY
          echo "| New State | ${{ steps.determine-state.outputs.state }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Close Code | ${{ steps.determine-state.outputs.close_code }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**View in ServiceNow:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ secrets.SERVICENOW_INSTANCE_URL }}/change_request.do?sysparm_query=number=${{ inputs.change_request_number }}" >> $GITHUB_STEP_SUMMARY
