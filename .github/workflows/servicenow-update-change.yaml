---
name: "ServiceNow Update Change Request"

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev/qa/prod)'
        required: true
        type: string
      change_request_number:
        description: 'ServiceNow change request number (e.g., CHG0123456)'
        required: true
        type: string
      deployment_status:
        description: 'Deployment job result (success/failure)'
        required: true
        type: string
      running_pods:
        description: 'Number of running pods'
        required: false
        type: string
        default: ''
      total_pods:
        description: 'Total number of pods'
        required: false
        type: string
        default: ''
      frontend_url:
        description: 'Frontend application URL'
        required: false
        type: string
        default: ''
      auto_close:
        description: 'Automatically close change request on success'
        required: false
        type: boolean
        default: false
      use_token_auth:
        description: 'Use token-based authentication (v2.0+) instead of basic auth'
        required: false
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  update-change:
    name: "Update Change Request (${{ inputs.environment }})"
    runs-on: ubuntu-latest

    steps:
      - name: Validate Inputs
        id: validate
        run: |
          # Validate change request number format
          CHANGE_NUM="${{ inputs.change_request_number }}"
          if ! [[ "$CHANGE_NUM" =~ ^CHG[0-9]{7}$ ]]; then
            echo "⚠️  Warning: Change request number format looks unusual: $CHANGE_NUM"
            echo "Expected format: CHG0123456"
          fi

          # Validate deployment status
          STATUS="${{ inputs.deployment_status }}"
          if [[ "$STATUS" != "success" && "$STATUS" != "failure" ]]; then
            echo "❌ Invalid deployment status: $STATUS"
            echo "Expected: success or failure"
            exit 1
          fi

          echo "✅ Validation passed"
          echo "change_number=$CHANGE_NUM" >> $GITHUB_OUTPUT
          echo "deployment_status=$STATUS" >> $GITHUB_OUTPUT

      - name: Prepare Work Notes
        id: prepare-notes
        run: |
          STATUS="${{ inputs.deployment_status }}"
          ENV="${{ inputs.environment }}"
          RUNNING="${{ inputs.running_pods }}"
          TOTAL="${{ inputs.total_pods }}"
          URL="${{ inputs.frontend_url }}"

          # Build work notes based on deployment status
          if [ "$STATUS" = "success" ]; then
            NOTES="✅ Deployment completed successfully to ${ENV} environment

Environment: ${ENV}
Namespace: microservices-${ENV}
Status: success"

            # Add pod information if available
            if [ -n "$RUNNING" ] && [ -n "$TOTAL" ]; then
              NOTES="${NOTES}
Running Pods: ${RUNNING}/${TOTAL}"
            fi

            # Add frontend URL if available
            if [ -n "$URL" ] && [ "$URL" != "pending" ]; then
              NOTES="${NOTES}
Frontend URL: ${URL}"
            fi

            NOTES="${NOTES}
Commit: ${{ github.sha }}
Triggered by: @${{ github.actor }}
Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

All services deployed and healthy."

          else
            NOTES="❌ Deployment failed in ${ENV} environment

Environment: ${ENV}
Namespace: microservices-${ENV}
Status: failure"

            # Add pod information if available
            if [ -n "$RUNNING" ] && [ -n "$TOTAL" ]; then
              NOTES="${NOTES}
Running Pods: ${RUNNING}/${TOTAL}"
            fi

            NOTES="${NOTES}
Commit: ${{ github.sha }}
Triggered by: @${{ github.actor }}
Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

Please review workflow logs for error details."
          fi

          # Save work notes to file (handles multi-line content)
          echo "$NOTES" > /tmp/work_notes.txt
          echo "work_notes<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/work_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare Change Details JSON
        id: prepare-json
        run: |
          STATUS="${{ inputs.deployment_status }}"
          AUTO_CLOSE="${{ inputs.auto_close }}"

          # Read work notes from file
          WORK_NOTES=$(cat /tmp/work_notes.txt)

          # Build change details JSON
          if [ "$STATUS" = "success" ] && [ "$AUTO_CLOSE" = "true" ]; then
            # Success + auto-close: Set state to closed
            CHANGE_DETAILS=$(jq -n \
              --arg work_notes "$WORK_NOTES" \
              --arg close_code "successful" \
              --arg close_notes "Deployment verified and application is healthy. Change automatically closed by CI/CD pipeline." \
              --arg state "3" \
              '{
                work_notes: $work_notes,
                close_code: $close_code,
                close_notes: $close_notes,
                state: $state
              }')
          elif [ "$STATUS" = "success" ]; then
            # Success without auto-close: Update to implement state with work notes
            CHANGE_DETAILS=$(jq -n \
              --arg work_notes "$WORK_NOTES" \
              --arg state "-1" \
              '{
                work_notes: $work_notes,
                state: $state
              }')
          else
            # Failure: Update work notes, keep in implement state
            CHANGE_DETAILS=$(jq -n \
              --arg work_notes "$WORK_NOTES" \
              --arg state "-1" \
              '{
                work_notes: $work_notes,
                state: $state
              }')
          fi

          echo "change_details=$CHANGE_DETAILS" >> $GITHUB_OUTPUT

          echo "### 📝 Prepared Change Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$CHANGE_DETAILS" | jq '.' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Update Change Request (Token Auth)
        if: inputs.use_token_auth
        id: update-token
        continue-on-error: true
        uses: ServiceNow/servicenow-devops-update-change@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SERVICENOW_DEVOPS_TOKEN }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          context-github: ${{ toJSON(github) }}
          change-request-number: ${{ inputs.change_request_number }}
          change-request-details: ${{ steps.prepare-json.outputs.change_details }}

      - name: Update Change Request (Basic Auth)
        if: "!inputs.use_token_auth"
        id: update-basic
        continue-on-error: true
        uses: ServiceNow/servicenow-devops-update-change@v2.0.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          context-github: ${{ toJSON(github) }}
          change-request-number: ${{ inputs.change_request_number }}
          change-request-details: ${{ steps.prepare-json.outputs.change_details }}

      - name: Verify Update Status
        id: verify
        run: |
          if [ "${{ inputs.use_token_auth }}" = "true" ]; then
            UPDATE_STATUS="${{ steps.update-token.outcome }}"
            UPDATE_OUTPUT="${{ steps.update-token.outputs.status }}"
          else
            UPDATE_STATUS="${{ steps.update-basic.outcome }}"
            UPDATE_OUTPUT="${{ steps.update-basic.outputs.status }}"
          fi

          echo "update_status=$UPDATE_STATUS" >> $GITHUB_OUTPUT

          if [ "$UPDATE_STATUS" = "success" ]; then
            echo "✅ Successfully updated change request: ${{ inputs.change_request_number }}"
            echo "update_result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to update change request: ${{ inputs.change_request_number }}"
            echo "Status: $UPDATE_OUTPUT"
            echo "update_result=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create Summary
        if: always()
        run: |
          CHANGE_NUM="${{ inputs.change_request_number }}"
          STATUS="${{ inputs.deployment_status }}"
          UPDATE_RESULT="${{ steps.verify.outputs.update_result }}"
          ENV="${{ inputs.environment }}"

          echo "## 📝 ServiceNow Change Request Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Request | **${CHANGE_NUM}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${ENV} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Status | ${STATUS} |" >> $GITHUB_STEP_SUMMARY
          echo "| Update Result | ${UPDATE_RESULT} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.auto_close }}" = "true" ] && [ "$STATUS" = "success" ]; then
            echo "| Auto-Close | ✅ Enabled |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Auto-Close | ❌ Disabled |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Change Request in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/change_request_list.do?sysparm_query=number=${CHANGE_NUM})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$UPDATE_RESULT" = "failure" ]; then
            echo "### ⚠️ Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The change request was not updated automatically. You may need to:" >> $GITHUB_STEP_SUMMARY
            echo "1. Manually update the change request in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "2. Check authentication credentials and permissions" >> $GITHUB_STEP_SUMMARY
            echo "3. Review workflow logs for error details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fallback REST API Update (if GitHub Action fails)
        if: steps.verify.outputs.update_result == 'failure'
        continue-on-error: true
        run: |
          echo "⚠️ Attempting fallback update via REST API..."

          CHANGE_NUM="${{ inputs.change_request_number }}"
          WORK_NOTES=$(cat /tmp/work_notes.txt)

          # Build payload
          PAYLOAD=$(jq -n \
            --arg work_notes "$WORK_NOTES" \
            '{
              work_notes: $work_notes
            }')

          # Make REST API call to update work notes only (safer than state changes)
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X PATCH \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request?sysparm_query=number=${CHANGE_NUM}")

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Fallback update successful via REST API"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fallback Update**: ✅ Work notes added via REST API" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Fallback update also failed (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fallback Update**: ❌ Also failed (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
          fi
