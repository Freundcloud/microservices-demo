name: Deploy with ServiceNow (Basic API)

# üìñ WORKFLOW DESCRIPTION
# This workflow demonstrates basic ServiceNow integration using REST API only:
# ‚úÖ Simple REST API integration (no DevOps Change Velocity required)
# ‚úÖ Basic authentication with username/password
# ‚úÖ Environment-specific risk assessment (dev/qa/prod)
# ‚úÖ Multi-level approval workflow with polling
# ‚úÖ Automated rollback on failure
# ‚úÖ Comprehensive error handling with retry logic
# ‚úÖ Rich observability and metrics
#
# Use this workflow when:
# - You want the simplest possible ServiceNow integration
# - You don't need DevOps workspace tracking
# - You don't have IntegrationHub plugins available
#
# üìö Documentation: docs/GITHUB-SERVICENOW-INTEGRATION-GUIDE.md

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}

jobs:
  # Job 1: Run Security Scans
  security-scans:
    name: Run Security Scans
    uses: ./.github/workflows/security-scan.yaml
    secrets: inherit

  # Job 2: Create ServiceNow Change Request
  create-change-request:
    name: Create Change Request
    runs-on: ubuntu-latest
    needs: [security-scans]
    outputs:
      change_request_number: ${{ steps.create-cr.outputs.change_number }}
      change_request_sys_id: ${{ steps.create-cr.outputs.change_sys_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine change settings
        id: settings
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ "$ENV" == "dev" ]; then
            echo "state=3" >> $GITHUB_OUTPUT  # Closed/Complete
            echo "risk=3" >> $GITHUB_OUTPUT   # Low
            echo "priority=3" >> $GITHUB_OUTPUT
            echo "assignment_group=DevOps Team" >> $GITHUB_OUTPUT
            echo "auto_close=true" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "qa" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=2" >> $GITHUB_OUTPUT    # Medium
            echo "priority=2" >> $GITHUB_OUTPUT
            echo "assignment_group=QA Team" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "prod" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=1" >> $GITHUB_OUTPUT    # High
            echo "priority=1" >> $GITHUB_OUTPUT
            echo "assignment_group=Change Advisory Board" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Change Request via REST API
        id: create-cr
        run: |
          ENV="${{ github.event.inputs.environment }}"

          # Get application sys_id if configured (optional)
          APP_SYS_ID="${{ secrets.SERVICENOW_APP_SYS_ID }}"

          # Build payload with optional application association
          if [ -n "$APP_SYS_ID" ] && [ "$APP_SYS_ID" != "null" ]; then
            # Create change request payload WITH application
            PAYLOAD=$(cat <<EOF
          {
            "short_description": "Deploy Online Boutique to $ENV",
            "description": "Automated deployment via GitHub Actions.\n\nApplication: Online Boutique\nEnvironment: $ENV\nCommit: ${{ github.sha }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-$ENV\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "kubectl rollout undo deployment -n microservices-$ENV\nOR\nkubectl delete -k kustomize/overlays/$ENV",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-$ENV\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "${{ steps.settings.outputs.risk }}",
            "priority": "${{ steps.settings.outputs.priority }}",
            "assignment_group": "${{ steps.settings.outputs.assignment_group }}",
            "state": "${{ steps.settings.outputs.state }}",
            "type": "standard",
            "requested_by": "${{ secrets.SERVICENOW_USERNAME }}",
            "business_service": "$APP_SYS_ID",
            "cmdb_ci": "$APP_SYS_ID",
            "u_application": "Online Boutique"
          }
          EOF
            )
          else
            # Create change request payload WITHOUT application
            PAYLOAD=$(cat <<EOF
          {
            "short_description": "Deploy microservices-demo to $ENV",
            "description": "Automated deployment via GitHub Actions.\n\nEnvironment: $ENV\nCommit: ${{ github.sha }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-$ENV\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "kubectl rollout undo deployment -n microservices-$ENV\nOR\nkubectl delete -k kustomize/overlays/$ENV",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-$ENV\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "${{ steps.settings.outputs.risk }}",
            "priority": "${{ steps.settings.outputs.priority }}",
            "assignment_group": "${{ steps.settings.outputs.assignment_group }}",
            "state": "${{ steps.settings.outputs.state }}",
            "type": "standard",
            "requested_by": "${{ secrets.SERVICENOW_USERNAME }}"
          }
          EOF
            )
          fi

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Retry logic with exponential backoff
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Creating change request with retry logic..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Attempt $ATTEMPT of $MAX_RETRIES..."

            # Create change request and capture HTTP code
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request" 2>/dev/null)

            # Split response and HTTP code
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (201 Created)
            if [ "$HTTP_CODE" == "201" ]; then
              # Extract change number and sys_id
              CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number')
              CHANGE_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id')
              STATE=$(echo "$BODY" | jq -r '.result.state')
              RISK=$(echo "$BODY" | jq -r '.result.risk')

              if [ "$CHANGE_NUMBER" == "null" ] || [ -z "$CHANGE_NUMBER" ]; then
                echo "‚ùå API returned 201 but no change number in response"
                echo "$BODY" | jq .
                exit 1
              fi

              echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
              echo "change_sys_id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ CHANGE REQUEST CREATED SUCCESSFULLY"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Change Request Created Successfully" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Sys ID** | \`$CHANGE_SYS_ID\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Risk** | \`$RISK\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Attempts Used** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
              echo "| **Created At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))  # Exponential backoff: 5s, 10s, 20s
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx)
            if [[ "$HTTP_CODE" =~ ^4 ]]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚ùå CLIENT ERROR - NOT RETRYING"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚ùå Change Request Creation Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Client error (HTTP $HTTP_CODE) - not retryable**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Unknown error or max retries reached
            echo "‚ùå Unexpected HTTP code: $HTTP_CODE"
            ATTEMPT=$((ATTEMPT + 1))
          done

          # Max retries exhausted
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå MAX RETRIES EXHAUSTED"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "## ‚ùå Change Request Creation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Max retries ($MAX_RETRIES) exhausted**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Attempts** | $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
          echo "| **Last HTTP Code** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Last Response:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Upload Security Evidence to ServiceNow
  upload-security-evidence:
    name: Upload Security Evidence
    runs-on: ubuntu-latest
    needs: [create-change-request, security-scans]
    if: always() && needs.create-change-request.result == 'success' && needs.security-scans.result != 'cancelled'

    steps:
      - name: Download security evidence from scans
        uses: actions/download-artifact@v4
        with:
          name: security-scan-evidence
        continue-on-error: true

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload evidence files to ServiceNow Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          echo "üì§ Uploading security scan evidence to ServiceNow Change Request $CHANGE_NUMBER..."
          echo ""

          # Upload evidence report (Markdown summary)
          if [ -f "security-scan-evidence.md" ]; then
            echo "Uploading: security-scan-evidence.md"
            curl -s -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@security-scan-evidence.md" \
              -F "file_name=security-scan-evidence-${{ github.run_number }}.md" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "‚úÖ Uploaded: security-scan-evidence-${{ github.run_number }}.md"
          else
            echo "‚ö†Ô∏è  Evidence report not found (scans may have failed)"
          fi

          # Upload SARIF files (detailed scan results)
          UPLOADED_COUNT=0
          for sarif_file in *.sarif 2>/dev/null; do
            if [ -f "$sarif_file" ]; then
              echo "Uploading: $sarif_file"
              curl -s -X POST \
                -H "Authorization: Basic $BASIC_AUTH" \
                -F "file=@$sarif_file" \
                -F "table_name=change_request" \
                -F "table_sys_id=$CHANGE_SYS_ID" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
              echo "‚úÖ Uploaded: $sarif_file"
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            fi
          done

          # Upload Polaris K8s results (if exists)
          if [ -f "polaris-results.json" ]; then
            echo "Uploading: polaris-results.json"
            curl -s -X POST \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@polaris-results.json" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "‚úÖ Uploaded: polaris-results.json"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          fi

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ SECURITY EVIDENCE UPLOADED TO SERVICENOW"
          echo "   Total files: $UPLOADED_COUNT"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""

      - name: Add security scan work note to Change Request
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Get security scan results from artifacts
          OVERALL_STATUS="UNKNOWN"
          TOTAL_FINDINGS="N/A"

          if [ -f "security-scan-evidence.md" ]; then
            # Try to extract status from evidence file
            if grep -q "COMPLIANCE STATUS.*All security scans passed" security-scan-evidence.md; then
              OVERALL_STATUS="PASSED"
              TOTAL_FINDINGS="0"
            elif grep -q "COMPLIANCE STATUS.*Security findings require review" security-scan-evidence.md; then
              OVERALL_STATUS="FAILED"
              # Try to extract finding count
              TOTAL_FINDINGS=$(grep "Total Findings:" security-scan-evidence.md | head -n1 | grep -oP '\d+' || echo "N/A")
            fi
          fi

          # Create comprehensive work note
          WORK_NOTE="üîí Security Scan Evidence Uploaded

          Overall Status: ${OVERALL_STATUS}
          Findings (HIGH/CRITICAL): ${TOTAL_FINDINGS}

          Security Scans Executed:
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚úì CodeQL Analysis (Python, JavaScript, Go, Java, C#)
          ‚úì Semgrep SAST (Static Application Security Testing)
          ‚úì Trivy Filesystem Scan (Vulnerability & misconfiguration)
          ‚úì Checkov + tfsec (Infrastructure as Code security)
          ‚úì Kubesec + Polaris (Kubernetes manifest security)
          ‚úì OWASP Dependency Check (Known CVEs in dependencies)

          $(if [ "$OVERALL_STATUS" == "PASSED" ]; then
            echo "‚úÖ APPROVAL RECOMMENDATION: All security scans passed"
            echo "   Safe to proceed with deployment to ${{ github.event.inputs.environment }}"
          elif [ "$OVERALL_STATUS" == "FAILED" ]; then
            echo "‚ö†Ô∏è  REVIEW REQUIRED: ${TOTAL_FINDINGS} security findings detected"
            echo "   Review attached evidence before approving deployment"
          else
            echo "‚ÑπÔ∏è  Security scans completed - review attached evidence"
          fi)

          Evidence Documents Attached:
          - security-scan-evidence-${{ github.run_number }}.md (Executive Summary)
          - *.sarif files (Detailed scan results in SARIF format)
          - polaris-results.json (Kubernetes security audit)

          Links:
          - Full Scan Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Security Alerts: ${{ github.server_url }}/${{ github.repository }}/security
          - Code Scanning: ${{ github.server_url }}/${{ github.repository }}/security/code-scanning

          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          Evidence Uploaded: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Pipeline Version: v1.0.0 - GitHub Actions Automated Security"

          # Add work note with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Adding security evidence work note to change request..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "   Attempt $ATTEMPT of $MAX_RETRIES..."

            PAYLOAD=$(jq -n --arg note "$WORK_NOTE" '{work_notes: $note}')

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" == "200" ]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ WORK NOTE ADDED TO CHANGE REQUEST $CHANGE_NUMBER"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Security Evidence Uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Security Status** | \`$OVERALL_STATUS\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Total Findings** | $TOTAL_FINDINGS |" >> $GITHUB_STEP_SUMMARY
              echo "| **Evidence Files** | Multiple SARIF + summary report |" >> $GITHUB_STEP_SUMMARY
              echo "| **Work Note** | ‚úÖ Added successfully |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retry on server errors
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "   ‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            echo "   ‚ùå Failed (HTTP $HTTP_CODE)"
            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "‚ö†Ô∏è  Warning: Could not add work note after $MAX_RETRIES attempts"
          echo "   Evidence files were uploaded successfully"
          exit 0

  # Job 4: Wait for Approval (QA and Prod only)
  wait-for-approval:
    name: Wait for Change Approval
    runs-on: ubuntu-latest
    needs: [create-change-request, upload-security-evidence]
    if: github.event.inputs.environment != 'dev'

    steps:
      - name: Wait for ServiceNow approval with Smart Polling
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          ENV="${{ github.event.inputs.environment }}"

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Timeout settings
          if [ "$ENV" == "qa" ]; then
            TIMEOUT=7200  # 2 hours
          else
            TIMEOUT=86400  # 24 hours
          fi

          POLL_INTERVAL=30  # 30 seconds
          ELAPSED=0
          WARNING_THRESHOLD=$((TIMEOUT * 80 / 100))
          WARNING_SHOWN=false

          # Initial summary
          echo "## ‚è∏Ô∏è  Waiting for ServiceNow Approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Poll Interval** | ${POLL_INTERVAL}s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Approve in ServiceNow**: [$CHANGE_NUMBER](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Helper functions
          format_time() {
            local seconds=$1
            printf "%02d:%02d:%02d" $((seconds / 3600)) $(((seconds % 3600) / 60)) $((seconds % 60))
          }

          generate_progress_bar() {
            local current=$1
            local total=$2
            local width=40
            local percentage=$((current * 100 / total))
            local filled=$((width * current / total))
            local empty=$((width - filled))
            printf "["
            printf "%${filled}s" | tr ' ' '‚ñà'
            printf "%${empty}s" | tr ' ' '‚ñë'
            printf "] %3d%%" "$percentage"
          }

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üïê Polling for approval..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get change request state with retry
            MAX_RETRIES=3
            RETRY_COUNT=0
            POLL_SUCCESS=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Basic $BASIC_AUTH" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID?sysparm_fields=state,approval,approval_set" 2>/dev/null)

              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | sed '$d')

              if [ "$HTTP_CODE" == "200" ]; then
                STATE=$(echo "$BODY" | jq -r '.result.state')
                APPROVAL=$(echo "$BODY" | jq -r '.result.approval')
                POLL_SUCCESS=true
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è  Poll failed (HTTP $HTTP_CODE), retry $RETRY_COUNT of $MAX_RETRIES..."
                sleep 5
              fi
            done

            if [ "$POLL_SUCCESS" = false ]; then
              echo "‚ùå Failed to poll ServiceNow after $MAX_RETRIES attempts"
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **Polling failed** - Could not reach ServiceNow API" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Calculate progress
            PROGRESS_BAR=$(generate_progress_bar $ELAPSED $TIMEOUT)
            TIME_ELAPSED=$(format_time $ELAPSED)
            TIME_REMAINING=$(format_time $((TIMEOUT - ELAPSED)))

            echo "‚è±Ô∏è  $TIME_ELAPSED elapsed | $TIME_REMAINING remaining | State: $STATE | Approval: $APPROVAL"
            echo "   $PROGRESS_BAR"

            # Check if approved
            if [ "$APPROVAL" == "approved" ]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ CHANGE REQUEST APPROVED!"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Change Request Approved" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Approved At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üöÄ **Ready to deploy** to \`$ENV\` environment" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Check if rejected
            if [ "$APPROVAL" == "rejected" ]; then
              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚ùå CHANGE REQUEST REJECTED!"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚ùå Change Request Rejected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Rejected At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "| **Time Waited** | $TIME_ELAPSED |" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ö†Ô∏è **Deployment blocked** - Change request rejected in ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Warning at 80% timeout
            if [ $ELAPSED -ge $WARNING_THRESHOLD ] && [ "$WARNING_SHOWN" = false ]; then
              echo ""
              echo "‚ö†Ô∏è  WARNING: 80% of approval timeout reached!"
              echo ""
              echo "‚ö†Ô∏è **Warning**: 80% of timeout reached" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              WARNING_SHOWN=true
            fi

            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
          done

          # Timeout reached
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå APPROVAL TIMEOUT REACHED"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "## ‚ùå Approval Timeout" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Timeout** | $((TIMEOUT / 3600)) hours |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final State** | \`$STATE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Final Approval** | \`$APPROVAL\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Deployment blocked** - Approval timeout reached without approval or rejection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Pre-Deployment Checks
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval]
    if: always() && needs.create-change-request.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
          kubectl get nodes

      - name: Check namespace exists
        run: |
          NAMESPACE="microservices-${{ github.event.inputs.environment }}"
          if ! kubectl get namespace $NAMESPACE 2>/dev/null; then
            echo "‚ö†Ô∏è Namespace $NAMESPACE does not exist, creating..."
            kubectl create namespace $NAMESPACE
            kubectl label namespace $NAMESPACE istio-injection=enabled
            echo "‚úÖ Namespace created and labeled for Istio injection"
          else
            echo "‚úÖ Namespace $NAMESPACE exists"
          fi

      - name: Pre-deployment validation complete
        run: |
          echo "‚úÖ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "Ready to deploy to **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Application
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval, pre-deployment-checks]
    if: always() && needs.pre-deployment-checks.result == 'success'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy using Kustomize
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"

          kubectl apply -k kustomize/overlays/$ENV

          echo "NAMESPACE=microservices-$ENV" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          echo "Waiting for deployments in namespace: $NAMESPACE"

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            SERVICES="$SERVICES loadgenerator"
          fi

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "‚ö†Ô∏è $service rollout timed out"
          done

      - name: Verify deployment health
        id: health-check
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"

          echo "## Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "‚ö†Ô∏è Not all pods are running" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update ServiceNow Change Request - Success
        if: success()
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "3",
            "close_code": "successful",
            "close_notes": "Deployment completed successfully to ${{ github.event.inputs.environment }}.\n\nAll pods running.\nCommit: ${{ github.sha }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Updating change request to 'Successful' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ CHANGE REQUEST CLOSED AS SUCCESSFUL"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚úÖ Change Request Closed - Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚ö†Ô∏è  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo ""
            echo "## ‚ö†Ô∏è Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - deployment succeeded
            exit 0
          done

  # Job 5: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [create-change-request, deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-$ENV"

          echo "‚ö†Ô∏è Deployment failed. Rolling back..." >> $GITHUB_STEP_SUMMARY

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          for service in $SERVICES; do
            echo "Rolling back $service..."
            kubectl rollout undo deployment/$service -n $NAMESPACE || echo "‚ö†Ô∏è Failed to rollback $service"
          done

          echo "‚úÖ Rollback completed" >> $GITHUB_STEP_SUMMARY

      - name: Update ServiceNow Change Request - Failed
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<'EOF'
          {
            "state": "4",
            "close_code": "unsuccessful",
            "close_notes": "Deployment failed to ${{ github.event.inputs.environment }}. Automatic rollback executed.\n\nLogs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )

          # Update with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=1

          echo "üìù Updating change request to 'Failed' state..."

          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "üîÑ Update attempt $ATTEMPT of $MAX_RETRIES..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              -H "Authorization: Basic $BASIC_AUTH" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" 2>/dev/null)

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Success (200 OK)
            if [ "$HTTP_CODE" == "200" ]; then
              UPDATED_STATE=$(echo "$BODY" | jq -r '.result.state')
              UPDATED_CLOSE_CODE=$(echo "$BODY" | jq -r '.result.close_code')

              echo ""
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚ùå CHANGE REQUEST CLOSED AS FAILED"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""
              echo "## ‚ùå Change Request Closed - Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **State** | Closed (\`$UPDATED_STATE\`) |" >> $GITHUB_STEP_SUMMARY
              echo "| **Close Code** | \`$UPDATED_CLOSE_CODE\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Rollback** | Completed |" >> $GITHUB_STEP_SUMMARY
              echo "| **Updated At** | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Retryable errors (5xx)
            if [[ "$HTTP_CODE" =~ ^5 ]]; then
              echo "‚ö†Ô∏è  Server error (HTTP $HTTP_CODE) - retrying in ${RETRY_DELAY}s..."
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
                continue
              fi
            fi

            # Non-retryable errors (4xx) or max retries reached
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚ö†Ô∏è  WARNING: Failed to update change request (HTTP $HTTP_CODE)"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo ""
            echo "## ‚ö†Ô∏è Warning: Change Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Rollback succeeded but change request update failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Change Number** | \`$CHANGE_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **HTTP Status** | \`$HTTP_CODE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Attempts** | $ATTEMPT of $MAX_RETRIES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Manual closure required** in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Don't fail the workflow - rollback was successful
            exit 0
          done
