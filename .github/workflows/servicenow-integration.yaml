---
name: "ServiceNow DevOps Integration (Reusable)"

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment being deployed (dev/qa/prod)'
        required: true
        type: string
      change_type:
        description: 'Type of change (normal/standard/emergency)'
        required: false
        type: string
        default: 'normal'
      security_scan_status:
        description: 'Overall security scan status (PASSED/FAILED/UNKNOWN)'
        required: false
        type: string
        default: 'UNKNOWN'
      security_findings:
        description: 'Number of security findings'
        required: false
        type: string
        default: '0'
    outputs:
      change_request_number:
        description: "ServiceNow change request number"
        value: ${{ jobs.create-change-request.outputs.change_request_number }}
      change_request_sys_id:
        description: "ServiceNow change request sys_id"
        value: ${{ jobs.create-change-request.outputs.change_request_sys_id }}
      change_status:
        description: "Change request status"
        value: ${{ jobs.create-change-request.outputs.change_status }}

permissions:
  contents: read

jobs:
  # Job 0: Register Security Tools in ServiceNow (runs first, only once)
  register-security-tools:
    name: 🔒 Register Security Tools
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Pipeline sys_id (if available)
        id: get-pipeline
        continue-on-error: true
        env:
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
        run: |
          # Try to find pipeline record for this repository
          REPO="${{ github.repository }}"

          PIPELINE_RESPONSE=$(curl -s -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
            "$SERVICENOW_INSTANCE_URL/api/now/table/sn_devops_pipeline?sysparm_query=nameLIKE$REPO&sysparm_limit=1" \
            -H "Accept: application/json" 2>/dev/null || echo '{"result":[]}')

          PIPELINE_SYS_ID=$(echo "$PIPELINE_RESPONSE" | jq -r '.result[0].sys_id // empty')

          if [ -n "$PIPELINE_SYS_ID" ]; then
            echo "pipeline_sys_id=$PIPELINE_SYS_ID" >> $GITHUB_OUTPUT
            echo "✅ Found pipeline: $PIPELINE_SYS_ID"
          else
            echo "⚠️  No pipeline found for $REPO"
            echo "   Security tools will be created but not linked to pipeline"
          fi

      - name: Register Security Tools
        env:
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          PIPELINE_SYS_ID: ${{ steps.get-pipeline.outputs.pipeline_sys_id }}
        run: |
          chmod +x scripts/register-security-tools-servicenow.sh
          ./scripts/register-security-tools-servicenow.sh

      - name: Summary
        run: |
          echo "## 🔒 Security Tools Registration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ 10 security tools registered in ServiceNow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tools registered:**" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL (Static Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy (Container Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP Dependency Check (Dependency Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep (Static Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- Gitleaks (Secret Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- Checkov (IaC Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- tfsec (Terraform Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- Grype (Vulnerability Scanner)" >> $GITHUB_STEP_SUMMARY
          echo "- Bandit (Python Security)" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint Security (JavaScript Security)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**View tools at:**" >> $GITHUB_STEP_SUMMARY
          echo "- [All Security Tools](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=sn_devops_tool_list.do)" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.get-pipeline.outputs.pipeline_sys_id }}" ]; then
            PIPELINE_URL="${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/record/sn_devops_pipeline/${{ steps.get-pipeline.outputs.pipeline_sys_id }}/params/selected-tab-index/3"
            echo "- [Pipeline Security Tools]($PIPELINE_URL)" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 1: Register Build Artifacts in ServiceNow DevOps
  register-artifacts:
    name: Register Artifacts in ServiceNow
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Resolve ServiceNow Inputs
        id: resolve
        run: |
          URL="${{ secrets.SN_INSTANCE_URL }}"
          if [ -z "$URL" ]; then URL="${{ secrets.SERVICENOW_INSTANCE_URL }}"; fi
          USER="${{ secrets.SN_DEVOPS_USER }}"
          if [ -z "$USER" ]; then USER="${{ secrets.SERVICENOW_USERNAME }}"; fi
          PASS="${{ secrets.SN_DEVOPS_PASSWORD }}"
          if [ -z "$PASS" ]; then PASS="${{ secrets.SERVICENOW_PASSWORD }}"; fi
          TOOL="${{ secrets.SN_ORCHESTRATION_TOOL_ID }}"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "pass=$PASS" >> $GITHUB_OUTPUT
          echo "tool=$TOOL" >> $GITHUB_OUTPUT

      - name: Install jq (for JSON validation)
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Validate ServiceNow Inputs (Artifacts)
        id: validate_art_inputs
        run: |
          URL="${{ steps.resolve.outputs.url }}"
          USER="${{ steps.resolve.outputs.user }}"
          PASS="${{ steps.resolve.outputs.pass }}"
          TOOL="${{ steps.resolve.outputs.tool }}"

          echo "## 🔐 ServiceNow Inputs: Register Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- URL: $([[ -n \"$URL\" ]] && echo present || echo MISSING)" >> $GITHUB_STEP_SUMMARY
          echo "- Username: $([[ -n \"$USER\" ]] && echo present || echo MISSING)" >> $GITHUB_STEP_SUMMARY
          echo "- Password: $([[ -n \"$PASS\" ]] && echo present || echo MISSING)" >> $GITHUB_STEP_SUMMARY
          echo "- Tool ID: $([[ -n \"$TOOL\" ]] && echo present || echo MISSING)" >> $GITHUB_STEP_SUMMARY

          if [ -z "$URL" ] || [ -z "$USER" ] || [ -z "$PASS" ] || [ -z "$TOOL" ]; then
            echo "❌ Missing required ServiceNow inputs (URL/USER/PASS/TOOL)." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Normalize URL (trim trailing slash)
          URL_NO_SLASH=${URL%/}
          echo "url_norm=$URL_NO_SLASH" >> $GITHUB_OUTPUT

      - name: "Preflight: Verify Basic Auth (Artifacts)"
        id: preflight_art_basic
        run: |
          URL="${{ steps.validate_art_inputs.outputs.url_norm }}"
          USER="${{ steps.resolve.outputs.user }}"
          PASS="${{ steps.resolve.outputs.pass }}"

          # Test authentication with detailed error capture
          RESPONSE=$(curl -s -w "\n%{http_code}" -u "$USER:$PASS" "$URL/api/now/table/sys_user?sysparm_limit=1")
          CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          if [ "$CODE" != "200" ]; then
            echo "❌ ServiceNow Basic auth failed for Register Artifacts (HTTP $CODE)." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tested Endpoint:** \`$URL/api/now/table/sys_user\`" >> $GITHUB_STEP_SUMMARY
            echo "**Username:** ${USER:0:3}***" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Parse error message if JSON
            if echo "$BODY" | jq . > /dev/null 2>&1; then
              ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
              echo "**ServiceNow Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            if [ "$CODE" = "401" ]; then
              echo "  - HTTP 401 = Invalid username or password" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify SERVICENOW_USERNAME and SERVICENOW_PASSWORD secrets" >> $GITHUB_STEP_SUMMARY
            elif [ "$CODE" = "403" ]; then
              echo "  - HTTP 403 = User lacks required permissions" >> $GITHUB_STEP_SUMMARY
              echo "  - User needs 'rest_service' and 'x_snc_devops' roles" >> $GITHUB_STEP_SUMMARY
            elif [ "$CODE" = "404" ]; then
              echo "  - HTTP 404 = Invalid instance URL" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify SN_INSTANCE_URL format" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Check ServiceNow instance accessibility" >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi
          echo "✅ ServiceNow Basic auth verified (Artifacts)" >> $GITHUB_STEP_SUMMARY

      - name: "Preflight: Verify Tool ID (Artifacts)"
        id: preflight_art_tool
        run: |
          URL="${{ steps.validate_art_inputs.outputs.url_norm }}"
          USER="${{ steps.resolve.outputs.user }}"
          PASS="${{ steps.resolve.outputs.pass }}"
          TOOL="${{ steps.resolve.outputs.tool }}"

          RESP=$(curl -s -w "\n%{http_code}" -u "$USER:$PASS" "$URL/api/now/table/sn_devops_tool/$TOOL?sysparm_fields=sys_id,name,active,type")
          HTTP_CODE=$(echo "$RESP" | tail -n1)
          BODY=$(echo "$RESP" | sed '$d')

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Tool ID lookup failed (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tool ID:** \`$TOOL\`" >> $GITHUB_STEP_SUMMARY
            echo "**Endpoint:** \`$URL/api/now/table/sn_devops_tool/$TOOL\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Parse error message if JSON
            if echo "$BODY" | jq . > /dev/null 2>&1; then
              ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
              echo "**ServiceNow Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            if [ "$HTTP_CODE" = "404" ]; then
              echo "  - HTTP 404 = Tool ID not found in ServiceNow" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify SN_ORCHESTRATION_TOOL_ID secret is correct" >> $GITHUB_STEP_SUMMARY
              echo "  - Check tool exists in ServiceNow: sn_devops_tool table" >> $GITHUB_STEP_SUMMARY
            elif [ "$HTTP_CODE" = "403" ]; then
              echo "  - HTTP 403 = User lacks permission to read DevOps tools" >> $GITHUB_STEP_SUMMARY
              echo "  - User needs 'sn_devops.devops_user' role" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Verify SN_ORCHESTRATION_TOOL_ID and user permissions" >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi

          NAME=$(echo "$BODY" | jq -r '.result.name // "unknown"')
          SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id // ""')

          # Note: sn_devops_tool table doesn't have an "active" field
          # If HTTP 200 and we got the tool, it exists and is usable

          if [ -z "$SYS_ID" ]; then
            echo "❌ Tool data invalid or empty" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "✅ Tool verified: $NAME (sys_id: ${SYS_ID:0:8}...)" >> $GITHUB_STEP_SUMMARY

      - name: Register Docker Images as Artifacts
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          devops-integration-user-name: ${{ steps.resolve.outputs.user }}
          devops-integration-user-password: ${{ steps.resolve.outputs.pass }}
          instance-url: ${{ steps.validate_art_inputs.outputs.url_norm }}
          tool-id: ${{ steps.resolve.outputs.tool }}
          context-github: '${{ toJSON(github) }}'
          job-name: 'Register Artifacts in ServiceNow'
          artifacts: |
            [
              {"name": "online-boutique-frontend", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-cartservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-productcatalogservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-currencyservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-paymentservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-shippingservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-emailservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-checkoutservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-recommendationservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-adservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-loadgenerator", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-shoppingassistantservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"}
            ]

      - name: Artifact Registration Summary
        if: always()
        run: |
          echo "## 📦 Artifacts Registered in ServiceNow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| online-boutique (12 services) | 1.0.${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow DevOps](${{ steps.resolve.outputs.url }}/now/devops-change/insights-home)" >> $GITHUB_STEP_SUMMARY

  # Job 2: Extract Work Items (GitHub Issues)
  extract-work-items:
    name: Extract Work Item Evidence
    runs-on: ubuntu-latest
    needs: register-artifacts
    outputs:
      issue_numbers: ${{ steps.extract.outputs.issue_numbers }}
      issue_count: ${{ steps.extract.outputs.issue_count }}
      work_items_summary: ${{ steps.extract.outputs.work_items_summary }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Fetch enough history to find recent merges

      - name: Extract GitHub Issues from PRs and Commits
        id: extract
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## 📋 Extracting Work Item Evidence" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get recent merged PRs (last 10, within last 24 hours)
          MERGED_PRS=$(gh pr list --state merged --base main --json number,mergedAt \
            --jq '.[] | select(.mergedAt > (now - 86400)) | .number' | head -10)

          ISSUE_NUMBERS=""
          WORK_ITEMS_HTML="<h3>📋 Work Items in This Deployment:</h3><ul>"
          WORK_ITEMS_TEXT=""
          ISSUE_COUNT=0

          # If no PRs, extract from recent commits (last 10)
          if [ -z "$MERGED_PRS" ]; then
            echo "ℹ️  No recently merged PRs found, checking commit messages..." >> $GITHUB_STEP_SUMMARY

            # Get last 10 commits
            COMMIT_MESSAGES=$(git log --pretty=format:"%s %b" -10 2>/dev/null || echo "")

            if [ -n "$COMMIT_MESSAGES" ]; then
              # Extract issue numbers from commit messages
              FOUND_ISSUES=$(echo "$COMMIT_MESSAGES" | grep -oE "(#|[Ff]ixes #|[Cc]loses #|[Rr]esolves #)[0-9]+" | grep -oE "[0-9]+" | sort -u)

              if [ -n "$FOUND_ISSUES" ]; then
                for issue_num in $FOUND_ISSUES; do
                  # Get issue details
                  ISSUE_DATA=$(gh issue view $issue_num --json title,state,labels,url 2>/dev/null || true)

                  if [ -z "$ISSUE_DATA" ]; then
                    continue
                  fi

                  ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title // "Unknown"')
                  ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state // "unknown"')
                  ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url // ""')
                  ISSUE_LABELS=$(echo "$ISSUE_DATA" | jq -r '[.labels[].name] | join(", ") // "none"')

                  # Add to lists
                  if [ -z "$ISSUE_NUMBERS" ]; then
                    ISSUE_NUMBERS="$issue_num"
                  else
                    ISSUE_NUMBERS="$ISSUE_NUMBERS,$issue_num"
                  fi

                  # Build HTML summary
                  WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><strong><a href=\"$ISSUE_URL\">Issue #$issue_num</a>: $ISSUE_TITLE</strong><br>"
                  WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<em>Status:</em> $ISSUE_STATE | <em>Labels:</em> $ISSUE_LABELS | <em>Source:</em> Direct commit</li>"

                  ISSUE_COUNT=$((ISSUE_COUNT + 1))

                  echo "✅ Found Issue #$issue_num from commits: $ISSUE_TITLE" >> $GITHUB_STEP_SUMMARY
                done
              fi
            fi

            # If still no work items found
            if [ "$ISSUE_COUNT" -eq "0" ]; then
              WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><em>No work items linked (direct push to main without issue references)</em></li>"
              WORK_ITEMS_TEXT="No work items linked (direct push to main)"
            fi
          else
            for pr_number in $MERGED_PRS; do
              # Get PR details
              PR_DATA=$(gh pr view $pr_number --json title,body,url,author 2>/dev/null || true)

              if [ -z "$PR_DATA" ]; then
                continue
              fi

              PR_TITLE=$(echo "$PR_DATA" | jq -r '.title // "Unknown"')
              PR_BODY=$(echo "$PR_DATA" | jq -r '.body // ""')
              PR_URL=$(echo "$PR_DATA" | jq -r '.url // ""')
              PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login // "unknown"')

              # Extract issue numbers (matches: #123, Fixes #456, Closes #789, Resolves #101)
              FOUND_ISSUES=$(echo "$PR_TITLE $PR_BODY" | grep -oE "(#|[Ff]ixes #|[Cc]loses #|[Rr]esolves #)[0-9]+" | grep -oE "[0-9]+" | sort -u)

              for issue_num in $FOUND_ISSUES; do
                # Skip if already processed
                if echo "$ISSUE_NUMBERS" | grep -q "\b$issue_num\b"; then
                  continue
                fi

                # Get issue details
                ISSUE_DATA=$(gh issue view $issue_num --json title,state,labels,url 2>/dev/null || true)

                if [ -z "$ISSUE_DATA" ]; then
                  continue
                fi

                ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title // "Unknown"')
                ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state // "unknown"')
                ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url // ""')
                ISSUE_LABELS=$(echo "$ISSUE_DATA" | jq -r '[.labels[].name] | join(", ") // "none"')

                # Add to lists
                if [ -z "$ISSUE_NUMBERS" ]; then
                  ISSUE_NUMBERS="$issue_num"
                else
                  ISSUE_NUMBERS="$ISSUE_NUMBERS,$issue_num"
                fi

                # Build HTML summary
                WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><strong><a href=\"$ISSUE_URL\">Issue #$issue_num</a>: $ISSUE_TITLE</strong><br>"
                WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<em>Status:</em> $ISSUE_STATE | <em>Labels:</em> $ISSUE_LABELS | <em>PR:</em> <a href=\"$PR_URL\">#$pr_number</a></li>"

                # Build text summary
                WORK_ITEMS_TEXT="${WORK_ITEMS_TEXT}\n- Issue #$issue_num: $ISSUE_TITLE\n  Status: $ISSUE_STATE | Labels: $ISSUE_LABELS | PR: #$pr_number"

                ISSUE_COUNT=$((ISSUE_COUNT + 1))

                echo "✅ Found Issue #$issue_num: $ISSUE_TITLE" >> $GITHUB_STEP_SUMMARY
              done
            done
          fi

          WORK_ITEMS_HTML="${WORK_ITEMS_HTML}</ul>"

          # Set outputs
          echo "issue_numbers=$ISSUE_NUMBERS" >> $GITHUB_OUTPUT
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          # URL encode the HTML for safe passing
          WORK_ITEMS_HTML_ENCODED=$(echo "$WORK_ITEMS_HTML" | jq -sRr @uri)
          echo "work_items_summary=$WORK_ITEMS_HTML_ENCODED" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Work Items Found:** $ISSUE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Issue Numbers:** $ISSUE_NUMBERS" >> $GITHUB_STEP_SUMMARY

  # Job 3: Create ServiceNow Change Request
  create-change-request:
    name: Create ServiceNow Change Request
    runs-on: ubuntu-latest
    needs: [register-artifacts, extract-work-items]
    outputs:
      change_request_number: ${{ steps.fetch-change.outputs.change_request_number }}
      change_request_sys_id: ${{ steps.fetch-change.outputs.change_request_sys_id }}
      change_status: ${{ steps.fetch-change.outputs.change_status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Change Risk Level
        id: risk
        run: |
          # Set risk level based on environment
          case "${{ inputs.environment }}" in
            dev)
              echo "risk=low" >> $GITHUB_OUTPUT
              echo "timeout=1800" >> $GITHUB_OUTPUT  # 30 minutes
              ;;
            qa)
              echo "risk=moderate" >> $GITHUB_OUTPUT
              echo "timeout=3600" >> $GITHUB_OUTPUT  # 1 hour
              ;;
            prod)
              echo "risk=high" >> $GITHUB_OUTPUT
              echo "timeout=7200" >> $GITHUB_OUTPUT  # 2 hours
              ;;
            *)
              echo "risk=moderate" >> $GITHUB_OUTPUT
              echo "timeout=3600" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Validate ServiceNow Secret Wiring
        id: sn-secrets
        run: |
          echo "## 🔐 ServiceNow Configuration" >> $GITHUB_STEP_SUMMARY
          HAS_USER="${{ secrets.SN_DEVOPS_USER != '' || secrets.SERVICENOW_USERNAME != '' }}"
          HAS_PASS="${{ secrets.SN_DEVOPS_PASSWORD != '' || secrets.SERVICENOW_PASSWORD != '' }}"
          HAS_URL="${{ secrets.SN_INSTANCE_URL != '' || secrets.SERVICENOW_INSTANCE_URL != '' }}"
          HAS_TOOL="${{ secrets.SN_ORCHESTRATION_TOOL_ID != '' }}"
          echo "- Auth Mode: Basic (username/password)" >> $GITHUB_STEP_SUMMARY
          echo "- Instance URL: $([[ "$HAS_URL" == 'true' ]] && echo 'present' || echo 'missing')" >> $GITHUB_STEP_SUMMARY
          echo "- Tool Id: $([[ "$HAS_TOOL" == 'true' ]] && echo 'present' || echo 'missing')" >> $GITHUB_STEP_SUMMARY
          echo "- Username: $([[ "$HAS_USER" == 'true' ]] && echo 'present' || echo 'missing')" >> $GITHUB_STEP_SUMMARY
          echo "- Password: $([[ "$HAS_PASS" == 'true' ]] && echo 'present' || echo 'missing')" >> $GITHUB_STEP_SUMMARY

      - name: Resolve ServiceNow Inputs
        id: resolve
        run: |
          URL="${{ secrets.SN_INSTANCE_URL }}"
          if [ -z "$URL" ]; then URL="${{ secrets.SERVICENOW_INSTANCE_URL }}"; fi
          USER="${{ secrets.SN_DEVOPS_USER }}"
          if [ -z "$USER" ]; then USER="${{ secrets.SERVICENOW_USERNAME }}"; fi
          PASS="${{ secrets.SN_DEVOPS_PASSWORD }}"
          if [ -z "$PASS" ]; then PASS="${{ secrets.SERVICENOW_PASSWORD }}"; fi
          TOOL="${{ secrets.SN_ORCHESTRATION_TOOL_ID }}"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "pass=$PASS" >> $GITHUB_OUTPUT
          echo "tool=$TOOL" >> $GITHUB_OUTPUT

      - name: Build and Validate Change JSON
        id: build-json
        run: |
          ENV="${{ inputs.environment }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ACTOR="${{ github.actor }}"
          BRANCH="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"

          # Extract PR number if this is triggered by a pull request
          PR_NUMBER=""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          elif [ "${{ github.event_name }}" = "pull_request_target" ]; then
            PR_NUMBER="${{ github.event.number }}"
          fi

          # Build detailed description with GitHub context
          REPO="${{ github.repository }}"
          EVENT="${{ github.event_name }}"

          if [ -n "$PR_NUMBER" ]; then
            PR_INFO="Pull Request: #$PR_NUMBER"
            PR_URL="${{ github.server_url }}/${{ github.repository }}/pull/$PR_NUMBER"
          else
            PR_INFO="Direct Push"
            PR_URL=""
          fi

          # Build multi-line description using printf for proper newline handling
          DETAILED_DESC=$(printf "Automated deployment to %s environment via GitHub Actions\n\nGitHub Context:\n- Actor: %s\n- Branch: %s\n- Commit: %s\n- %s" \
            "$ENV" "$ACTOR" "$BRANCH" "$COMMIT_SHORT" "$PR_INFO")

          if [ -n "$PR_URL" ]; then
            DETAILED_DESC=$(printf "%s\n- PR URL: %s" "$DETAILED_DESC" "$PR_URL")
          fi

          DETAILED_DESC=$(printf "%s\n\nWorkflow Run: %s\nRepository: %s\nEvent: %s" \
            "$DETAILED_DESC" "$RUN_URL" "$REPO" "$EVENT")

          # Build short description
          if [ -n "$PR_NUMBER" ]; then
            SHORT_DESC="Deploy to $ENV - PR #$PR_NUMBER by $ACTOR"
          else
            SHORT_DESC="Deploy to $ENV - $BRANCH by $ACTOR"
          fi

          # Build implementation, backout, and test plans
          IMPL_PLAN="Automated deployment to $ENV environment via GitHub Actions CI/CD pipeline. All tests passed in previous pipeline stages. Deployment will occur within the change window."
          BACKOUT_PLAN="If deployment fails or issues are detected: 1) Immediately rollback to previous version using 'kubectl rollout undo', 2) Verify rollback success, 3) Investigate root cause in logs, 4) Create incident ticket for tracking."
          TEST_PLAN="Pre-deployment: All unit tests, integration tests, and security scans passed. Post-deployment: Health checks verify all services running, smoke tests confirm critical functionality, monitoring dashboards show normal metrics."

          # Build justification based on environment
          if [ "$ENV" = "prod" ]; then
            JUSTIFICATION="Production deployment from CI/CD pipeline. All security scans passed with 0 critical findings. Code reviewed and approved via PR. Successfully tested in dev and qa environments. Rollback capability available via kubectl."
            RISK_ANALYSIS="Medium risk production deployment. Customer-facing services will be updated. Rollback available. Deployment window: off-peak hours. Monitoring enabled for immediate detection of issues."
            CAB_REQUIRED="true"
            PROD_SYSTEM="true"
            DEPLOYMENT_DURATION="10-15 minutes"
          elif [ "$ENV" = "qa" ]; then
            JUSTIFICATION="QA deployment for testing before production. All security scans passed. Changes staged for validation by QA team."
            RISK_ANALYSIS="Low risk deployment to QA environment. Non-production. Limited user base (QA team only). Rollback available via kubectl."
            CAB_REQUIRED="false"
            PROD_SYSTEM="false"
            DEPLOYMENT_DURATION="5-10 minutes"
          else
            JUSTIFICATION="Development deployment from CI/CD pipeline. All security scans passed. Automated deployment for rapid iteration."
            RISK_ANALYSIS="Low risk deployment to dev environment. Non-production. No customer impact. Rollback available via kubectl."
            CAB_REQUIRED="false"
            PROD_SYSTEM="false"
            DEPLOYMENT_DURATION="5-10 minutes"
          fi

          # Security scanners used
          SECURITY_SCANNERS="CodeQL (Go, Python, JavaScript, Java, C#), Trivy (containers + filesystem), OWASP Dependency Check, Semgrep, Gitleaks (secrets), Checkov (IaC), tfsec (Terraform)"

          # Services being deployed (12 microservices)
          SERVICES_DEPLOYED="frontend, cartservice, productcatalogservice, currencyservice, paymentservice, shippingservice, emailservice, checkoutservice, recommendationservice, adservice, loadgenerator, shoppingassistantservice"

          # Build enhanced JSON with all Tier 1 + Tier 2 fields
          CHANGE_JSON=$(jq -n \
            --arg short_desc "$SHORT_DESC" \
            --arg desc "$DETAILED_DESC" \
            --arg impl_plan "$IMPL_PLAN" \
            --arg backout_plan "$BACKOUT_PLAN" \
            --arg test_plan "$TEST_PLAN" \
            --arg justification "$JUSTIFICATION" \
            --arg risk_analysis "$RISK_ANALYSIS" \
            --arg actor "$ACTOR" \
            --arg branch "$BRANCH" \
            --arg pr "$PR_NUMBER" \
            --arg commit_short "$COMMIT_SHORT" \
            --arg commit_full "${{ github.sha }}" \
            --arg repo "${{ github.repository }}" \
            --arg source "GitHub Actions" \
            --arg correlation_id "${{ github.run_id }}" \
            --arg environment "$ENV" \
            --arg security_scanners "$SECURITY_SCANNERS" \
            --arg services "$SERVICES_DEPLOYED" \
            --arg deployment_duration "$DEPLOYMENT_DURATION" \
            --arg business_service "Online Boutique E-commerce Platform" \
            --arg assignment_group "Platform Engineering" \
            --arg cab_required "$CAB_REQUIRED" \
            --arg prod_system "$PROD_SYSTEM" \
            '{
              setCloseCode: "true",
              autoCloseChange: true,
              attributes: {
                short_description: $short_desc,
                description: $desc,
                implementation_plan: $impl_plan,
                backout_plan: $backout_plan,
                test_plan: $test_plan,
                justification: $justification,
                risk_impact_analysis: $risk_analysis,
                u_github_actor: $actor,
                u_github_branch: $branch,
                u_github_pr: $pr,
                u_github_commit: $commit_short,
                u_commit_sha: $commit_full,
                u_repository: $repo,
                u_source: $source,
                u_correlation_id: $correlation_id,
                u_environment: $environment,
                u_security_scanners: $security_scanners,
                u_services_deployed: $services,
                u_deployment_duration: $deployment_duration,
                u_rollback_available: "true",
                business_service: $business_service,
                assignment_group: $assignment_group,
                cab_required: $cab_required,
                production_system: $prod_system
              }
            }')

          # Validate JSON is parseable
          echo "$CHANGE_JSON" | jq . > /dev/null

          # Use heredoc format for multi-line output
          echo "change_json<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Output summary
          echo "✅ Change JSON built and validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Context:**" >> $GITHUB_STEP_SUMMARY
          echo "- Actor: $ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: $BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: $COMMIT_SHORT" >> $GITHUB_STEP_SUMMARY
          if [ -n "$PR_NUMBER" ]; then
            echo "- PR: #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "Preflight: Verify ServiceNow Basic Auth"
        id: sn-basic-auth-check
        run: |
          URL="${{ steps.resolve.outputs.url }}"
          USER="${{ steps.resolve.outputs.user }}"
          PASS="${{ steps.resolve.outputs.pass }}"

          # Check credentials exist
          if [ -z "$URL" ] || [ -z "$USER" ] || [ -z "$PASS" ]; then
            echo "❌ Missing ServiceNow credentials (URL/USER/PASS)." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Required secrets:" >> $GITHUB_STEP_SUMMARY
            echo "  - SN_INSTANCE_URL or SERVICENOW_INSTANCE_URL" >> $GITHUB_STEP_SUMMARY
            echo "  - SN_DEVOPS_USER or SERVICENOW_USERNAME" >> $GITHUB_STEP_SUMMARY
            echo "  - SN_DEVOPS_PASSWORD or SERVICENOW_PASSWORD" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Validate URL format (should start with https://)
          if [[ ! "$URL" =~ ^https:// ]]; then
            echo "❌ ServiceNow URL must start with 'https://' (got: ${URL:0:20}...)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Test authentication with detailed error capture
          RESPONSE=$(curl -s -w "\n%{http_code}" -u "$USER:$PASS" "$URL/api/now/table/sys_user?sysparm_limit=1")
          CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          if [ "$CODE" != "200" ]; then
            echo "❌ ServiceNow Basic auth failed (HTTP $CODE)." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tested Endpoint:** \`$URL/api/now/table/sys_user\`" >> $GITHUB_STEP_SUMMARY
            echo "**Username:** ${USER:0:3}***" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Parse error message if JSON
            if echo "$BODY" | jq . > /dev/null 2>&1; then
              ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
              echo "**ServiceNow Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            if [ "$CODE" = "401" ]; then
              echo "  - HTTP 401 = Invalid username or password" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify SERVICENOW_USERNAME and SERVICENOW_PASSWORD secrets" >> $GITHUB_STEP_SUMMARY
              echo "  - Check if user account is active in ServiceNow" >> $GITHUB_STEP_SUMMARY
            elif [ "$CODE" = "403" ]; then
              echo "  - HTTP 403 = User lacks required permissions" >> $GITHUB_STEP_SUMMARY
              echo "  - User needs 'rest_service' and 'x_snc_devops' roles" >> $GITHUB_STEP_SUMMARY
            elif [ "$CODE" = "404" ]; then
              echo "  - HTTP 404 = Invalid instance URL" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify SN_INSTANCE_URL: should be https://your-instance.service-now.com" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Check ServiceNow instance is accessible" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify credentials and URL format" >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi

          echo "✅ ServiceNow Basic auth verified (Table API)" >> $GITHUB_STEP_SUMMARY

      - name: "Create ServiceNow Change (dev) - REST API Method"
        if: ${{ inputs.environment == 'dev' }}
        id: create_dev_basic
        run: |
          echo "## 📝 Creating ServiceNow Change Request via REST API" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Write payload to file to avoid bash interpretation
          cat > /tmp/change_payload.json << 'PAYLOAD_EOF'
          ${{ steps.build-json.outputs.change_json }}
          PAYLOAD_EOF

          # Extract attributes from payload
          ATTRIBUTES=$(jq '.attributes' /tmp/change_payload.json)

          echo "Payload:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "$ATTRIBUTES" | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create change request via REST API (proven to work with basic auth)
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -u "${{ steps.resolve.outputs.user }}:${{ steps.resolve.outputs.pass }}" \
            -d "$ATTRIBUTES" \
            "${{ steps.resolve.outputs.url }}/api/now/table/change_request")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" = "201" ]; then
            CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number // "unknown"')
            CHANGE_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id // "unknown"')

            echo "change-request-number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
            echo "change-request-sys-id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

            echo "**✅ Change Request Created Successfully:**" >> $GITHUB_STEP_SUMMARY
            echo "- Number: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "- Sys ID: $CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- URL: ${{ steps.resolve.outputs.url }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "**❌ Change Request Creation Failed (HTTP $HTTP_CODE)**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq . 2>/dev/null || echo "$BODY" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: "Create ServiceNow Change (qa/prod) - REST API with Approval"
        if: ${{ inputs.environment != 'dev' }}
        id: create_gated_basic
        run: |
          echo "## 📝 Creating ServiceNow Change Request via REST API (Approval Required)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Write payload to file to avoid bash interpretation
          cat > /tmp/change_payload.json << 'PAYLOAD_EOF'
          ${{ steps.build-json.outputs.change_json }}
          PAYLOAD_EOF

          # Extract attributes from payload
          ATTRIBUTES=$(jq '.attributes' /tmp/change_payload.json)

          echo "Payload:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "$ATTRIBUTES" | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create change request via REST API (proven to work with basic auth)
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -u "${{ steps.resolve.outputs.user }}:${{ steps.resolve.outputs.pass }}" \
            -d "$ATTRIBUTES" \
            "${{ steps.resolve.outputs.url }}/api/now/table/change_request")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" = "201" ]; then
            CHANGE_NUMBER=$(echo "$BODY" | jq -r '.result.number // "unknown"')
            CHANGE_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id // "unknown"')

            echo "change-request-number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
            echo "change-request-sys-id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

            echo "**✅ Change Request Created Successfully:**" >> $GITHUB_STEP_SUMMARY
            echo "- Number: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "- Sys ID: $CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- URL: ${{ steps.resolve.outputs.url }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⏳ **Waiting for approval** - polling every 30 seconds..." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Poll for approval (qa/prod only)
            MAX_WAIT=7200  # 2 hours
            POLL_INTERVAL=30
            ELAPSED=0

            while [ $ELAPSED -lt $MAX_WAIT ]; do
              echo "Polling for approval... (${ELAPSED}s elapsed)"

              CHECK_RESPONSE=$(curl -s -w "\n%{http_code}" \
                -H "Accept: application/json" \
                -u "${{ steps.resolve.outputs.user }}:${{ steps.resolve.outputs.pass }}" \
                "${{ steps.resolve.outputs.url }}/api/now/table/change_request/$CHANGE_SYS_ID?sysparm_fields=state,approval")

              CHECK_HTTP_CODE=$(echo "$CHECK_RESPONSE" | tail -n1)
              CHECK_BODY=$(echo "$CHECK_RESPONSE" | sed '$d')

              if [ "$CHECK_HTTP_CODE" = "200" ]; then
                STATE=$(echo "$CHECK_BODY" | jq -r '.result.state // "unknown"')
                APPROVAL=$(echo "$CHECK_BODY" | jq -r '.result.approval // "unknown"')

                echo "  State: $STATE, Approval: $APPROVAL"

                # approval=approved (or state indicates implementation ready)
                if [ "$APPROVAL" = "approved" ] || [ "$STATE" = "3" ]; then
                  echo "✅ **Change Request Approved!**" >> $GITHUB_STEP_SUMMARY
                  echo "  Proceeding with deployment..." >> $GITHUB_STEP_SUMMARY
                  break
                elif [ "$APPROVAL" = "rejected" ]; then
                  echo "❌ **Change Request Rejected**" >> $GITHUB_STEP_SUMMARY
                  exit 1
                fi
              fi

              sleep $POLL_INTERVAL
              ELAPSED=$((ELAPSED + POLL_INTERVAL))
            done

            if [ $ELAPSED -ge $MAX_WAIT ]; then
              echo "⏱️ **Timeout: Change request not approved within 2 hours**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "**❌ Change Request Creation Failed (HTTP $HTTP_CODE)**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BODY" | jq . 2>/dev/null || echo "$BODY" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Fetch Change Request Details
        id: fetch-change
        run: |
          echo "## 🔎 Fetching Change Request Details" >> $GITHUB_STEP_SUMMARY
          NUM_DEV_BASIC="${{ steps.create_dev_basic.outputs['change-request-number'] }}"
          SYS_DEV_BASIC="${{ steps.create_dev_basic.outputs['change-request-sys-id'] }}"
          NUM_GATED_BASIC="${{ steps.create_gated_basic.outputs['change-request-number'] }}"
          SYS_GATED_BASIC="${{ steps.create_gated_basic.outputs['change-request-sys-id'] }}"

          NUM=${NUM_DEV_BASIC:-}
          SYS=${SYS_DEV_BASIC:-}
          if [ -z "$NUM" ] || [ "$NUM" = "null" ]; then NUM=${NUM_GATED_BASIC:-}; SYS=${SYS_GATED_BASIC:-}; fi

          if [ -z "$NUM" ] || [ -z "$SYS" ] || [ "$NUM" = "null" ] || [ "$SYS" = "null" ]; then
            echo "❌ ERROR: ServiceNow action did not return change request details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "**Expected Outputs:**" >> $GITHUB_STEP_SUMMARY
            echo "  - change-request-number: ${NUM:-<missing>}" >> $GITHUB_STEP_SUMMARY
            echo "  - change-request-sys-id: ${SYS:-<missing>}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            echo "  1. Check previous step logs for ServiceNow API errors" >> $GITHUB_STEP_SUMMARY
            echo "  2. Verify Tool ID exists and is active in ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "  3. Verify user has 'sn_devops.devops_user' role" >> $GITHUB_STEP_SUMMARY
            echo "  4. Check ServiceNow Change API is responding: /api/sn_devops/devops/orchestration/changeInfo" >> $GITHUB_STEP_SUMMARY
            echo "  5. Review ServiceNow DevOps application logs" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "change_request_number=$NUM" >> $GITHUB_OUTPUT
          echo "change_request_sys_id=$SYS" >> $GITHUB_OUTPUT
          echo "change_status=success" >> $GITHUB_OUTPUT
          echo "✅ Change request created: $NUM" >> $GITHUB_STEP_SUMMARY
          echo "Sys ID: $SYS" >> $GITHUB_STEP_SUMMARY

      - name: Validate Change Request Creation
        run: |
          CHANGE_NUMBER="${{ steps.fetch-change.outputs.change_request_number }}"
          CHANGE_SYS_ID="${{ steps.fetch-change.outputs.change_request_sys_id }}"
          echo "## ✅ Change Request Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Number | **$CHANGE_NUMBER** |" >> $GITHUB_STEP_SUMMARY
          echo "| Sys ID | \`$CHANGE_SYS_ID\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | **${{ inputs.environment }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Risk Level | ${{ steps.risk.outputs.risk }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow](${{ steps.resolve.outputs.url }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [DevOps Workspace](${{ steps.resolve.outputs.url }}/now/devops-change/home)" >> $GITHUB_STEP_SUMMARY

  # Job 4: Register Work Items in ServiceNow DevOps Table
  register-work-items:
    name: Register Work Items in DevOps Table
    runs-on: ubuntu-latest
    needs: [extract-work-items, create-change-request]
    if: always() && needs.create-change-request.outputs.change_request_sys_id != '' && needs.extract-work-items.outputs.issue_count != '0'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Resolve ServiceNow Inputs
        id: resolve_work
        run: |
          URL="${{ secrets.SN_INSTANCE_URL }}"
          if [ -z "$URL" ]; then URL="${{ secrets.SERVICENOW_INSTANCE_URL }}"; fi
          USER="${{ secrets.SN_DEVOPS_USER }}"
          if [ -z "$USER" ]; then USER="${{ secrets.SERVICENOW_USERNAME }}"; fi
          PASS="${{ secrets.SN_DEVOPS_PASSWORD }}"
          if [ -z "$PASS" ]; then PASS="${{ secrets.SERVICENOW_PASSWORD }}"; fi
          TOOL="${{ secrets.SN_ORCHESTRATION_TOOL_ID }}"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "pass=$PASS" >> $GITHUB_OUTPUT
          echo "tool=$TOOL" >> $GITHUB_OUTPUT

      - name: Register GitHub Issues as Work Items
        env:
          GH_TOKEN: ${{ github.token }}
          CHANGE_SYS_ID: ${{ needs.create-change-request.outputs.change_request_sys_id }}
          ISSUE_NUMBERS: ${{ needs.extract-work-items.outputs.issue_numbers }}
          TOOL_ID: ${{ steps.resolve_work.outputs.tool }}
          SN_URL: ${{ steps.resolve_work.outputs.url }}
          SN_USER: ${{ steps.resolve_work.outputs.user }}
          SN_PASS: ${{ steps.resolve_work.outputs.pass }}
        run: |
          echo "## 📋 Registering Work Items in ServiceNow DevOps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -z "$ISSUE_NUMBERS" ]; then
            echo "ℹ️  No work items to register" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Split issue numbers by comma
          IFS=',' read -ra ISSUES <<< "$ISSUE_NUMBERS"
          REGISTERED_COUNT=0

          for issue_num in "${ISSUES[@]}"; do
            # Skip empty values
            if [ -z "$issue_num" ]; then
              continue
            fi

            # Fetch issue details from GitHub
            echo "Fetching Issue #$issue_num..."
            ISSUE_DATA=$(gh issue view $issue_num --json number,title,url,state,labels 2>/dev/null || echo "")

            if [ -z "$ISSUE_DATA" ] || [ "$ISSUE_DATA" = "null" ]; then
              echo "⚠️  Issue #$issue_num not found, skipping" >> $GITHUB_STEP_SUMMARY
              continue
            fi

            ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
            ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url')
            ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state')

            # Map GitHub state to ServiceNow state
            case "$ISSUE_STATE" in
              open) SN_STATE="open" ;;
              closed) SN_STATE="closed" ;;
              *) SN_STATE="open" ;;
            esac

            # Create work item payload
            WORK_ITEM_PAYLOAD=$(jq -n \
              --arg name "$ISSUE_TITLE" \
              --arg type "issue" \
              --arg url "$ISSUE_URL" \
              --arg state "$SN_STATE" \
              --arg tool_id "$TOOL_ID" \
              --arg native_id "$issue_num" \
              --arg external_id "$issue_num" \
              '{
                name: $name,
                type: $type,
                url: $url,
                state: $state,
                tool_id: $tool_id,
                native_id: $native_id,
                id: $external_id,
                record_type: "Work item",
                active: "true"
              }')

            echo "Creating work item for Issue #$issue_num: $ISSUE_TITLE"
            echo "Payload: $WORK_ITEM_PAYLOAD"

            # Create work item in ServiceNow
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -u "$SN_USER:$SN_PASS" \
              -d "$WORK_ITEM_PAYLOAD" \
              "$SN_URL/api/now/table/sn_devops_work_item")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            if [ "$HTTP_CODE" == "201" ]; then
              WI_NUMBER=$(echo "$BODY" | jq -r '.result.number // "Unknown"')
              WI_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id // ""')
              echo "✅ Created: $WI_NUMBER (Issue #$issue_num)" >> $GITHUB_STEP_SUMMARY
              REGISTERED_COUNT=$((REGISTERED_COUNT + 1))
            else
              echo "⚠️  Failed to create work item for Issue #$issue_num (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY

              # Parse and show ServiceNow error if available
              if echo "$BODY" | jq . > /dev/null 2>&1; then
                ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
                ERROR_DETAIL=$(echo "$BODY" | jq -r '.error.detail // ""' 2>/dev/null)
                echo "  **Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
                if [ -n "$ERROR_DETAIL" ] && [ "$ERROR_DETAIL" != "null" ]; then
                  echo "  **Detail:** $ERROR_DETAIL" >> $GITHUB_STEP_SUMMARY
                fi
              fi

              # Common HTTP status code explanations
              if [ "$HTTP_CODE" = "403" ]; then
                echo "  **Cause:** User lacks permission to create work items" >> $GITHUB_STEP_SUMMARY
                echo "  **Fix:** Add 'sn_devops.devops_user' role to user" >> $GITHUB_STEP_SUMMARY
              elif [ "$HTTP_CODE" = "404" ]; then
                echo "  **Cause:** sn_devops_work_item table not found" >> $GITHUB_STEP_SUMMARY
                echo "  **Fix:** Install ServiceNow DevOps application" >> $GITHUB_STEP_SUMMARY
              elif [ "$HTTP_CODE" = "400" ]; then
                echo "  **Cause:** Invalid work item payload" >> $GITHUB_STEP_SUMMARY
                echo "  **Fix:** Check payload format in workflow logs" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Work Items Registered**: $REGISTERED_COUNT / ${#ISSUES[@]}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Work Items]($SN_URL/now/nav/ui/classic/params/target/sn_devops_work_item_list.do)" >> $GITHUB_STEP_SUMMARY

  # Job 5: Upload Security Evidence to Change Request
  upload-security-evidence:
    name: Upload Security Evidence
    runs-on: ubuntu-latest
    needs: create-change-request
    if: always() && needs.create-change-request.outputs.change_request_sys_id != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Resolve ServiceNow Inputs
        id: resolve_evidence
        run: |
          URL="${{ secrets.SN_INSTANCE_URL }}"
          if [ -z "$URL" ]; then URL="${{ secrets.SERVICENOW_INSTANCE_URL }}"; fi
          USER="${{ secrets.SN_DEVOPS_USER }}"
          if [ -z "$USER" ]; then USER="${{ secrets.SERVICENOW_USERNAME }}"; fi
          PASS="${{ secrets.SN_DEVOPS_PASSWORD }}"
          if [ -z "$PASS" ]; then PASS="${{ secrets.SERVICENOW_PASSWORD }}"; fi
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "pass=$PASS" >> $GITHUB_OUTPUT

      - name: Download security scan artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload Security Evidence Files
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ steps.resolve_evidence.outputs.user }}:${{ steps.resolve_evidence.outputs.pass }}" | base64)

          echo "📤 Uploading security evidence to Change Request $CHANGE_NUMBER..."

          UPLOADED_COUNT=0

          # Upload security evidence report
          if [ -f "security-scan-evidence/security-scan-evidence.md" ]; then
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@security-scan-evidence/security-scan-evidence.md" \
              -F "file_name=security-scan-evidence-${{ github.run_number }}.md" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ steps.resolve_evidence.outputs.url }}/api/now/attachment/upload")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            if [ "$HTTP_CODE" == "201" ]; then
              echo "✅ Uploaded: security-scan-evidence.md" >> $GITHUB_STEP_SUMMARY
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            else
              echo "⚠️  Failed to upload security-scan-evidence.md (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
              if echo "$BODY" | jq . > /dev/null 2>&1; then
                ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
                echo "  **Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

          # Upload SARIF files
          shopt -s nullglob  # Prevent errors if no .sarif files exist
          for sarif_file in security-scan-evidence/*.sarif; do
            if [ -f "$sarif_file" ]; then
              RESPONSE=$(curl -s -w "\n%{http_code}" \
                -H "Authorization: Basic $BASIC_AUTH" \
                -F "file=@$sarif_file" \
                -F "table_name=change_request" \
                -F "table_sys_id=$CHANGE_SYS_ID" \
                "${{ steps.resolve_evidence.outputs.url }}/api/now/attachment/upload")
              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | sed '$d')

              if [ "$HTTP_CODE" == "201" ]; then
                echo "✅ Uploaded: $(basename $sarif_file)" >> $GITHUB_STEP_SUMMARY
                UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
              else
                echo "⚠️  Failed to upload $(basename $sarif_file) (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
                if echo "$BODY" | jq . > /dev/null 2>&1; then
                  ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
                  echo "  **Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            fi
          done
          shopt -u nullglob  # Restore default behavior

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ UPLOADED $UPLOADED_COUNT FILES TO SERVICENOW"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Add Work Note with Security Summary
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          STATUS="${{ inputs.security_scan_status }}"
          FINDINGS="${{ inputs.security_findings }}"
          WORKFLOW="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Build status message based on scan results
          if [ "$STATUS" == "PASSED" ]; then
            STATUS_MSG="✅ All security scans passed - Safe to proceed"
          elif [ "$STATUS" == "FAILED" ]; then
            STATUS_MSG="⚠️ REVIEW REQUIRED: $FINDINGS findings detected"
          else
            STATUS_MSG="ℹ️ Security scans completed - review attached evidence"
          fi

          # Create work note payload
          WORK_NOTE="🔒 SECURITY SCAN EVIDENCE UPLOADED\n\nSecurity Scan Status: $STATUS\n$STATUS_MSG\n\nEvidence: SARIF results + summary report\nWorkflow: $WORKFLOW\nCompliance: SOC 2 CC7.1 security controls"
          PAYLOAD=$(jq -n --arg note "$WORK_NOTE" '{work_notes: $note}')

          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -u "${{ steps.resolve_evidence.outputs.user }}:${{ steps.resolve_evidence.outputs.pass }}" \
            -d "$PAYLOAD" \
            "${{ steps.resolve_evidence.outputs.url }}/api/now/table/change_request/$CHANGE_SYS_ID")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" == "200" ]; then
            echo "✅ Work note added to change request" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Failed to add work note to change request (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Parse error message if JSON
            if echo "$BODY" | jq . > /dev/null 2>&1; then
              ERROR_MSG=$(echo "$BODY" | jq -r '.error.message // .error // "Unknown error"' 2>/dev/null)
              echo "**ServiceNow Error:** $ERROR_MSG" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            if [ "$HTTP_CODE" = "403" ]; then
              echo "  - HTTP 403 = User lacks permission to update change requests" >> $GITHUB_STEP_SUMMARY
              echo "  - User needs write access to change_request table" >> $GITHUB_STEP_SUMMARY
            elif [ "$HTTP_CODE" = "404" ]; then
              echo "  - HTTP 404 = Change request not found" >> $GITHUB_STEP_SUMMARY
              echo "  - Verify change_request_sys_id: $CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Verify ServiceNow API is accessible" >> $GITHUB_STEP_SUMMARY
              echo "  - Check change request exists in ServiceNow" >> $GITHUB_STEP_SUMMARY
            fi

            # Don't fail the workflow - work note is optional enhancement
            exit 0
          fi

  # Job 5: Register Security Scan Results
  # REMOVED: servicenow-devops-security-result action (API endpoint does not exist)
  #
  # After extensive research and API testing, discovered that:
  # - The ServiceNow DevOps Security Plugin required for this action does NOT exist as a publicly available plugin
  # - API endpoint /api/sn_devops/devops/security/result returns "Requested URI does not represent any resource"
  # - GitHub Action reports SUCCESS but no data is stored in ServiceNow (confirmed via verification script)
  #
  # Alternative implementation (WORKING):
  # - Job 3 "upload-security-evidence" already uploads SARIF files as attachments to change requests
  # - Job 3 already adds work notes with security scan summary
  # - This provides the same business value without requiring special plugins
  #
  # References:
  # - docs/SERVICENOW-SECURITY-TOOLS-VERIFICATION.md - Complete investigation
  # - docs/SERVICENOW-GITHUB-VULNERABILITY-INTEGRATION.md - Plugin comparison
  # - scripts/verify-security-tools.sh - Verification tool
