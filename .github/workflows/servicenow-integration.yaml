---
name: "ServiceNow DevOps Integration (Reusable)"

"on":
  workflow_call:
    inputs:
      environment:
        description: 'Environment being deployed (dev/qa/prod)'
        required: true
        type: string
      change_type:
        description: 'Type of change (normal/standard/emergency)'
        required: false
        type: string
        default: 'normal'
      security_scan_status:
        description: 'Overall security scan status (PASSED/FAILED/UNKNOWN)'
        required: false
        type: string
        default: 'UNKNOWN'
      security_findings:
        description: 'Number of security findings'
        required: false
        type: string
        default: '0'
    outputs:
      change_request_number:
        description: "ServiceNow change request number"
        value: ${{ jobs.create-change-request.outputs.change_request_number }}
      change_request_sys_id:
        description: "ServiceNow change request sys_id"
        value: ${{ jobs.create-change-request.outputs.change_request_sys_id }}
      change_status:
        description: "Change request status"
        value: ${{ jobs.create-change-request.outputs.change_status }}

permissions:
  contents: read

env:
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}

jobs:
  # Job 1: Register Build Artifacts in ServiceNow DevOps
  register-artifacts:
    name: Register Artifacts in ServiceNow
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Register Docker Images as Artifacts
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Artifacts in ServiceNow'
          artifacts: |
            [
              {"name": "online-boutique-frontend", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-cartservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-productcatalogservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-currencyservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-paymentservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-shippingservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-emailservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-checkoutservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-recommendationservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-adservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-loadgenerator", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"},
              {"name": "online-boutique-shoppingassistantservice", "version": "1.0.${{ github.run_number }}", "semanticVersion": "1.0.${{ github.run_number }}", "repositoryName": "${{ github.repository }}"}
            ]

      - name: Artifact Registration Summary
        if: always()
        run: |
          echo "## 📦 Artifacts Registered in ServiceNow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| online-boutique (12 services) | 1.0.${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow DevOps](${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/insights-home)" >> $GITHUB_STEP_SUMMARY

  # Job 2: Extract Work Items (GitHub Issues)
  extract-work-items:
    name: Extract Work Item Evidence
    runs-on: ubuntu-latest
    needs: register-artifacts
    outputs:
      issue_numbers: ${{ steps.extract.outputs.issue_numbers }}
      issue_count: ${{ steps.extract.outputs.issue_count }}
      work_items_summary: ${{ steps.extract.outputs.work_items_summary }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Fetch enough history to find recent merges

      - name: Extract GitHub Issues from PRs and Commits
        id: extract
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## 📋 Extracting Work Item Evidence" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get recent merged PRs (last 10, within last 24 hours)
          MERGED_PRS=$(gh pr list --state merged --base main --json number,mergedAt \
            --jq '.[] | select(.mergedAt > (now - 86400)) | .number' | head -10)

          ISSUE_NUMBERS=""
          WORK_ITEMS_HTML="<h3>📋 Work Items in This Deployment:</h3><ul>"
          WORK_ITEMS_TEXT=""
          ISSUE_COUNT=0

          # If no PRs, extract from recent commits (last 10)
          if [ -z "$MERGED_PRS" ]; then
            echo "ℹ️  No recently merged PRs found, checking commit messages..." >> $GITHUB_STEP_SUMMARY

            # Get last 10 commits
            COMMIT_MESSAGES=$(git log --pretty=format:"%s %b" -10 2>/dev/null || echo "")

            if [ -n "$COMMIT_MESSAGES" ]; then
              # Extract issue numbers from commit messages
              FOUND_ISSUES=$(echo "$COMMIT_MESSAGES" | grep -oE "(#|[Ff]ixes #|[Cc]loses #|[Rr]esolves #)[0-9]+" | grep -oE "[0-9]+" | sort -u)

              if [ -n "$FOUND_ISSUES" ]; then
                for issue_num in $FOUND_ISSUES; do
                  # Get issue details
                  ISSUE_DATA=$(gh issue view $issue_num --json title,state,labels,url 2>/dev/null || true)

                  if [ -z "$ISSUE_DATA" ]; then
                    continue
                  fi

                  ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title // "Unknown"')
                  ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state // "unknown"')
                  ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url // ""')
                  ISSUE_LABELS=$(echo "$ISSUE_DATA" | jq -r '[.labels[].name] | join(", ") // "none"')

                  # Add to lists
                  if [ -z "$ISSUE_NUMBERS" ]; then
                    ISSUE_NUMBERS="$issue_num"
                  else
                    ISSUE_NUMBERS="$ISSUE_NUMBERS,$issue_num"
                  fi

                  # Build HTML summary
                  WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><strong><a href=\"$ISSUE_URL\">Issue #$issue_num</a>: $ISSUE_TITLE</strong><br>"
                  WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<em>Status:</em> $ISSUE_STATE | <em>Labels:</em> $ISSUE_LABELS | <em>Source:</em> Direct commit</li>"

                  ISSUE_COUNT=$((ISSUE_COUNT + 1))

                  echo "✅ Found Issue #$issue_num from commits: $ISSUE_TITLE" >> $GITHUB_STEP_SUMMARY
                done
              fi
            fi

            # If still no work items found
            if [ "$ISSUE_COUNT" -eq "0" ]; then
              WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><em>No work items linked (direct push to main without issue references)</em></li>"
              WORK_ITEMS_TEXT="No work items linked (direct push to main)"
            fi
          else
            for pr_number in $MERGED_PRS; do
              # Get PR details
              PR_DATA=$(gh pr view $pr_number --json title,body,url,author 2>/dev/null || true)

              if [ -z "$PR_DATA" ]; then
                continue
              fi

              PR_TITLE=$(echo "$PR_DATA" | jq -r '.title // "Unknown"')
              PR_BODY=$(echo "$PR_DATA" | jq -r '.body // ""')
              PR_URL=$(echo "$PR_DATA" | jq -r '.url // ""')
              PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login // "unknown"')

              # Extract issue numbers (matches: #123, Fixes #456, Closes #789, Resolves #101)
              FOUND_ISSUES=$(echo "$PR_TITLE $PR_BODY" | grep -oE "(#|[Ff]ixes #|[Cc]loses #|[Rr]esolves #)[0-9]+" | grep -oE "[0-9]+" | sort -u)

              for issue_num in $FOUND_ISSUES; do
                # Skip if already processed
                if echo "$ISSUE_NUMBERS" | grep -q "\b$issue_num\b"; then
                  continue
                fi

                # Get issue details
                ISSUE_DATA=$(gh issue view $issue_num --json title,state,labels,url 2>/dev/null || true)

                if [ -z "$ISSUE_DATA" ]; then
                  continue
                fi

                ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title // "Unknown"')
                ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state // "unknown"')
                ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url // ""')
                ISSUE_LABELS=$(echo "$ISSUE_DATA" | jq -r '[.labels[].name] | join(", ") // "none"')

                # Add to lists
                if [ -z "$ISSUE_NUMBERS" ]; then
                  ISSUE_NUMBERS="$issue_num"
                else
                  ISSUE_NUMBERS="$ISSUE_NUMBERS,$issue_num"
                fi

                # Build HTML summary
                WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<li><strong><a href=\"$ISSUE_URL\">Issue #$issue_num</a>: $ISSUE_TITLE</strong><br>"
                WORK_ITEMS_HTML="${WORK_ITEMS_HTML}<em>Status:</em> $ISSUE_STATE | <em>Labels:</em> $ISSUE_LABELS | <em>PR:</em> <a href=\"$PR_URL\">#$pr_number</a></li>"

                # Build text summary
                WORK_ITEMS_TEXT="${WORK_ITEMS_TEXT}\n- Issue #$issue_num: $ISSUE_TITLE\n  Status: $ISSUE_STATE | Labels: $ISSUE_LABELS | PR: #$pr_number"

                ISSUE_COUNT=$((ISSUE_COUNT + 1))

                echo "✅ Found Issue #$issue_num: $ISSUE_TITLE" >> $GITHUB_STEP_SUMMARY
              done
            done
          fi

          WORK_ITEMS_HTML="${WORK_ITEMS_HTML}</ul>"

          # Set outputs
          echo "issue_numbers=$ISSUE_NUMBERS" >> $GITHUB_OUTPUT
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          # URL encode the HTML for safe passing
          WORK_ITEMS_HTML_ENCODED=$(echo "$WORK_ITEMS_HTML" | jq -sRr @uri)
          echo "work_items_summary=$WORK_ITEMS_HTML_ENCODED" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Work Items Found:** $ISSUE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Issue Numbers:** $ISSUE_NUMBERS" >> $GITHUB_STEP_SUMMARY

  # Job 3: Create ServiceNow Change Request
  create-change-request:
    name: Create ServiceNow Change Request
    runs-on: ubuntu-latest
    needs: [register-artifacts, extract-work-items]
    outputs:
      change_request_number: ${{ steps.fetch-change.outputs.change_request_number }}
      change_request_sys_id: ${{ steps.fetch-change.outputs.change_request_sys_id }}
      change_status: ${{ steps.fetch-change.outputs.change_status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Change Risk Level
        id: risk
        run: |
          # Set risk level based on environment
          case "${{ inputs.environment }}" in
            dev)
              echo "risk=low" >> $GITHUB_OUTPUT
              echo "timeout=1800" >> $GITHUB_OUTPUT  # 30 minutes
              ;;
            qa)
              echo "risk=moderate" >> $GITHUB_OUTPUT
              echo "timeout=3600" >> $GITHUB_OUTPUT  # 1 hour
              ;;
            prod)
              echo "risk=high" >> $GITHUB_OUTPUT
              echo "timeout=7200" >> $GITHUB_OUTPUT  # 2 hours
              ;;
            *)
              echo "risk=moderate" >> $GITHUB_OUTPUT
              echo "timeout=3600" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: "Create ServiceNow Change (dev: no gate)"
        if: ${{ inputs.environment == 'dev' }}
        uses: ServiceNow/servicenow-devops-change-automation@v6.0.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          change-request-json: |
            {"type":"${{ inputs.change_type }}",
             "short_description":"Deploy Online Boutique to ${{ inputs.environment }}",
             "description":"Automated deployment via GitHub Actions. Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
             "u_environment":"${{ inputs.environment }}",
             "u_correlation_id":"${{ github.run_id }}"}

      - name: "Create ServiceNow Change (qa/prod with deployment gate)"
        if: ${{ inputs.environment != 'dev' }}
        uses: ServiceNow/servicenow-devops-change-automation@v6.0.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          deployment-gate: |
            {"environment":"${{ inputs.environment }}","jobName":"deploy-to-environment"}
          change-request-json: |
            {"type":"${{ inputs.change_type }}",
             "short_description":"Deploy Online Boutique to ${{ inputs.environment }}",
             "description":"Automated deployment via GitHub Actions. Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
             "u_environment":"${{ inputs.environment }}",
             "u_correlation_id":"${{ github.run_id }}"}

      - name: Fetch Change Request Details
        id: fetch-change
        run: |
          echo "## 🔎 Fetching Change Request Details" >> $GITHUB_STEP_SUMMARY
          QUERY_URL="${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request?sysparm_query=u_correlation_id=${{ github.run_id }}^ORDERBYDESCsys_created_on&sysparm_limit=1"
          RESP=$(curl -s -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" "$QUERY_URL")
          NUM=$(echo "$RESP" | jq -r '.result[0].number // empty')
          SYS=$(echo "$RESP" | jq -r '.result[0].sys_id // empty')
          if [ -z "$NUM" ] || [ -z "$SYS" ]; then
            echo "❌ ERROR: Unable to retrieve change request by correlation id" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "change_request_number=$NUM" >> $GITHUB_OUTPUT
          echo "change_request_sys_id=$SYS" >> $GITHUB_OUTPUT
          echo "change_status=success" >> $GITHUB_OUTPUT
          echo "✅ Change request created: $NUM" >> $GITHUB_STEP_SUMMARY
          echo "Sys ID: $SYS" >> $GITHUB_STEP_SUMMARY

      - name: Validate Change Request Creation
        run: |
          CHANGE_NUMBER="${{ steps.fetch-change.outputs.change_request_number }}"
          CHANGE_SYS_ID="${{ steps.fetch-change.outputs.change_request_sys_id }}"
          echo "## ✅ Change Request Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Number | **$CHANGE_NUMBER** |" >> $GITHUB_STEP_SUMMARY
          echo "| Sys ID | \`$CHANGE_SYS_ID\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | **${{ inputs.environment }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Risk Level | ${{ steps.risk.outputs.risk }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View in ServiceNow](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [DevOps Workspace](${{ secrets.SERVICENOW_INSTANCE_URL }}/now/devops-change/home)" >> $GITHUB_STEP_SUMMARY

  # Job 4: Register Work Items in ServiceNow DevOps Table
  register-work-items:
    name: Register Work Items in DevOps Table
    runs-on: ubuntu-latest
    needs: [extract-work-items, create-change-request]
    if: |
      always() &&
      needs.create-change-request.outputs.change_request_sys_id != '' &&
      needs.extract-work-items.outputs.issue_count != '0'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Register GitHub Issues as Work Items
        env:
          GH_TOKEN: ${{ github.token }}
          CHANGE_SYS_ID: ${{ needs.create-change-request.outputs.change_request_sys_id }}
          ISSUE_NUMBERS: ${{ needs.extract-work-items.outputs.issue_numbers }}
          TOOL_ID: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        run: |
          echo "## 📋 Registering Work Items in ServiceNow DevOps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -z "$ISSUE_NUMBERS" ]; then
            echo "ℹ️  No work items to register" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Split issue numbers by comma
          IFS=',' read -ra ISSUES <<< "$ISSUE_NUMBERS"
          REGISTERED_COUNT=0

          for issue_num in "${ISSUES[@]}"; do
            # Skip empty values
            if [ -z "$issue_num" ]; then
              continue
            fi

            # Fetch issue details from GitHub
            echo "Fetching Issue #$issue_num..."
            ISSUE_DATA=$(gh issue view $issue_num --json number,title,url,state,labels 2>/dev/null || echo "")

            if [ -z "$ISSUE_DATA" ] || [ "$ISSUE_DATA" = "null" ]; then
              echo "⚠️  Issue #$issue_num not found, skipping" >> $GITHUB_STEP_SUMMARY
              continue
            fi

            ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
            ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url')
            ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state')

            # Map GitHub state to ServiceNow state
            case "$ISSUE_STATE" in
              open) SN_STATE="open" ;;
              closed) SN_STATE="closed" ;;
              *) SN_STATE="open" ;;
            esac

            # Create work item payload
            WORK_ITEM_PAYLOAD=$(jq -n \
              --arg name "$ISSUE_TITLE" \
              --arg type "issue" \
              --arg url "$ISSUE_URL" \
              --arg state "$SN_STATE" \
              --arg tool_id "$TOOL_ID" \
              --arg native_id "$issue_num" \
              --arg external_id "$issue_num" \
              '{
                name: $name,
                type: $type,
                url: $url,
                state: $state,
                tool_id: $tool_id,
                native_id: $native_id,
                id: $external_id,
                record_type: "Work item",
                active: "true"
              }')

            echo "Creating work item for Issue #$issue_num: $ISSUE_TITLE"
            echo "Payload: $WORK_ITEM_PAYLOAD"

            # Create work item in ServiceNow
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              -d "$WORK_ITEM_PAYLOAD" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/sn_devops_work_item")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            if [ "$HTTP_CODE" == "201" ]; then
              WI_NUMBER=$(echo "$BODY" | jq -r '.result.number // "Unknown"')
              WI_SYS_ID=$(echo "$BODY" | jq -r '.result.sys_id // ""')
              echo "✅ Created: $WI_NUMBER (Issue #$issue_num)" >> $GITHUB_STEP_SUMMARY
              REGISTERED_COUNT=$((REGISTERED_COUNT + 1))
            else
              echo "⚠️  Failed to create work item for Issue #$issue_num (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Work Items Registered**: $REGISTERED_COUNT / ${#ISSUES[@]}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Work Items](${{ secrets.SERVICENOW_INSTANCE_URL }}/now/nav/ui/classic/params/target/sn_devops_work_item_list.do)" >> $GITHUB_STEP_SUMMARY

  # Job 5: Upload Security Evidence to Change Request
  upload-security-evidence:
    name: Upload Security Evidence
    runs-on: ubuntu-latest
    needs: create-change-request
    if: always() && needs.create-change-request.outputs.change_request_sys_id != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security scan artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Upload Security Evidence Files
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          echo "📤 Uploading security evidence to Change Request $CHANGE_NUMBER..."

          UPLOADED_COUNT=0

          # Upload security evidence report
          if [ -f "security-scan-evidence/security-scan-evidence.md" ]; then
            curl -s -w "\n%{http_code}" \
              -H "Authorization: Basic $BASIC_AUTH" \
              -F "file=@security-scan-evidence/security-scan-evidence.md" \
              -F "file_name=security-scan-evidence-${{ github.run_number }}.md" \
              -F "table_name=change_request" \
              -F "table_sys_id=$CHANGE_SYS_ID" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
            echo "✅ Uploaded: security-scan-evidence.md"
            UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
          fi

          # Upload SARIF files
          shopt -s nullglob  # Prevent errors if no .sarif files exist
          for sarif_file in security-scan-evidence/*.sarif; do
            if [ -f "$sarif_file" ]; then
              curl -s -w "\n%{http_code}" \
                -H "Authorization: Basic $BASIC_AUTH" \
                -F "file=@$sarif_file" \
                -F "table_name=change_request" \
                -F "table_sys_id=$CHANGE_SYS_ID" \
                "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/attachment/upload" > /dev/null
              echo "✅ Uploaded: $(basename $sarif_file)"
              UPLOADED_COUNT=$((UPLOADED_COUNT + 1))
            fi
          done
          shopt -u nullglob  # Restore default behavior

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ UPLOADED $UPLOADED_COUNT FILES TO SERVICENOW"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Add Work Note with Security Summary
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          STATUS="${{ inputs.security_scan_status }}"
          FINDINGS="${{ inputs.security_findings }}"
          WORKFLOW="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Build status message based on scan results
          if [ "$STATUS" == "PASSED" ]; then
            STATUS_MSG="✅ All security scans passed - Safe to proceed"
          elif [ "$STATUS" == "FAILED" ]; then
            STATUS_MSG="⚠️ REVIEW REQUIRED: $FINDINGS findings detected"
          else
            STATUS_MSG="ℹ️ Security scans completed - review attached evidence"
          fi

          # Create work note payload
          WORK_NOTE="🔒 SECURITY SCAN EVIDENCE UPLOADED\n\nSecurity Scan Status: $STATUS\n$STATUS_MSG\n\nEvidence: SARIF results + summary report\nWorkflow: $WORKFLOW\nCompliance: SOC 2 CC7.1 security controls"
          PAYLOAD=$(jq -n --arg note "$WORK_NOTE" '{work_notes: $note}')

          curl -s -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" > /dev/null

          echo "✅ Work note added to change request" >> $GITHUB_STEP_SUMMARY

  # Job 5: Register Security Scan Results
  # REMOVED: servicenow-devops-security-result action (API endpoint does not exist)
  #
  # After extensive research and API testing, discovered that:
  # - The ServiceNow DevOps Security Plugin required for this action does NOT exist as a publicly available plugin
  # - API endpoint /api/sn_devops/devops/security/result returns "Requested URI does not represent any resource"
  # - GitHub Action reports SUCCESS but no data is stored in ServiceNow (confirmed via verification script)
  #
  # Alternative implementation (WORKING):
  # - Job 3 "upload-security-evidence" already uploads SARIF files as attachments to change requests
  # - Job 3 already adds work notes with security scan summary
  # - This provides the same business value without requiring special plugins
  #
  # References:
  # - docs/SERVICENOW-SECURITY-TOOLS-VERIFICATION.md - Complete investigation
  # - docs/SERVICENOW-GITHUB-VULNERABILITY-INTEGRATION.md - Plugin comparison
  # - scripts/verify-security-tools.sh - Verification tool
