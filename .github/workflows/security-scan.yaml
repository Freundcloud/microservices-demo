---
name: "Security Scanning (Reusable)"

"on":
  workflow_call:  # Primary trigger for reusable workflow
  workflow_dispatch:  # Allow manual runs for testing

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis for multiple languages
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript', 'go', 'java', 'csharp']

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        if: matrix.language != 'java'

      - name: Setup Java 21
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Java services
        if: matrix.language == 'java'
        run: |
          # Build adservice (Java with Gradle)
          cd src/adservice
          chmod +x gradlew
          ./gradlew build -x test -x verifyGoogleJavaFormat --no-daemon

          # Build shopping assistant service
          cd ../shoppingassistantservice
          chmod +x gradlew
          ./gradlew build -x test -x verifyGoogleJavaFormat --no-daemon
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Dependency scanning - runs on all events to detect vulnerabilities
  dependency-review:
    name: Dependency Review & Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ steps.test-summary.outputs.test_result }}
      critical_count: ${{ steps.test-summary.outputs.critical_count }}
      high_count: ${{ steps.test-summary.outputs.high_count }}
      medium_count: ${{ steps.test-summary.outputs.medium_count }}
      low_count: ${{ steps.test-summary.outputs.low_count }}
      total_count: ${{ steps.test-summary.outputs.total_count }}
      summary: ${{ steps.test-summary.outputs.summary }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Dependency Review (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-2.0, GPL-3.0

      - name: Generate SBOM (Software Bill of Materials)
        uses: anchore/sbom-action@v0.17.2
        with:
          path: ./
          format: cyclonedx-json
          output-file: sbom.cyclonedx.json
          upload-artifact: true
          upload-artifact-retention: 90

      - name: Scan directory for vulnerabilities with Grype
        id: grype-scan
        uses: anchore/scan-action@v4.1.2
        with:
          path: ./
          fail-build: false
          severity-cutoff: medium
          output-format: sarif
          add-cpes-if-none: true
        continue-on-error: true

      - name: Fix Grype SARIF URI Schemes and Validate
        if: always()
        run: |
          if [ -f results.sarif ]; then
            # Check if file is valid JSON and not empty
            if jq empty results.sarif 2>/dev/null && [ -s results.sarif ]; then
              echo "✅ SARIF file is valid JSON"
              chmod +x scripts/fix-sarif-uris.sh
              ./scripts/fix-sarif-uris.sh results.sarif
            else
              echo "⚠️ SARIF file is invalid or empty, creating minimal valid SARIF"
              # Create minimal valid SARIF if file is corrupt
              jq -n '{
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "version": "2.1.0",
                "runs": [{
                  "tool": {
                    "driver": {
                      "name": "Grype",
                      "informationUri": "https://github.com/anchore/grype",
                      "version": "unknown"
                    }
                  },
                  "results": []
                }]
              }' > results.sarif
            fi
          else
            echo "⚠️ results.sarif not found, Grype scan may have failed"
            echo "Creating placeholder SARIF file"
            jq -n '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [{
                "tool": {
                  "driver": {
                    "name": "Grype",
                    "informationUri": "https://github.com/anchore/grype",
                    "version": "unknown"
                  }
                },
                "results": []
              }]
            }' > results.sarif
          fi

      - name: Fix SARIF URI Schemes (Grype)
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh results.sarif
        continue-on-error: true

      - name: Upload Grype Results to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: grype-dependency-scan

      - name: Generate Test Results Summary
        if: always()
        id: test-summary
        run: |
          RESULT="passed"
          if [ "${{ steps.grype-scan.outcome }}" != "success" ]; then
            RESULT="failed"
          fi

          # Count vulnerabilities by severity from SARIF
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0

          if [ -f results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error" or .properties.severity == "critical")] | length' results.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[].results[] | select(.level == "warning" or .properties.severity == "high")] | length' results.sarif 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.runs[].results[] | select(.properties.severity == "medium")] | length' results.sarif 2>/dev/null || echo "0")
            LOW_COUNT=$(jq '[.runs[].results[] | select(.properties.severity == "low")] | length' results.sarif 2>/dev/null || echo "0")
          fi

          TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))

          echo "test_result=$RESULT" >> $GITHUB_OUTPUT
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL_VULNS" >> $GITHUB_OUTPUT

          # Create summary output
          SUMMARY="Dependency Vulnerability Scan\n\n"
          SUMMARY="${SUMMARY}Total Vulnerabilities: $TOTAL_VULNS\n"
          SUMMARY="${SUMMARY}Critical: $CRITICAL_COUNT | High: $HIGH_COUNT | Medium: $MEDIUM_COUNT | Low: $LOW_COUNT\n\n"
          SUMMARY="${SUMMARY}Tool: Grype (Anchore)\n"
          SUMMARY="${SUMMARY}SBOM Format: CycloneDX\n"
          SUMMARY="${SUMMARY}Scan Status: $RESULT"

          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

          echo "📊 Dependency Scan Results:"
          echo "  Result: $RESULT"
          echo "  Total Vulnerabilities: $TOTAL_VULNS"
          echo "  Critical: $CRITICAL_COUNT | High: $HIGH_COUNT | Medium: $MEDIUM_COUNT | Low: $LOW_COUNT"

  # Secret scanning with Gitleaks - DISABLED (requires paid license)
  # secret-scanning:
  #   name: Secret Scanning
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Run Gitleaks
  #       uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # SAST with Semgrep
  semgrep-scan:
    name: Semgrep SAST
    runs-on: ubuntu-latest

    container:
      image: returntocorp/semgrep

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep scan --config=auto --sarif --output=semgrep-results.sarif

      - name: Fix SARIF URI Schemes (Semgrep)
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh semgrep-results.sarif
        continue-on-error: true

      - name: Upload Semgrep Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  # Container scanning with Trivy
  trivy-fs-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Fix SARIF URI Schemes (Trivy)
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh trivy-fs-results.sarif
        continue-on-error: true

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: trivy-filesystem

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Licenses (Python)
        run: |
          find src -name "requirements.txt" -exec pip-licenses --from={} \;
        continue-on-error: true

      - name: Check Licenses (Node.js)
        run: |
          for dir in src/*/; do
            if [ -f "$dir/package.json" ]; then
              cd "$dir"
              npx license-checker --summary
              cd -
            fi
          done
        continue-on-error: true

  # Infrastructure as Code scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform-aws/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          config_file: .checkov.yml  # Use project-specific config with skip rules

      - name: Fix Checkov SARIF URI Schemes
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh checkov-results.sarif

      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov-terraform

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform-aws/
          soft_fail: true
          format: sarif
          additional_args: --out tfsec-results.sarif
        continue-on-error: true

      - name: Fix tfsec SARIF URI Schemes
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh tfsec-results.sarif
        continue-on-error: true

      - name: Upload tfsec Results to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec-terraform
        continue-on-error: true

  # Kubernetes manifest scanning
  k8s-manifest-scan:
    name: Kubernetes Manifest Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Kubesec
        run: |
          # Scan each YAML file individually and combine results
          echo "[]" > kubesec-results.json
          for file in kubernetes-manifests/*.yaml; do
            if [ -f "$file" ]; then
              echo "Scanning $file..."
              docker run --rm -v $(pwd):/project kubesec/kubesec:v2 scan "/project/$file" >> kubesec-results.json || true
            fi
          done
        continue-on-error: true

      - name: Install Polaris CLI
        run: |
          wget -O polaris.tar.gz https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz
          tar -xzf polaris.tar.gz
          chmod +x polaris
          sudo mv polaris /usr/local/bin/
        continue-on-error: true

      - name: Run Polaris Audit
        run: |
          # Use custom config to adjust warning levels for demo environment
          # Exit code 8 = warnings found (expected), exit code 0 = no issues
          polaris audit --audit-path kubernetes-manifests/ --config .polaris.yaml --format json > polaris-results.json && exit 0 || exit 0
        continue-on-error: false

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'online-boutique'
          path: 'src/'
          format: 'SARIF'
          out: 'dependency-check-report'

      - name: Fix SARIF URI Schemes (OWASP)
        if: always()
        run: |
          chmod +x scripts/fix-sarif-uris.sh
          ./scripts/fix-sarif-uris.sh dependency-check-report/dependency-check-report.sarif
        continue-on-error: true

      - name: Upload Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: dependency-check-report/dependency-check-report.sarif
          category: owasp-dependency-check
