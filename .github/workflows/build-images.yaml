---
name: "Build and Push Docker Images (Reusable)"

'on':
  workflow_call:
    inputs:
      environment:
        description: 'Environment tag for images (dev/qa/prod)'
        required: false
        type: string
        default: 'dev'
      version:
        description: 'Semantic version tag (e.g., 1.2.0). If provided, uses v{version} instead of environment'
        required: false
        type: string
        default: ''
      services:
        description: 'Services to build (JSON array or "all")'
        required: false
        type: string
        default: 'all'
      push_images:
        description: 'Whether to push images to ECR'
        required: false
        type: boolean
        default: true
    outputs:
      services_built:
        description: "List of services that were built"
        value: ${{ jobs.detect-changes.outputs.matrix }}
      build_success:
        description: "Whether all builds succeeded"
        value: ${{ jobs.build-summary.outputs.success }}

permissions:
  contents: read
  security-events: write
  id-token: write
  checks: write

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

jobs:
  # Detect which services have changes or build all if specified
  detect-changes:
    name: Detect Services to Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_services: ${{ steps.set-matrix.outputs.has_services }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need history for change detection

      - name: Determine Release Tag
        id: release
        run: |
          # Use semantic version if provided, otherwise use environment tag
          if [ -n "${{ inputs.version }}" ]; then
            # Semantic version provided - use it with v prefix
            echo "tag=v${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using semantic version: v${{ inputs.version }}"
          else
            # No semantic version - use environment tag
            echo "tag=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "Using environment tag: ${{ inputs.environment }}"
          fi

      - name: Check Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        if: inputs.services == 'all'
        with:
          filters: |
            emailservice:
              - 'src/emailservice/**'
            productcatalogservice:
              - 'src/productcatalogservice/**'
            recommendationservice:
              - 'src/recommendationservice/**'
            shippingservice:
              - 'src/shippingservice/**'
            checkoutservice:
              - 'src/checkoutservice/**'
            paymentservice:
              - 'src/paymentservice/**'
            currencyservice:
              - 'src/currencyservice/**'
            cartservice:
              - 'src/cartservice/**'
            frontend:
              - 'src/frontend/**'
            adservice:
              - 'src/adservice/**'
            loadgenerator:
              - 'src/loadgenerator/**'
            shoppingassistantservice:
              - 'src/shoppingassistantservice/**'

      - name: Set Build Matrix
        id: set-matrix
        run: |
          SERVICES_INPUT='${{ inputs.services }}'

          echo "========================================="
          echo "DEBUG: SERVICES_INPUT='$SERVICES_INPUT'"
          echo "========================================="

          # Load canonical service list from centralized JSON file
          ALL_SERVICES=$(jq -c '.services' scripts/service-list.json)

          if [ "$SERVICES_INPUT" == "all" ]; then
            # Use canonical service list from scripts/service-list.json
            echo "matrix=$ALL_SERVICES" >> $GITHUB_OUTPUT
            echo 'has_services=true' >> $GITHUB_OUTPUT
            echo "üî® Building ALL services from scripts/service-list.json"
          elif [ "$SERVICES_INPUT" == "none" ]; then
            # Build nothing
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            echo 'has_services=false' >> $GITHUB_OUTPUT
          else
            # Build specific services provided as JSON array
            # Validate it's valid JSON first
            if echo "$SERVICES_INPUT" | jq empty 2>/dev/null; then
              # Check if it's an empty array - if so, build all services
              SERVICE_COUNT=$(echo "$SERVICES_INPUT" | jq 'length')
              echo "DEBUG: SERVICE_COUNT=$SERVICE_COUNT"

              if [ "$SERVICE_COUNT" -eq 0 ]; then
                echo "‚ö†Ô∏è Received empty services array, building all services instead"
                echo "matrix=$ALL_SERVICES" >> $GITHUB_OUTPUT
                echo 'has_services=true' >> $GITHUB_OUTPUT
              else
                echo "matrix=$SERVICES_INPUT" >> $GITHUB_OUTPUT
                echo 'has_services=true' >> $GITHUB_OUTPUT
                echo "üì¶ Building specific services: $SERVICES_INPUT"
              fi
            else
              echo "Error: Invalid JSON in services input: $SERVICES_INPUT"
              exit 1
            fi
          fi

          # Display what we're building
          MATRIX=$(cat $GITHUB_OUTPUT | grep "matrix=" | cut -d'=' -f2)
          echo "### üî® Services to Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$MATRIX" | jq '.' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Build, scan, and push Docker images (now includes tests)
  build-and-push:
    name: Build ${{ matrix.service }}
    needs: detect-changes
    if: needs.detect-changes.outputs.has_services == 'true'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Prepare ServiceNow Authentication
        id: sn-auth
        uses: ./.github/actions/servicenow-auth
        env:
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          SN_ORCHESTRATION_TOOL_ID: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}

      # =====================================================================
      # RUN UNIT TESTS BEFORE BUILDING
      # =====================================================================

      # Setup language runtimes for testing
      - name: Setup Go (for Go services)
        if: |
          matrix.service == 'frontend' ||
          matrix.service == 'checkoutservice' ||
          matrix.service == 'productcatalogservice' ||
          matrix.service == 'shippingservice'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup .NET (for cartservice)
        if: matrix.service == 'cartservice'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Java (for adservice)
        if: matrix.service == 'adservice'
        uses: ./.github/actions/setup-java-env
        with:
          java-version: '19'
          service: 'adservice'

      - name: Setup Python (for Python services)
        if: |
          matrix.service == 'emailservice' ||
          matrix.service == 'recommendationservice' ||
          matrix.service == 'shoppingassistantservice'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Node.js (for Node services)
        if: |
          matrix.service == 'currencyservice' ||
          matrix.service == 'paymentservice'
        uses: ./.github/actions/setup-node-env
        with:
          node-version: '20'  # Use LTS for better compatibility with native modules
          service: ${{ matrix.service }}

      # Run tests based on service type
      - name: Run Go Tests
        id: go-tests
        if: |
          matrix.service == 'frontend' ||
          matrix.service == 'checkoutservice' ||
          matrix.service == 'productcatalogservice' ||
          matrix.service == 'shippingservice'
        working-directory: src/${{ matrix.service }}
        run: |
          go install gotest.tools/gotestsum@latest
          gotestsum --junitfile test-results.xml --format testname -- -v ./...

      - name: Run C# Tests (xunit)
        id: csharp-tests
        if: matrix.service == 'cartservice'
        working-directory: src/cartservice
        run: |
          dotnet test tests/cartservice.tests.csproj \
            --logger "junit;LogFilePath=test-results.xml" \
            --verbosity normal

      - name: Run Java Tests (JUnit)
        id: java-tests
        if: matrix.service == 'adservice'
        working-directory: src/adservice
        run: |
          ./gradlew test --no-daemon
          mkdir -p test-results
          cp build/test-results/test/*.xml test-results/ 2>/dev/null || true

      - name: Run Python Tests (pytest)
        id: python-tests
        if: |
          matrix.service == 'emailservice' ||
          matrix.service == 'recommendationservice' ||
          matrix.service == 'shoppingassistantservice'
        working-directory: src/${{ matrix.service }}
        run: |
          pip install -q -r requirements.txt
          pip install -q pytest pytest-cov pytest-xdist
          # Run pytest - allow exit code 5 (no tests collected) but fail on test failures
          pytest --junitxml=test-results.xml --cov=. --cov-report=xml -v || EXIT_CODE=$?
          if [ "${EXIT_CODE:-0}" -eq 5 ]; then
            echo "‚ö†Ô∏è No tests found for ${{ matrix.service }} - creating empty test results"
            exit 0
          elif [ "${EXIT_CODE:-0}" -ne 0 ]; then
            echo "‚ùå Tests failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

      - name: Run Node.js Tests (Jest)
        id: nodejs-tests
        if: |
          matrix.service == 'currencyservice' ||
          matrix.service == 'paymentservice'
        working-directory: src/${{ matrix.service }}
        run: |
          npm install
          # Install test dependencies
          npm install --save-dev jest jest-junit
          # Run tests with JUnit XML output and coverage
          npx jest --ci --coverage --coverageReporters=cobertura --coverageReporters=text \
            --reporters=default --reporters=jest-junit
          # jest-junit creates junit.xml by default
          if [ -f "junit.xml" ]; then
            mv junit.xml test-results.xml
          fi

      - name: Create Placeholder Test Results (loadgenerator only)
        if: matrix.service == 'loadgenerator'
        working-directory: src/${{ matrix.service }}
        run: |
          # Create placeholder test-results.xml file (don't create directory!)
          cat > test-results.xml <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
            <testsuite name="${{ matrix.service }}" tests="0" failures="0" errors="0" skipped="0">
              <properties>
                <property name="status" value="load testing tool - no unit tests"/>
              </properties>
            </testsuite>
          </testsuites>
          EOF

      # Find test results
      - name: Locate Test Results
        id: find-test-results
        run: |
          SERVICE_DIR="src/${{ matrix.service }}"
          TEST_FILE=""
          IS_DIRECTORY="false"

          # Check for test results in various locations (order matters - most specific first)
          if [ -f "$SERVICE_DIR/tests/TestResults/test-results.xml" ]; then
            # C# tests (cartservice) - dotnet test puts results in tests/TestResults/
            TEST_FILE="$SERVICE_DIR/tests/TestResults/test-results.xml"
            IS_DIRECTORY="false"
          elif [ -f "$SERVICE_DIR/test-results.xml" ]; then
            # Go, Python, Placeholder services - test-results.xml in service root
            TEST_FILE="$SERVICE_DIR/test-results.xml"
            IS_DIRECTORY="false"
          elif [ -d "$SERVICE_DIR/test-results" ]; then
            # Java (after copy step) - test-results directory
            TEST_FILE="$SERVICE_DIR/test-results"
            IS_DIRECTORY="true"
          elif [ -d "$SERVICE_DIR/build/test-results/test" ]; then
            # Java (original location) - build/test-results/test directory
            TEST_FILE="$SERVICE_DIR/build/test-results/test"
            IS_DIRECTORY="true"
          fi

          if [ -n "$TEST_FILE" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "path=$TEST_FILE" >> $GITHUB_OUTPUT
            echo "is_directory=$IS_DIRECTORY" >> $GITHUB_OUTPUT
            echo "‚úÖ Test results: $TEST_FILE (directory: $IS_DIRECTORY)"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No test results found"
          fi

      # Upload test results to ServiceNow
      - name: Upload Test Results to ServiceNow
        if: steps.find-test-results.outputs.found == 'true'
        uses: ServiceNow/servicenow-devops-test-report@v6.0.0
        with:
          devops-integration-user-name: ${{ steps.sn-auth.outputs.username }}
          devops-integration-user-password: ${{ steps.sn-auth.outputs.password }}
          instance-url: ${{ steps.sn-auth.outputs.instance-url }}
          tool-id: ${{ steps.sn-auth.outputs.tool-id }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build ${{ matrix.service }}'
          xml-report-filename: ${{ steps.find-test-results.outputs.path }}
        # Quality Gate: Make tests blocking for production, non-blocking for dev/qa
        continue-on-error: ${{ inputs.environment != 'prod' }}

      - name: Publish Test Results to GitHub
        if: always() && steps.find-test-results.outputs.found == 'true'
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          # If path is a directory, use /**/*.xml pattern; if file, use path as-is
          files: ${{ steps.find-test-results.outputs.is_directory == 'true' && format('{0}/**/*.xml', steps.find-test-results.outputs.path) || steps.find-test-results.outputs.path }}
          check_name: "${{ matrix.service }} Tests"
        continue-on-error: true

      # =====================================================================
      # UPLOAD CODE COVERAGE METRICS
      # =====================================================================

      - name: Upload Code Coverage to ServiceNow
        if: |
          always() &&
          (steps.go-tests.outcome == 'success' ||
           steps.python-tests.outcome == 'success' ||
           steps.csharp-tests.outcome == 'success')
        run: |
          # Find coverage file (coverage.xml generated by pytest, go, dotnet test)
          COVERAGE_FILE=""
          if [ -f "src/${{ matrix.service }}/coverage.xml" ]; then
            COVERAGE_FILE="src/${{ matrix.service }}/coverage.xml"
          elif [ -f "src/${{ matrix.service }}/coverage/coverage.xml" ]; then
            COVERAGE_FILE="src/${{ matrix.service }}/coverage/coverage.xml"
          fi

          if [ -n "$COVERAGE_FILE" ] && [ -f "$COVERAGE_FILE" ]; then
            echo "üìä Uploading coverage metrics to ServiceNow"
            chmod +x scripts/upload-coverage-to-servicenow.sh
            ./scripts/upload-coverage-to-servicenow.sh "${{ matrix.service }}" "$COVERAGE_FILE" || true
          else
            echo "‚ö†Ô∏è No coverage file found for ${{ matrix.service }}"
          fi
        env:
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        continue-on-error: true

      # =====================================================================
      # END UNIT TESTS - Continue with Docker Build
      # =====================================================================

      - name: Determine Release Tag
        id: release
        run: |
          # Use semantic version if provided, otherwise use environment tag
          if [ -n "${{ inputs.version }}" ]; then
            # Semantic version provided - use it with v prefix
            echo "tag=v${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using semantic version: v${{ inputs.version }}"
          else
            # No semantic version - use environment tag
            echo "tag=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "Using environment tag: ${{ inputs.environment }}"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup AWS Credentials
        uses: ./.github/actions/setup-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Docker Context Path
        id: context
        run: |
          if [ "${{ matrix.service }}" == "cartservice" ]; then
            echo "path=src/cartservice/src" >> $GITHUB_OUTPUT
          else
            echo "path=src/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ inputs.environment }}
            type=raw,value=${{ inputs.environment }}-${{ github.sha }}
            type=raw,value=${{ steps.release.outputs.tag }}
            type=raw,value=latest,enable=${{ inputs.environment == 'prod' }}
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILDTIME=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}
            ENVIRONMENT=${{ inputs.environment }}

      - name: Run Trivy Vulnerability Scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: trivy-${{ matrix.service }}
        continue-on-error: true

      - name: Run Trivy Vulnerability Scanner (Table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy Vulnerability Scanner (JSON for ServiceNow)
        if: inputs.push_images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        continue-on-error: true

      - name: Upload Vulnerabilities to ServiceNow
        if: inputs.push_images
        run: |
          # Check if Trivy results exist
          if [ ! -f "trivy-results-${{ matrix.service }}.json" ]; then
            echo "‚ö†Ô∏è Trivy results not found, skipping ServiceNow upload"
            exit 0
          fi

          # Check if upload script exists
          if [ ! -f "scripts/upload-vulnerabilities-to-servicenow.sh" ]; then
            echo "‚ö†Ô∏è Upload script not found, skipping ServiceNow upload"
            exit 0
          fi

          # Upload vulnerabilities
          echo "üì§ Uploading vulnerabilities to ServiceNow..."
          DEBUG=true ./scripts/upload-vulnerabilities-to-servicenow.sh \
            "trivy-results-${{ matrix.service }}.json" \
            "${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}" \
            "${{ inputs.environment }}"
        env:
          SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          DEBUG: 'true'
        continue-on-error: true

      # ============================================================
      # SBOM GENERATION (No OCI storage - artifacts only)
      # ============================================================

      - name: Generate SBOM with Syft (CycloneDX)
        if: inputs.push_images
        uses: anchore/sbom-action@v0.17.2
        with:
          image: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}
          artifact-name: sbom-${{ matrix.service }}-cyclonedx
          output-file: sbom-${{ matrix.service }}.cyclonedx.json
          format: cyclonedx-json
          upload-artifact: true
          upload-artifact-retention: 90

      - name: Generate SBOM with Syft (SPDX)
        if: inputs.push_images
        uses: anchore/sbom-action@v0.17.2
        with:
          image: ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}
          artifact-name: sbom-${{ matrix.service }}-spdx
          output-file: sbom-${{ matrix.service }}.spdx.json
          format: spdx-json
          upload-artifact: true
          upload-artifact-retention: 90

      - name: Generate SBOM Summary
        if: inputs.push_images
        run: |
          echo "## üì¶ Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total components
          if [ -f "sbom-${{ matrix.service }}.cyclonedx.json" ]; then
            TOTAL=$(jq '.components | length' sbom-${{ matrix.service }}.cyclonedx.json)
            echo "**Total Components:** $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Count by type
            echo "**Component Types:**" >> $GITHUB_STEP_SUMMARY
            jq -r '.components | group_by(.type) | .[] | "- \(length) \(.[0].type)s"' sbom-${{ matrix.service }}.cyclonedx.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List top 10 components
            echo "**Top Components:**" >> $GITHUB_STEP_SUMMARY
            jq -r '.components[:10] | .[] | "- \(.name) \(.version // "unknown")"' sbom-${{ matrix.service }}.cyclonedx.json >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================================
      # IMAGE SIGNING (Keyless with Cosign - no OCI attachment)
      # ============================================================

      - name: Install Cosign
        if: inputs.push_images
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign Container Image (Keyless - signature to file)
        if: inputs.push_images
        run: |
          # Sign image and save signature to file (not OCI registry)
          cosign sign --yes \
            --output-signature=signature-${{ matrix.service }}.sig \
            --output-certificate=certificate-${{ matrix.service }}.pem \
            ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}

          echo "‚úÖ Image signed successfully"
          echo "   Signature: signature-${{ matrix.service }}.sig"
          echo "   Certificate: certificate-${{ matrix.service }}.pem"

          # Display certificate details
          openssl x509 -in certificate-${{ matrix.service }}.pem -text -noout | grep -A 3 "Subject:"
        continue-on-error: true

      - name: Upload Signature and Certificate as Artifacts
        if: inputs.push_images
        uses: actions/upload-artifact@v4
        with:
          name: signatures-${{ matrix.service }}
          path: |
            signature-${{ matrix.service }}.sig
            certificate-${{ matrix.service }}.pem
          retention-days: 90

      # ============================================================
      # SERVICENOW INTEGRATION
      # ============================================================

      - name: Upload SBOM to ServiceNow
        if: inputs.push_images
        run: |
          # Read SBOM
          if [ ! -f "sbom-${{ matrix.service }}.cyclonedx.json" ]; then
            echo "‚ö†Ô∏è SBOM file not found, skipping upload"
            exit 0
          fi

          SBOM_DATA=$(cat sbom-${{ matrix.service }}.cyclonedx.json | jq -c '.')
          COMPONENT_COUNT=$(echo "$SBOM_DATA" | jq '.components | length')

          # Create compact SBOM summary (to avoid 413 errors)
          SBOM_SUMMARY=$(echo "$SBOM_DATA" | jq -c '{
            bomFormat: .bomFormat,
            specVersion: .specVersion,
            serialNumber: .serialNumber,
            version: .version,
            metadata: .metadata,
            componentCount: (.components | length),
            components: [.components[] | {name, version, type, purl}]
          }')

          # Create ServiceNow payload
          PAYLOAD=$(jq -n \
            --arg service "${{ matrix.service }}" \
            --arg version "${{ inputs.environment }}-${{ github.sha }}" \
            --arg image "${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}" \
            --arg sbom_summary "$SBOM_SUMMARY" \
            --arg format "CycloneDX 1.5 JSON" \
            --arg component_count "$COMPONENT_COUNT" \
            --arg generated_at "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg repository "${{ github.repository }}" \
            --arg commit "${{ github.sha }}" \
            --arg workflow_run "${{ github.run_id }}" \
            --arg artifact_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              u_service_name: $service,
              u_image_version: $version,
              u_image_uri: $image,
              u_sbom_summary: $sbom_summary,
              u_sbom_format: $format,
              u_component_count: $component_count,
              u_generated_at: $generated_at,
              u_repository: $repository,
              u_commit_sha: $commit,
              u_workflow_run: $workflow_run,
              u_artifact_url: $artifact_url
            }')

          # Upload to ServiceNow (u_container_sbom table)
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/u_container_sbom")

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          if [ "$HTTP_CODE" = "201" ]; then
            SBOM_SYSID=$(echo "$BODY" | jq -r '.result.sys_id')
            echo "‚úÖ SBOM uploaded to ServiceNow (sys_id: $SBOM_SYSID)"
            echo "   Components: $COMPONENT_COUNT"
          else
            echo "‚ö†Ô∏è SBOM upload failed (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"
          fi
        continue-on-error: true

      - name: Upload Image Provenance to ServiceNow
        if: inputs.push_images
        run: |
          # Check if signature files exist
          SIGNED="false"
          if [ -f "signature-${{ matrix.service }}.sig" ] && [ -f "certificate-${{ matrix.service }}.pem" ]; then
            SIGNED="true"

            # Extract certificate details
            CERT_SUBJECT=$(openssl x509 -in certificate-${{ matrix.service }}.pem -noout -subject | sed 's/subject=//')
            CERT_ISSUER=$(openssl x509 -in certificate-${{ matrix.service }}.pem -noout -issuer | sed 's/issuer=//')
            CERT_FINGERPRINT=$(openssl x509 -in certificate-${{ matrix.service }}.pem -noout -fingerprint -sha256 | cut -d'=' -f2)
          else
            CERT_SUBJECT=""
            CERT_ISSUER=""
            CERT_FINGERPRINT=""
          fi

          # Create provenance payload
          PAYLOAD=$(jq -n \
            --arg service "${{ matrix.service }}" \
            --arg version "${{ inputs.environment }}-${{ github.sha }}" \
            --arg image "${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ inputs.environment }}" \
            --arg signed "$SIGNED" \
            --arg signature_method "cosign-keyless" \
            --arg oidc_issuer "https://token.actions.githubusercontent.com" \
            --arg certificate_identity "${{ github.repository }}" \
            --arg cert_subject "$CERT_SUBJECT" \
            --arg cert_issuer "$CERT_ISSUER" \
            --arg cert_fingerprint "$CERT_FINGERPRINT" \
            --arg workflow_run "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg artifact_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg built_by "${{ github.actor }}" \
            --arg built_at "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg commit_sha "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            '{
              u_service_name: $service,
              u_image_version: $version,
              u_image_uri: $image,
              u_signed: $signed,
              u_signature_method: $signature_method,
              u_oidc_issuer: $oidc_issuer,
              u_certificate_identity: $certificate_identity,
              u_certificate_subject: $cert_subject,
              u_certificate_issuer: $cert_issuer,
              u_certificate_fingerprint: $cert_fingerprint,
              u_workflow_run_url: $workflow_run,
              u_signature_artifact_url: $artifact_url,
              u_built_by: $built_by,
              u_built_at: $built_at,
              u_commit_sha: $commit_sha,
              u_branch: $branch
            }')

          # Upload to ServiceNow (u_container_provenance table)
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/u_container_provenance")

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          if [ "$HTTP_CODE" = "201" ]; then
            PROV_SYSID=$(echo "$BODY" | jq -r '.result.sys_id')
            echo "‚úÖ Provenance uploaded to ServiceNow (sys_id: $PROV_SYSID)"
            echo "   Signed: $SIGNED"
            echo "   Certificate Fingerprint: $CERT_FINGERPRINT"
          else
            echo "‚ö†Ô∏è Provenance upload failed (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"
          fi
        continue-on-error: true

      - name: Push to ECR
        if: inputs.push_images
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          platforms: linux/amd64,linux/arm64

      - name: Register Package with ServiceNow
        if: inputs.push_images
        uses: ServiceNow/servicenow-devops-register-package@v3.1.0
        with:
          devops-integration-user-name: ${{ steps.sn-auth.outputs.username }}
          devops-integration-user-password: ${{ steps.sn-auth.outputs.password }}
          instance-url: ${{ steps.sn-auth.outputs.instance-url }}
          tool-id: ${{ steps.sn-auth.outputs.tool-id }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build ${{ matrix.service }}'
          artifacts: '[{"name": "${{ env.ECR_REGISTRY }}/${{ matrix.service }}", "version": "${{ inputs.environment }}-${{ github.sha }}", "semanticVersion": "${{ inputs.environment }}-${{ github.run_number }}", "repositoryName": "${{ github.repository }}"}]'
          package-name: '${{ matrix.service }}-${{ inputs.environment }}-${{ github.run_number }}.package'
        continue-on-error: true

      - name: Service Build Summary
        if: always()
        run: |
          echo "### ‚úÖ ${{ matrix.service }} - Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test Results Summary
          if [ "${{ steps.find-test-results.outputs.found }}" == "true" ]; then
            echo "**Testing**:" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.go-tests.outcome }}" == "success" ] || \
               [ "${{ steps.csharp-tests.outcome }}" == "success" ] || \
               [ "${{ steps.java-tests.outcome }}" == "success" ] || \
               [ "${{ steps.python-tests.outcome }}" == "success" ]; then
              echo "- ‚úÖ Unit tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚ö†Ô∏è Unit tests found issues (check test report)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- ‚úÖ Test results uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Test results published to GitHub Checks" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Image Tags**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.push_images }}" == "true" ]; then
            echo "‚úÖ Pushed to ECR" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Trivy vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Vulnerabilities uploaded to ServiceNow Vulnerability Response" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Registered with ServiceNow as package: \`${{ matrix.service }}-${{ inputs.environment }}-${{ github.run_number }}.package\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è Image not pushed (build only)" >> $GITHUB_STEP_SUMMARY
          fi

  # Create comprehensive summary
  build-summary:
    name: Build Summary
    needs: [detect-changes, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.check-status.outputs.success }}

    steps:
      - name: Check Build Status
        id: check-status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ] || [ "${{ needs.build-and-push.result }}" == "skipped" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Summary
        run: |
          echo "## üê≥ Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Images Pushed | ${{ inputs.push_images }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has_services }}" == "true" ]; then
            echo "### Services Built" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.detect-changes.outputs.matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Testing & Quality" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Unit tests run for each service" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Test results uploaded to ServiceNow" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Test results published to GitHub Checks" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Trivy vulnerability scanning completed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.push_images }}" == "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ServiceNow Integration" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Test results registered for each service" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Vulnerabilities uploaded to Vulnerability Response" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Each Docker image registered as individual package" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Package naming: \`{service}-${{ inputs.environment }}-${{ github.run_number }}.package\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ÑπÔ∏è No services required building" >> $GITHUB_STEP_SUMMARY
          fi
