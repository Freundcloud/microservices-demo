name: Auto Deploy to Dev

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'kustomize/base/**'
      - 'kustomize/overlays/dev/**'
      - 'kustomize/components/**'
      - '.github/workflows/auto-deploy-dev.yaml'

  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: eu-west-2
  AWS_ACCOUNT_ID: 533267307120
  ECR_REGISTRY: 533267307120.dkr.ecr.eu-west-2.amazonaws.com
  CLUSTER_NAME: microservices

jobs:
  # Job 1: Detect changed services
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      any_changed: ${{ steps.filter.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'src/frontend/**'
            cartservice:
              - 'src/cartservice/**'
            productcatalogservice:
              - 'src/productcatalogservice/**'
            currencyservice:
              - 'src/currencyservice/**'
            paymentservice:
              - 'src/paymentservice/**'
            shippingservice:
              - 'src/shippingservice/**'
            emailservice:
              - 'src/emailservice/**'
            checkoutservice:
              - 'src/checkoutservice/**'
            recommendationservice:
              - 'src/recommendationservice/**'
            adservice:
              - 'src/adservice/**'
            loadgenerator:
              - 'src/loadgenerator/**'
            kustomize:
              - 'kustomize/**'

      - name: Show detected changes
        run: |
          echo "Changed services: ${{ steps.filter.outputs.changes }}"
          echo "Any changes: ${{ steps.filter.outputs.any_changed }}"

  # Job 2: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && github.event.inputs.skip_tests != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "🧪 Running tests for changed services..."
          # Add actual test commands here based on your test setup
          # For now, just a placeholder
          echo "✅ Tests passed (placeholder)"

  # Job 3: Build and push changed images
  build-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: |
      always() &&
      needs.detect-changes.outputs.any_changed == 'true' &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Get current version
        id: version
        run: |
          VERSION=$(cat VERSION)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          DEV_VERSION="${VERSION}-dev-${COMMIT_SHA}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "dev_version=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push changed services
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DEV_VERSION="${{ steps.version.outputs.dev_version }}"
          COMMIT_SHA="${{ steps.version.outputs.commit_sha }}"

          CHANGED_SERVICES='${{ needs.detect-changes.outputs.services }}'

          echo "Changed services: $CHANGED_SERVICES"
          echo "Dev version: $DEV_VERSION"

          # Parse JSON array of changed services
          for service in $(echo "$CHANGED_SERVICES" | jq -r '.[]'); do
            echo "🐳 Building $service..."

            # Special handling for cartservice (different Dockerfile location)
            if [ "$service" == "cartservice" ]; then
              cd src/cartservice/src
              docker buildx build -t $service:local -f Dockerfile .
              cd ../../..
            else
              docker buildx build -t $service:local src/$service
            fi

            # Tag with dev version
            docker tag $service:local ${{ env.ECR_REGISTRY }}/$service:$DEV_VERSION
            docker tag $service:local ${{ env.ECR_REGISTRY }}/$service:dev
            docker tag $service:local ${{ env.ECR_REGISTRY }}/$service:latest

            # Push all tags
            docker push ${{ env.ECR_REGISTRY }}/$service:$DEV_VERSION
            docker push ${{ env.ECR_REGISTRY }}/$service:dev
            docker push ${{ env.ECR_REGISTRY }}/$service:latest

            echo "✅ $service built and pushed"
          done

      - name: Generate SBOM
        run: |
          CHANGED_SERVICES='${{ needs.detect-changes.outputs.services }}'

          for service in $(echo "$CHANGED_SERVICES" | jq -r '.[]'); do
            echo "📦 Generating SBOM for $service..."
            docker sbom ${{ env.ECR_REGISTRY }}/$service:dev -o sbom-$service.json || echo "⚠️ SBOM generation failed for $service"
          done

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-dev
          path: sbom-*.json
          retention-days: 30

  # Job 4: Deploy to dev
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [detect-changes, build-push]
    if: always() && needs.build-push.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info

      - name: Check namespace exists
        run: |
          if ! kubectl get namespace microservices-dev 2>/dev/null; then
            echo "⚠️ Namespace microservices-dev does not exist, creating..."
            kubectl create namespace microservices-dev
            kubectl label namespace microservices-dev istio-injection=enabled
            echo "✅ Namespace created and labeled for Istio injection"
          else
            echo "✅ Namespace microservices-dev exists"
          fi

      - name: Deploy using Kustomize
        run: |
          echo "🚀 Deploying to dev environment..."
          kubectl apply -k kustomize/overlays/dev

      - name: Wait for deployments
        run: |
          NAMESPACE="microservices-dev"
          echo "⏳ Waiting for deployments to be ready in $NAMESPACE..."

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice loadgenerator"

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "⚠️ $service rollout timed out"
          done

      - name: Verify deployment
        run: |
          NAMESPACE="microservices-dev"

          echo "## Dev Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "⚠️ Not all pods are running" >> $GITHUB_STEP_SUMMARY
            kubectl get pods -n $NAMESPACE -o wide >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Get application URL
        run: |
          NAMESPACE="microservices-dev"

          # Try to get Istio ingress gateway external IP
          INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ -n "$INGRESS_HOST" ]; then
            echo "🌐 **Dev Application URL**: http://$INGRESS_HOST" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Ingress not yet available" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, build-push, deploy-dev]
    if: always() && (needs.test.result == 'failure' || needs.build-push.result == 'failure' || needs.deploy-dev.result == 'failure')

    steps:
      - name: Create failure summary
        run: |
          echo "## ❌ Dev Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Result**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Result**: ${{ needs.build-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Result**: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
