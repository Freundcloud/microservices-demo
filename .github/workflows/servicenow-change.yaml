---
name: "ServiceNow Change Automation (Reusable)"

'on':
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev/qa/prod)'
        required: true
        type: string
      change_type:
        description: 'Type of change (terraform/kubernetes/application)'
        required: true
        type: string
      short_description:
        description: 'Brief description of the change'
        required: true
        type: string
      description:
        description: 'Detailed description of changes'
        required: false
        type: string
        default: ''
      implementation_plan:
        description: 'How the change will be implemented'
        required: false
        type: string
        default: ''
      backout_plan:
        description: 'How to rollback if needed'
        required: false
        type: string
        default: ''
      test_plan:
        description: 'Testing approach'
        required: false
        type: string
        default: ''
      assignment_group:
        description: 'ServiceNow assignment group'
        required: false
        type: string
        default: 'DevOps Engineering'
    outputs:
      change_request_number:
        description: "ServiceNow change request number"
        value: ${{ jobs.create-change.outputs.change_number }}
      change_request_sys_id:
        description: "ServiceNow change request sys_id"
        value: ${{ jobs.create-change.outputs.change_sys_id }}
      change_approved:
        description: "Whether change was approved"
        value: ${{ jobs.create-change.outputs.approved }}

permissions:
  contents: read
  id-token: write

env:
  # Auto-approve for dev, manual approval for qa/prod
  AUTO_APPROVE: ${{ inputs.environment == 'dev' }}

jobs:
  create-change:
    name: Create Change Request (${{ inputs.environment }})
    runs-on: ubuntu-latest
    outputs:
      change_number: ${{ steps.change.outputs.change-request-number }}
      change_sys_id: ${{ steps.change.outputs.change-request-sys-id }}
      approved: ${{ steps.check-approval.outputs.approved }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # =====================================================================
      # Prepare Change Request Details
      # =====================================================================
      - name: Prepare Change Details
        id: prepare
        run: |
          # We don't need to output these to GITHUB_OUTPUT since we use them directly
          # in the ServiceNow action below. This avoids multi-line output issues.
          echo "Change details prepared for ${{ inputs.environment }} environment"

      # =====================================================================
      # DEV Environment: Auto-Approve Change
      # =====================================================================
      - name: Create Change Request (DEV - Auto-Approve)
        id: change-dev
        if: inputs.environment == 'dev'
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Create Change Request (${{ inputs.environment }})'
          change-request: >-
            {
              "setCloseCode": "true",
              "autoCloseChange": true,
              "attributes": {
                "short_description": ${{ toJSON(format('{0} [{1}]', inputs.short_description, inputs.environment)) }},
                "description": ${{ toJSON(inputs.description || format('Automated deployment to {0} environment via GitHub Actions', inputs.environment)) }},
                "assignment_group": ${{ toJSON(inputs.assignment_group) }},
                "implementation_plan": ${{ toJSON(inputs.implementation_plan || '1. Apply changes 2. Monitor rollout 3. Verify health') }},
                "backout_plan": ${{ toJSON(inputs.backout_plan || '1. Rollback deployment 2. Verify previous version 3. Monitor stability') }},
                "test_plan": ${{ toJSON(inputs.test_plan || '1. Run tests 2. Verify functionality 3. Monitor metrics') }},
                "type": "standard",
                "state": "implement",
                "priority": "3",
                "u_source": "GitHub Actions",
                "u_environment": ${{ toJSON(inputs.environment) }},
                "u_change_type": ${{ toJSON(inputs.change_type) }}
              }
            }
          interval: '30'
          timeout: '600'
          changeCreationTimeOut: '300'
          abortOnChangeCreationFailure: false
          abortOnChangeStepTimeout: false

      # =====================================================================
      # QA/PROD Environment: Manual Approval Required
      # =====================================================================
      - name: Create Change Request (QA/PROD - Manual Approval)
        id: change-prod
        if: inputs.environment != 'dev'
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          devops-integration-user-name: ${{ secrets.SERVICENOW_USERNAME }}
          devops-integration-user-password: ${{ secrets.SERVICENOW_PASSWORD }}
          instance-url: ${{ secrets.SERVICENOW_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Create Change Request (${{ inputs.environment }})'
          change-request: >-
            {
              "setCloseCode": "true",
              "autoCloseChange": true,
              "attributes": {
                "short_description": ${{ toJSON(format('{0} [{1}]', inputs.short_description, inputs.environment)) }},
                "description": ${{ toJSON(inputs.description || format('Automated deployment to {0} environment via GitHub Actions', inputs.environment)) }},
                "assignment_group": ${{ toJSON(inputs.assignment_group) }},
                "implementation_plan": ${{ toJSON(inputs.implementation_plan || '1. Apply changes 2. Monitor rollout 3. Verify health') }},
                "backout_plan": ${{ toJSON(inputs.backout_plan || '1. Rollback deployment 2. Verify previous version 3. Monitor stability') }},
                "test_plan": ${{ toJSON(inputs.test_plan || '1. Run tests 2. Verify functionality 3. Monitor metrics') }},
                "type": "standard",
                "state": "assess",
                "priority": ${{ toJSON(inputs.environment == 'prod' && '2' || '3') }},
                "u_source": "GitHub Actions",
                "u_environment": ${{ toJSON(inputs.environment) }},
                "u_change_type": ${{ toJSON(inputs.change_type) }}
              }
            }
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true

      # =====================================================================
      # Consolidate Outputs
      # =====================================================================
      - name: Consolidate Change Outputs
        id: change
        run: |
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "change-request-number=${{ steps.change-dev.outputs.change-request-number }}" >> $GITHUB_OUTPUT
            echo "change-request-sys-id=${{ steps.change-dev.outputs.change-request-sys-id }}" >> $GITHUB_OUTPUT
          else
            echo "change-request-number=${{ steps.change-prod.outputs.change-request-number }}" >> $GITHUB_OUTPUT
            echo "change-request-sys-id=${{ steps.change-prod.outputs.change-request-sys-id }}" >> $GITHUB_OUTPUT
          fi

      - name: Check Approval Status
        id: check-approval
        run: |
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "approved=true" >> $GITHUB_OUTPUT
            echo "âœ… DEV: Auto-approved"
          else
            echo "approved=true" >> $GITHUB_OUTPUT
            echo "âœ… ${{ inputs.environment }}: Change approved by ServiceNow"
          fi

      # =====================================================================
      # Summary
      # =====================================================================
      - name: Change Request Summary
        if: always()
        run: |
          echo "## ðŸ“‹ ServiceNow Change Request" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Type** | \`${{ inputs.change_type }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Number** | [\`${{ steps.change.outputs.change-request-number }}\`](${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sysparm_query=number=${{ steps.change.outputs.change-request-number }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Description** | ${{ inputs.short_description }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "| **Approval** | âœ… Auto-Approved (DEV) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Approval** | âœ… Approved via ServiceNow |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: Deployment will proceed" >> $GITHUB_STEP_SUMMARY
