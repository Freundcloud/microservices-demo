name: Terraform Validation and Testing

on:
  pull_request:
    paths:
      - 'terraform-aws/**'
      - '.github/workflows/terraform-validate.yaml'
  push:
    branches:
      - main
    paths:
      - 'terraform-aws/**'
  workflow_dispatch:

env:
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'eu-west-2'

jobs:
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        working-directory: terraform-aws
        run: |
          terraform fmt -check -recursive
          if [ $? -ne 0 ]; then
            echo "❌ Terraform files are not properly formatted"
            echo "Run 'terraform fmt -recursive' to fix"
            exit 1
          fi
          echo "✅ All Terraform files are properly formatted"

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, qa, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: terraform-aws
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: terraform-aws
        run: |
          terraform validate
          echo "✅ Terraform configuration is valid for ${{ matrix.environment }}"

  terraform-lint:
    name: TFLint Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        working-directory: terraform-aws
        run: tflint --init

      - name: Run TFLint
        working-directory: terraform-aws
        run: |
          tflint --format=compact --recursive
          echo "✅ TFLint checks passed"

  terraform-security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform-aws
          framework: terraform
          output_format: cli,sarif
          output_file_path: console,checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform-aws
          format: sarif
          soft_fail: true

      - name: Upload tfsec results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: tfsec

      - name: Run Trivy for IaC scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform-aws'
          format: 'sarif'
          output: 'trivy-iac-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-iac-results.sarif
          category: trivy-iac

  terraform-cost:
    name: Cost Estimation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform-aws
        run: terraform init

      - name: Generate Terraform Plan for Dev
        working-directory: terraform-aws
        run: |
          terraform plan \
            -var="environment=dev" \
            -var="cluster_name=microservices-dev" \
            -var="desired_size=2" \
            -var="min_size=1" \
            -var="max_size=3" \
            -out=dev-plan.tfplan

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        working-directory: terraform-aws
        run: |
          infracost breakdown \
            --path=dev-plan.tfplan \
            --format=json \
            --out-file=infracost-dev.json || echo "Infracost analysis failed (optional)"

      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        uses: infracost/actions/comment@v1
        with:
          path: terraform-aws/infracost-dev.json
          behavior: update

  terraform-docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup terraform-docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: terraform-aws
          output-file: README-GENERATED.md
          output-method: inject
          git-push: false

      - name: Check if documentation is up to date
        working-directory: terraform-aws
        run: |
          if [ -f README-GENERATED.md ]; then
            echo "✅ Terraform documentation generated successfully"
          else
            echo "❌ Failed to generate Terraform documentation"
            exit 1
          fi

  terraform-test:
    name: Terraform Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, qa, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform-aws
        run: terraform init

      - name: Run Terraform Tests
        working-directory: terraform-aws
        run: |
          if [ -d "tests" ]; then
            terraform test -verbose
            echo "✅ All Terraform tests passed for ${{ matrix.environment }}"
          else
            echo "ℹ️ No Terraform tests found (tests/ directory doesn't exist)"
          fi

  terraform-plan-matrix:
    name: Terraform Plan (Multi-Environment)
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, terraform-lint]
    strategy:
      matrix:
        environment: [dev, qa, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment-specific variables
        id: env-vars
        run: |
          if [ "${{ matrix.environment }}" == "dev" ]; then
            echo "cluster_name=microservices-dev" >> $GITHUB_OUTPUT
            echo "desired_size=2" >> $GITHUB_OUTPUT
            echo "min_size=1" >> $GITHUB_OUTPUT
            echo "max_size=3" >> $GITHUB_OUTPUT
            echo "instance_types=[\"t3.medium\"]" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.environment }}" == "qa" ]; then
            echo "cluster_name=microservices-qa" >> $GITHUB_OUTPUT
            echo "desired_size=3" >> $GITHUB_OUTPUT
            echo "min_size=2" >> $GITHUB_OUTPUT
            echo "max_size=5" >> $GITHUB_OUTPUT
            echo "instance_types=[\"t3.medium\"]" >> $GITHUB_OUTPUT
          else
            echo "cluster_name=microservices-prod" >> $GITHUB_OUTPUT
            echo "desired_size=5" >> $GITHUB_OUTPUT
            echo "min_size=3" >> $GITHUB_OUTPUT
            echo "max_size=10" >> $GITHUB_OUTPUT
            echo "instance_types=[\"t3.large\",\"t3.xlarge\"]" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: terraform-aws
        run: terraform init

      - name: Terraform Plan for ${{ matrix.environment }}
        working-directory: terraform-aws
        run: |
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="cluster_name=${{ steps.env-vars.outputs.cluster_name }}" \
            -var="desired_size=${{ steps.env-vars.outputs.desired_size }}" \
            -var="min_size=${{ steps.env-vars.outputs.min_size }}" \
            -var="max_size=${{ steps.env-vars.outputs.max_size }}" \
            -var='instance_types=${{ steps.env-vars.outputs.instance_types }}' \
            -out=${{ matrix.environment }}-plan.tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}-plan
          path: terraform-aws/${{ matrix.environment }}-plan.tfplan
          retention-days: 5

      - name: Generate human-readable plan
        working-directory: terraform-aws
        run: |
          terraform show -no-color ${{ matrix.environment }}-plan.tfplan > ${{ matrix.environment }}-plan.txt

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform-aws/${{ matrix.environment }}-plan.txt', 'utf8');
            const output = `#### Terraform Plan: ${{ matrix.environment }} 🏗️

            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${plan.length > 65000 ? plan.substring(0, 65000) + '\n...(truncated)' : plan}
            \`\`\`

            </details>

            *Environment: ${{ matrix.environment }}*
            *Cluster: ${{ steps.env-vars.outputs.cluster_name }}*
            *Nodes: ${{ steps.env-vars.outputs.min_size }}-${{ steps.env-vars.outputs.max_size }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, terraform-lint, terraform-security, terraform-test]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.terraform-fmt.result }}" != "success" ] || \
             [ "${{ needs.terraform-validate.result }}" != "success" ] || \
             [ "${{ needs.terraform-lint.result }}" != "success" ]; then
            echo "❌ Some validation checks failed"
            exit 1
          fi
          echo "✅ All validation checks passed successfully"

      - name: Post summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `### Terraform Validation Results 🎯

            | Check | Status |
            |-------|--------|
            | Format | ${{ needs.terraform-fmt.result == 'success' && '✅' || '❌' }} |
            | Validation | ${{ needs.terraform-validate.result == 'success' && '✅' || '❌' }} |
            | Linting | ${{ needs.terraform-lint.result == 'success' && '✅' || '❌' }} |
            | Security | ${{ needs.terraform-security.result == 'success' && '✅' || '❌' }} |
            | Tests | ${{ needs.terraform-test.result == 'success' && '✅' || '❌' }} |

            All environments (dev, qa, prod) have been validated.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
