name: Deploy with ServiceNow (Hybrid - REST API + Correlation)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: microservices
  SERVICENOW_INSTANCE_URL: ${{ secrets.SERVICENOW_INSTANCE_URL }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}

jobs:
  # Job 1: Create ServiceNow Change Request via REST API with DevOps correlation fields
  create-change-request:
    name: Create Change Request
    runs-on: ubuntu-latest
    outputs:
      change_request_number: ${{ steps.create-cr.outputs.change_number }}
      change_request_sys_id: ${{ steps.create-cr.outputs.change_sys_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine change settings
        id: settings
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ "$ENV" == "dev" ]; then
            echo "state=3" >> $GITHUB_OUTPUT  # Closed/Complete
            echo "risk=3" >> $GITHUB_OUTPUT   # Low
            echo "priority=3" >> $GITHUB_OUTPUT
            echo "assignment_group=DevOps Team" >> $GITHUB_OUTPUT
            echo "auto_close=true" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "qa" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=2" >> $GITHUB_OUTPUT    # Medium
            echo "priority=2" >> $GITHUB_OUTPUT
            echo "assignment_group=QA Team" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "prod" ]; then
            echo "state=-5" >> $GITHUB_OUTPUT  # Pending approval
            echo "risk=1" >> $GITHUB_OUTPUT    # High
            echo "priority=1" >> $GITHUB_OUTPUT
            echo "assignment_group=Change Advisory Board" >> $GITHUB_OUTPUT
            echo "auto_close=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Change Request via REST API
        id: create-cr
        run: |
          ENV="${{ github.event.inputs.environment }}"
          APP_SYS_ID="${{ secrets.SERVICENOW_APP_SYS_ID }}"
          TOOL_ID="${{ secrets.SERVICENOW_TOOL_ID }}"

          # Create correlation_id for DevOps tracking
          CORRELATION_ID="github-${{ github.repository }}-${{ github.run_id }}-${{ github.run_number }}"

          # Create change request payload with DevOps correlation fields
          PAYLOAD=$(cat <<EOF
          {
            "short_description": "Deploy Online Boutique to $ENV",
            "description": "Automated deployment via GitHub Actions.\n\nApplication: Online Boutique\nEnvironment: $ENV\nCommit: ${{ github.sha }}\nRepository: ${{ github.repository }}\nTriggered by: ${{ github.actor }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "implementation_plan": "1. Run security scans\n2. Build and validate Kubernetes manifests\n3. Deploy to EKS cluster namespace: microservices-$ENV\n4. Verify all pods running\n5. Update ServiceNow CMDB",
            "backout_plan": "kubectl rollout undo deployment -n microservices-$ENV\nOR\nkubectl delete -k kustomize/overlays/$ENV",
            "test_plan": "1. Check all pods status: kubectl get pods -n microservices-$ENV\n2. Verify service endpoints\n3. Run health checks\n4. Monitor Istio metrics",
            "risk": "${{ steps.settings.outputs.risk }}",
            "priority": "${{ steps.settings.outputs.priority }}",
            "assignment_group": "${{ steps.settings.outputs.assignment_group }}",
            "state": "${{ steps.settings.outputs.state }}",
            "type": "standard",
            "requested_by": "${{ secrets.SERVICENOW_USERNAME }}",
            "business_service": "$APP_SYS_ID",
            "cmdb_ci": "$APP_SYS_ID",
            "u_application": "Online Boutique",
            "u_environment": "$ENV",
            "correlation_id": "$CORRELATION_ID",
            "correlation_display": "GitHub Actions Run #${{ github.run_number }}",
            "u_source": "GitHub Actions",
            "work_notes": "Created by GitHub Actions workflow: ${{ github.workflow }}\nRun ID: ${{ github.run_id }}\nCommit: ${{ github.sha }}\nActor: ${{ github.actor }}"
          }
          EOF
          )

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Create change request
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Basic $BASIC_AUTH" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request")

          # Extract change number and sys_id
          CHANGE_NUMBER=$(echo "$RESPONSE" | jq -r '.result.number')
          CHANGE_SYS_ID=$(echo "$RESPONSE" | jq -r '.result.sys_id')

          if [ "$CHANGE_NUMBER" == "null" ] || [ -z "$CHANGE_NUMBER" ]; then
            echo "Failed to create change request"
            echo "$RESPONSE" | jq .
            exit 1
          fi

          echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
          echo "change_sys_id=$CHANGE_SYS_ID" >> $GITHUB_OUTPUT

          echo "✅ Change Request Created: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Number**: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Sys ID**: $CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Correlation ID**: $CORRELATION_ID" >> $GITHUB_STEP_SUMMARY
          echo "**View**: ${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY

  # Job 2: Wait for Approval (QA and Prod only)
  wait-for-approval:
    name: Wait for Change Approval
    runs-on: ubuntu-latest
    needs: create-change-request
    if: github.event.inputs.environment != 'dev'

    steps:
      - name: Wait for ServiceNow approval
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          CHANGE_NUMBER="${{ needs.create-change-request.outputs.change_request_number }}"
          ENV="${{ github.event.inputs.environment }}"

          # Create Basic Auth
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          # Timeout settings
          if [ "$ENV" == "qa" ]; then
            TIMEOUT=7200  # 2 hours
          else
            TIMEOUT=86400  # 24 hours
          fi

          POLL_INTERVAL=30  # 30 seconds
          ELAPSED=0

          echo "⏸️  Waiting for approval on $CHANGE_NUMBER..." >> $GITHUB_STEP_SUMMARY
          echo "**Change Request**: $CHANGE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $ENV" >> $GITHUB_STEP_SUMMARY
          echo "**Timeout**: $((TIMEOUT / 3600)) hours" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Approve in ServiceNow: ${{ secrets.SERVICENOW_INSTANCE_URL }}/nav_to.do?uri=change_request.do?sys_id=$CHANGE_SYS_ID" >> $GITHUB_STEP_SUMMARY

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get change request state
            RESPONSE=$(curl -s -H "Authorization: Basic $BASIC_AUTH" \
              "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID?sysparm_fields=state,approval,approval_set")

            STATE=$(echo "$RESPONSE" | jq -r '.result.state')
            APPROVAL=$(echo "$RESPONSE" | jq -r '.result.approval')

            echo "[$(date '+%Y-%m-%d %H:%M:%S')] State: $STATE, Approval: $APPROVAL (Elapsed: ${ELAPSED}s / ${TIMEOUT}s)"

            # Check if approved
            if [ "$APPROVAL" == "approved" ]; then
              echo "✅ Change request approved!" >> $GITHUB_STEP_SUMMARY
              echo "**Approved at**: $(date)" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi

            # Check if rejected
            if [ "$APPROVAL" == "rejected" ]; then
              echo "❌ Change request rejected!" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            # Wait before next poll
            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
          done

          # Timeout reached
          echo "❌ Approval timeout reached ($((TIMEOUT / 3600)) hours)" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Job 3: Pre-Deployment Checks
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval]
    if: always() && needs.create-change-request.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl cluster-info
          kubectl get nodes

      - name: Check namespace exists
        run: |
          NAMESPACE="microservices-${{ github.event.inputs.environment }}"
          if ! kubectl get namespace $NAMESPACE 2>/dev/null; then
            echo "⚠️ Namespace $NAMESPACE does not exist, creating..."
            kubectl create namespace $NAMESPACE
            kubectl label namespace $NAMESPACE istio-injection=enabled
            echo "✅ Namespace created and labeled for Istio injection"
          else
            echo "✅ Namespace $NAMESPACE exists"
          fi

      - name: Pre-deployment validation complete
        run: |
          echo "✅ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "Ready to deploy to **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Application
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [create-change-request, wait-for-approval, pre-deployment-checks]
    if: always() && needs.pre-deployment-checks.result == 'success'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy using Kustomize
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"

          kubectl apply -k kustomize/overlays/$ENV

          echo "NAMESPACE=microservices-$ENV" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"
          echo "Waiting for deployments in namespace: $NAMESPACE"

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            SERVICES="$SERVICES loadgenerator"
          fi

          for service in $SERVICES; do
            echo "Waiting for $service..."
            kubectl rollout status deployment/$service -n $NAMESPACE --timeout=5m || echo "⚠️ $service rollout timed out"
          done

      - name: Verify deployment health
        id: health-check
        run: |
          NAMESPACE="${{ env.NAMESPACE }}"

          echo "## Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          kubectl get pods -n $NAMESPACE

          RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '[.items[] | select(.status.phase=="Running")] | length')
          TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -o json | jq '.items | length')

          echo "**Running pods**: $RUNNING_PODS / $TOTAL_PODS" >> $GITHUB_STEP_SUMMARY

          if [ $RUNNING_PODS -lt $TOTAL_PODS ]; then
            echo "⚠️ Not all pods are running" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All pods are running" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update ServiceNow Change Request - Success
        if: success()
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<EOF
          {
            "state": "3",
            "close_code": "successful",
            "close_notes": "Deployment completed successfully to ${{ github.event.inputs.environment }}.\n\nAll pods running.\nCommit: ${{ github.sha }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "work_notes": "Deployment successful at $(date)\nNamespace: microservices-${{ github.event.inputs.environment }}\nAll pods verified running"
          }
          EOF
          )

          curl -s -X PUT \
            -H "Authorization: Basic $BASIC_AUTH" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" \
            > /dev/null

          echo "✅ Change Request updated: Successful" >> $GITHUB_STEP_SUMMARY

  # Job 5: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [create-change-request, deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="microservices-$ENV"

          echo "⚠️ Deployment failed. Rolling back..." >> $GITHUB_STEP_SUMMARY

          SERVICES="frontend cartservice productcatalogservice currencyservice paymentservice shippingservice emailservice checkoutservice recommendationservice adservice"

          for service in $SERVICES; do
            echo "Rolling back $service..."
            kubectl rollout undo deployment/$service -n $NAMESPACE || echo "⚠️ Failed to rollback $service"
          done

          echo "✅ Rollback completed" >> $GITHUB_STEP_SUMMARY

      - name: Update ServiceNow Change Request - Failed
        run: |
          CHANGE_SYS_ID="${{ needs.create-change-request.outputs.change_request_sys_id }}"
          BASIC_AUTH=$(echo -n "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" | base64)

          PAYLOAD=$(cat <<EOF
          {
            "state": "4",
            "close_code": "unsuccessful",
            "close_notes": "Deployment failed to ${{ github.event.inputs.environment }}. Automatic rollback executed.\n\nLogs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "work_notes": "Deployment failed at $(date)\nAutomatic rollback completed\nCheck run logs for details"
          }
          EOF
          )

          curl -s -X PUT \
            -H "Authorization: Basic $BASIC_AUTH" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.SERVICENOW_INSTANCE_URL }}/api/now/table/change_request/$CHANGE_SYS_ID" \
            > /dev/null

          echo "❌ Change Request updated: Failed" >> $GITHUB_STEP_SUMMARY
